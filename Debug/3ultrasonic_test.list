
3ultrasonic_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f4c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800605c  0800605c  0001605c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006138  08006138  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08006138  08006138  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006138  08006138  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006138  08006138  00016138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800613c  0800613c  0001613c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001288  20000068  080061a8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012f0  080061a8  000212f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c752  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002551  00000000  00000000  0002c826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  0002ed78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a78  00000000  00000000  0002fb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ea6  00000000  00000000  00030590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f852  00000000  00000000  00049436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000902c3  00000000  00000000  00058c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dbc  00000000  00000000  000e8f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000ecd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08006044 	.word	0x08006044

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08006044 	.word	0x08006044

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2uiz>:
 800093c:	004a      	lsls	r2, r1, #1
 800093e:	d211      	bcs.n	8000964 <__aeabi_d2uiz+0x28>
 8000940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000944:	d211      	bcs.n	800096a <__aeabi_d2uiz+0x2e>
 8000946:	d50d      	bpl.n	8000964 <__aeabi_d2uiz+0x28>
 8000948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800094c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000950:	d40e      	bmi.n	8000970 <__aeabi_d2uiz+0x34>
 8000952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800095a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800095e:	fa23 f002 	lsr.w	r0, r3, r2
 8000962:	4770      	bx	lr
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	4770      	bx	lr
 800096a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800096e:	d102      	bne.n	8000976 <__aeabi_d2uiz+0x3a>
 8000970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000974:	4770      	bx	lr
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	4770      	bx	lr

0800097c <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <delay+0x2c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 800098e:	bf00      	nop
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <delay+0x2c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	429a      	cmp	r2, r3
 800099a:	d3f9      	bcc.n	8000990 <delay+0x14>
}
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	200002d8 	.word	0x200002d8

080009ac <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	2108      	movs	r1, #8
 80009c0:	4820      	ldr	r0, [pc, #128]	; (8000a44 <send_to_lcd+0x98>)
 80009c2:	f001 fbd6 	bl	8002172 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	08db      	lsrs	r3, r3, #3
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	461a      	mov	r2, r3
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	481c      	ldr	r0, [pc, #112]	; (8000a48 <send_to_lcd+0x9c>)
 80009d8:	f001 fbcb 	bl	8002172 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	461a      	mov	r2, r3
 80009ea:	2140      	movs	r1, #64	; 0x40
 80009ec:	4816      	ldr	r0, [pc, #88]	; (8000a48 <send_to_lcd+0x9c>)
 80009ee:	f001 fbc0 	bl	8002172 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	085b      	lsrs	r3, r3, #1
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	461a      	mov	r2, r3
 8000a00:	2120      	movs	r1, #32
 8000a02:	4811      	ldr	r0, [pc, #68]	; (8000a48 <send_to_lcd+0x9c>)
 8000a04:	f001 fbb5 	bl	8002172 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	2110      	movs	r1, #16
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <send_to_lcd+0x9c>)
 8000a16:	f001 fbac 	bl	8002172 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2108      	movs	r1, #8
 8000a1e:	480a      	ldr	r0, [pc, #40]	; (8000a48 <send_to_lcd+0x9c>)
 8000a20:	f001 fba7 	bl	8002172 <HAL_GPIO_WritePin>
	delay (20);
 8000a24:	2014      	movs	r0, #20
 8000a26:	f7ff ffa9 	bl	800097c <delay>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2108      	movs	r1, #8
 8000a2e:	4806      	ldr	r0, [pc, #24]	; (8000a48 <send_to_lcd+0x9c>)
 8000a30:	f001 fb9f 	bl	8002172 <HAL_GPIO_WritePin>
	delay (20);
 8000a34:	2014      	movs	r0, #20
 8000a36:	f7ff ffa1 	bl	800097c <delay>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40010c00 	.word	0x40010c00
 8000a48:	40010800 	.word	0x40010800

08000a4c <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	091b      	lsrs	r3, r3, #4
 8000a5a:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ffa3 	bl	80009ac <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	f003 030f 	and.w	r3, r3, #15
 8000a6c:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff9a 	bl	80009ac <send_to_lcd>
}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	091b      	lsrs	r3, r3, #4
 8000a8e:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	2101      	movs	r1, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff89 	bl	80009ac <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff80 	bl	80009ac <send_to_lcd>
}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <lcd_clear>:

void lcd_clear (void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f7ff ffc7 	bl	8000a4c <lcd_send_cmd>
	HAL_Delay(2);
 8000abe:	2002      	movs	r0, #2
 8000ac0:	f001 f8b4 	bl	8001c2c <HAL_Delay>
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
    switch (row)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <lcd_put_cur+0x18>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d005      	beq.n	8000aea <lcd_put_cur+0x22>
 8000ade:	e009      	b.n	8000af4 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae6:	603b      	str	r3, [r7, #0]
            break;
 8000ae8:	e004      	b.n	8000af4 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000af0:	603b      	str	r3, [r7, #0]
            break;
 8000af2:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ffa7 	bl	8000a4c <lcd_send_cmd>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <lcd_init>:


void lcd_init (void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000b0a:	2032      	movs	r0, #50	; 0x32
 8000b0c:	f001 f88e 	bl	8001c2c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b10:	2030      	movs	r0, #48	; 0x30
 8000b12:	f7ff ff9b 	bl	8000a4c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000b16:	2005      	movs	r0, #5
 8000b18:	f001 f888 	bl	8001c2c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b1c:	2030      	movs	r0, #48	; 0x30
 8000b1e:	f7ff ff95 	bl	8000a4c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000b22:	2001      	movs	r0, #1
 8000b24:	f001 f882 	bl	8001c2c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b28:	2030      	movs	r0, #48	; 0x30
 8000b2a:	f7ff ff8f 	bl	8000a4c <lcd_send_cmd>
	HAL_Delay(10);
 8000b2e:	200a      	movs	r0, #10
 8000b30:	f001 f87c 	bl	8001c2c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000b34:	2020      	movs	r0, #32
 8000b36:	f7ff ff89 	bl	8000a4c <lcd_send_cmd>
	HAL_Delay(10);
 8000b3a:	200a      	movs	r0, #10
 8000b3c:	f001 f876 	bl	8001c2c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000b40:	2028      	movs	r0, #40	; 0x28
 8000b42:	f7ff ff83 	bl	8000a4c <lcd_send_cmd>
	HAL_Delay(1);
 8000b46:	2001      	movs	r0, #1
 8000b48:	f001 f870 	bl	8001c2c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000b4c:	2008      	movs	r0, #8
 8000b4e:	f7ff ff7d 	bl	8000a4c <lcd_send_cmd>
	HAL_Delay(1);
 8000b52:	2001      	movs	r0, #1
 8000b54:	f001 f86a 	bl	8001c2c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff ff77 	bl	8000a4c <lcd_send_cmd>
	HAL_Delay(1);
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f001 f864 	bl	8001c2c <HAL_Delay>
	HAL_Delay(1);
 8000b64:	2001      	movs	r0, #1
 8000b66:	f001 f861 	bl	8001c2c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000b6a:	2006      	movs	r0, #6
 8000b6c:	f7ff ff6e 	bl	8000a4c <lcd_send_cmd>
	HAL_Delay(1);
 8000b70:	2001      	movs	r0, #1
 8000b72:	f001 f85b 	bl	8001c2c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000b76:	200c      	movs	r0, #12
 8000b78:	f7ff ff68 	bl	8000a4c <lcd_send_cmd>
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000b88:	e006      	b.n	8000b98 <lcd_send_string+0x18>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	1c5a      	adds	r2, r3, #1
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff74 	bl	8000a80 <lcd_send_data>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1f4      	bne.n	8000b8a <lcd_send_string+0xa>
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <vApplicationGetIdleTaskMemory+0x28>)
 8000bbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000bc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	20000084 	.word	0x20000084
 8000bd8:	200000d8 	.word	0x200000d8
 8000bdc:	00000000 	.word	0x00000000

08000be0 <PID_Apply>:
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
int PID_Apply(int error){
 8000be0:	b5b0      	push	{r4, r5, r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	int output=0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]

	sum+=error;
 8000bec:	4b32      	ldr	r3, [pc, #200]	; (8000cb8 <PID_Apply+0xd8>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a30      	ldr	r2, [pc, #192]	; (8000cb8 <PID_Apply+0xd8>)
 8000bf6:	6013      	str	r3, [r2, #0]
	 propotional= kp*error;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	22b4      	movs	r2, #180	; 0xb4
 8000bfc:	fb02 f303 	mul.w	r3, r2, r3
 8000c00:	4a2e      	ldr	r2, [pc, #184]	; (8000cbc <PID_Apply+0xdc>)
 8000c02:	6013      	str	r3, [r2, #0]
	 integral=(ki*sum)/SampleTime;
 8000c04:	4b2e      	ldr	r3, [pc, #184]	; (8000cc0 <PID_Apply+0xe0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
	 derivative =kd*(error-preverror)*SampleTime;
 8000c0a:	4b2e      	ldr	r3, [pc, #184]	; (8000cc4 <PID_Apply+0xe4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fbee 	bl	80003f4 <__aeabi_i2d>
 8000c18:	a325      	add	r3, pc, #148	; (adr r3, 8000cb0 <PID_Apply+0xd0>)
 8000c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1e:	f7ff fc53 	bl	80004c8 <__aeabi_dmul>
 8000c22:	4602      	mov	r2, r0
 8000c24:	460b      	mov	r3, r1
 8000c26:	4614      	mov	r4, r2
 8000c28:	461d      	mov	r5, r3
 8000c2a:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <PID_Apply+0xe8>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fbe0 	bl	80003f4 <__aeabi_i2d>
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	4620      	mov	r0, r4
 8000c3a:	4629      	mov	r1, r5
 8000c3c:	f7ff fc44 	bl	80004c8 <__aeabi_dmul>
 8000c40:	4602      	mov	r2, r0
 8000c42:	460b      	mov	r3, r1
 8000c44:	4610      	mov	r0, r2
 8000c46:	4619      	mov	r1, r3
 8000c48:	f7ff fe50 	bl	80008ec <__aeabi_d2iz>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <PID_Apply+0xec>)
 8000c50:	6013      	str	r3, [r2, #0]

	output=propotional+integral+derivative;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <PID_Apply+0xdc>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <PID_Apply+0xe0>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	441a      	add	r2, r3
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <PID_Apply+0xec>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4413      	add	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]
	preverror=error;
 8000c64:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <PID_Apply+0xe4>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
	if(output>12000)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000c70:	4293      	cmp	r3, r2
 8000c72:	dd03      	ble.n	8000c7c <PID_Apply+0x9c>
		output=12000;
 8000c74:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	e011      	b.n	8000ca0 <PID_Apply+0xc0>
	else if(output<0)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	da02      	bge.n	8000c88 <PID_Apply+0xa8>
	{
		output=0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	e00b      	b.n	8000ca0 <PID_Apply+0xc0>
	}
	else if(output<=4500 && derivative>0)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f241 1294 	movw	r2, #4500	; 0x1194
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	dc06      	bgt.n	8000ca0 <PID_Apply+0xc0>
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <PID_Apply+0xec>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	dd02      	ble.n	8000ca0 <PID_Apply+0xc0>
	{
		output=4500;
 8000c9a:	f241 1394 	movw	r3, #4500	; 0x1194
 8000c9e:	60fb      	str	r3, [r7, #12]
	}
	return output;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8000caa:	bf00      	nop
 8000cac:	f3af 8000 	nop.w
 8000cb0:	33333333 	.word	0x33333333
 8000cb4:	3fd33333 	.word	0x3fd33333
 8000cb8:	20000434 	.word	0x20000434
 8000cbc:	20000438 	.word	0x20000438
 8000cc0:	2000043c 	.word	0x2000043c
 8000cc4:	20000428 	.word	0x20000428
 8000cc8:	20000004 	.word	0x20000004
 8000ccc:	20000440 	.word	0x20000440

08000cd0 <ReadDistanceTask>:
void ReadDistanceTask(void * pvParameters)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	MX_TIM1_Init();
 8000cd8:	f000 fc14 	bl	8001504 <MX_TIM1_Init>
	  MX_TIM3_Init();
 8000cdc:	f000 fce2 	bl	80016a4 <MX_TIM3_Init>
	  MX_TIM4_Init();
 8000ce0:	f000 fd2e 	bl	8001740 <MX_TIM4_Init>

	  HAL_TIM_Base_Start(&htim1);
 8000ce4:	48b4      	ldr	r0, [pc, #720]	; (8000fb8 <ReadDistanceTask+0x2e8>)
 8000ce6:	f001 fe8b 	bl	8002a00 <HAL_TIM_Base_Start>
	  HAL_TIM_Base_Start(&htim3);
 8000cea:	48b4      	ldr	r0, [pc, #720]	; (8000fbc <ReadDistanceTask+0x2ec>)
 8000cec:	f001 fe88 	bl	8002a00 <HAL_TIM_Base_Start>
	  HAL_TIM_Base_Start(&htim4);
 8000cf0:	48b3      	ldr	r0, [pc, #716]	; (8000fc0 <ReadDistanceTask+0x2f0>)
 8000cf2:	f001 fe85 	bl	8002a00 <HAL_TIM_Base_Start>
	  TickType_t xLastWakeTime;
	  while(1)
	  {
		  xLastWakeTime = xTaskGetTickCount();
 8000cf6:	f003 fc19 	bl	800452c <xTaskGetTickCount>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	60fb      	str	r3, [r7, #12]
		  xSemaphoreTake(TaskMutex, portMAX_DELAY);
 8000cfe:	4bb1      	ldr	r3, [pc, #708]	; (8000fc4 <ReadDistanceTask+0x2f4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 fef0 	bl	8003aec <xQueueSemaphoreTake>
		  //taskENTER_CRITICAL();
	  //center ultrasonic
	     HAL_GPIO_WritePin(TRIGCENTER_PORT, TRIGCENTER_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d12:	48ad      	ldr	r0, [pc, #692]	; (8000fc8 <ReadDistanceTask+0x2f8>)
 8000d14:	f001 fa2d 	bl	8002172 <HAL_GPIO_WritePin>
	     __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d18:	4ba7      	ldr	r3, [pc, #668]	; (8000fb8 <ReadDistanceTask+0x2e8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	625a      	str	r2, [r3, #36]	; 0x24
	     while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000d20:	bf00      	nop
 8000d22:	4ba5      	ldr	r3, [pc, #660]	; (8000fb8 <ReadDistanceTask+0x2e8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d28:	2b09      	cmp	r3, #9
 8000d2a:	d9fa      	bls.n	8000d22 <ReadDistanceTask+0x52>
	     HAL_GPIO_WritePin(TRIGCENTER_PORT, TRIGCENTER_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d32:	48a5      	ldr	r0, [pc, #660]	; (8000fc8 <ReadDistanceTask+0x2f8>)
 8000d34:	f001 fa1d 	bl	8002172 <HAL_GPIO_WritePin>

	     centerpMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000d38:	f000 ff6e 	bl	8001c18 <HAL_GetTick>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4aa3      	ldr	r2, [pc, #652]	; (8000fcc <ReadDistanceTask+0x2fc>)
 8000d40:	6013      	str	r3, [r2, #0]
	     // wait for the echo pin to go high
	     while (!(HAL_GPIO_ReadPin (ECHOCENTER_PORT, ECHOCENTER_PIN)) && centerpMillis + 10 >  HAL_GetTick());
 8000d42:	bf00      	nop
 8000d44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d48:	489f      	ldr	r0, [pc, #636]	; (8000fc8 <ReadDistanceTask+0x2f8>)
 8000d4a:	f001 f9fb 	bl	8002144 <HAL_GPIO_ReadPin>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d108      	bne.n	8000d66 <ReadDistanceTask+0x96>
 8000d54:	4b9d      	ldr	r3, [pc, #628]	; (8000fcc <ReadDistanceTask+0x2fc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f103 040a 	add.w	r4, r3, #10
 8000d5c:	f000 ff5c 	bl	8001c18 <HAL_GetTick>
 8000d60:	4603      	mov	r3, r0
 8000d62:	429c      	cmp	r4, r3
 8000d64:	d8ee      	bhi.n	8000d44 <ReadDistanceTask+0x74>
	     centerValue1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000d66:	4b94      	ldr	r3, [pc, #592]	; (8000fb8 <ReadDistanceTask+0x2e8>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6c:	4a98      	ldr	r2, [pc, #608]	; (8000fd0 <ReadDistanceTask+0x300>)
 8000d6e:	6013      	str	r3, [r2, #0]

	     centerpMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000d70:	f000 ff52 	bl	8001c18 <HAL_GetTick>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4a95      	ldr	r2, [pc, #596]	; (8000fcc <ReadDistanceTask+0x2fc>)
 8000d78:	6013      	str	r3, [r2, #0]
	     // wait for the echo pin to go low
	     while ((HAL_GPIO_ReadPin (ECHOCENTER_PORT, ECHOCENTER_PIN)) && centerpMillis + 50 > HAL_GetTick());
 8000d7a:	bf00      	nop
 8000d7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d80:	4891      	ldr	r0, [pc, #580]	; (8000fc8 <ReadDistanceTask+0x2f8>)
 8000d82:	f001 f9df 	bl	8002144 <HAL_GPIO_ReadPin>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d008      	beq.n	8000d9e <ReadDistanceTask+0xce>
 8000d8c:	4b8f      	ldr	r3, [pc, #572]	; (8000fcc <ReadDistanceTask+0x2fc>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000d94:	f000 ff40 	bl	8001c18 <HAL_GetTick>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	429c      	cmp	r4, r3
 8000d9c:	d8ee      	bhi.n	8000d7c <ReadDistanceTask+0xac>
	     centerValue2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000d9e:	4b86      	ldr	r3, [pc, #536]	; (8000fb8 <ReadDistanceTask+0x2e8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da4:	4a8b      	ldr	r2, [pc, #556]	; (8000fd4 <ReadDistanceTask+0x304>)
 8000da6:	6013      	str	r3, [r2, #0]

	     centerDistance = (centerValue2-centerValue1)* 0.034/2;
 8000da8:	4b8a      	ldr	r3, [pc, #552]	; (8000fd4 <ReadDistanceTask+0x304>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b88      	ldr	r3, [pc, #544]	; (8000fd0 <ReadDistanceTask+0x300>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fb0e 	bl	80003d4 <__aeabi_ui2d>
 8000db8:	a37d      	add	r3, pc, #500	; (adr r3, 8000fb0 <ReadDistanceTask+0x2e0>)
 8000dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbe:	f7ff fb83 	bl	80004c8 <__aeabi_dmul>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dd2:	f7ff fca3 	bl	800071c <__aeabi_ddiv>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f7ff fdad 	bl	800093c <__aeabi_d2uiz>
 8000de2:	4603      	mov	r3, r0
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	4b7c      	ldr	r3, [pc, #496]	; (8000fd8 <ReadDistanceTask+0x308>)
 8000de8:	801a      	strh	r2, [r3, #0]



	     //left ultrasonic
	     HAL_GPIO_WritePin(TRIGLEFT_PORT, TRIGLEFT_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000dea:	2201      	movs	r2, #1
 8000dec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000df0:	4875      	ldr	r0, [pc, #468]	; (8000fc8 <ReadDistanceTask+0x2f8>)
 8000df2:	f001 f9be 	bl	8002172 <HAL_GPIO_WritePin>
	     __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000df6:	4b71      	ldr	r3, [pc, #452]	; (8000fbc <ReadDistanceTask+0x2ec>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
	     while (__HAL_TIM_GET_COUNTER (&htim3) < 10);  // wait for 10 us
 8000dfe:	bf00      	nop
 8000e00:	4b6e      	ldr	r3, [pc, #440]	; (8000fbc <ReadDistanceTask+0x2ec>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e06:	2b09      	cmp	r3, #9
 8000e08:	d9fa      	bls.n	8000e00 <ReadDistanceTask+0x130>
	     HAL_GPIO_WritePin(TRIGLEFT_PORT, TRIGLEFT_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e10:	486d      	ldr	r0, [pc, #436]	; (8000fc8 <ReadDistanceTask+0x2f8>)
 8000e12:	f001 f9ae 	bl	8002172 <HAL_GPIO_WritePin>

	     leftpMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000e16:	f000 feff 	bl	8001c18 <HAL_GetTick>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a6f      	ldr	r2, [pc, #444]	; (8000fdc <ReadDistanceTask+0x30c>)
 8000e1e:	6013      	str	r3, [r2, #0]
	     // wait for the echo pin to go high
	     while (!(HAL_GPIO_ReadPin (ECHOLEFT_PORT, ECHOLEFT_PIN)) && leftpMillis + 10 >  HAL_GetTick());
 8000e20:	bf00      	nop
 8000e22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e26:	4868      	ldr	r0, [pc, #416]	; (8000fc8 <ReadDistanceTask+0x2f8>)
 8000e28:	f001 f98c 	bl	8002144 <HAL_GPIO_ReadPin>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d108      	bne.n	8000e44 <ReadDistanceTask+0x174>
 8000e32:	4b6a      	ldr	r3, [pc, #424]	; (8000fdc <ReadDistanceTask+0x30c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f103 040a 	add.w	r4, r3, #10
 8000e3a:	f000 feed 	bl	8001c18 <HAL_GetTick>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	429c      	cmp	r4, r3
 8000e42:	d8ee      	bhi.n	8000e22 <ReadDistanceTask+0x152>
	     leftValue1 = __HAL_TIM_GET_COUNTER (&htim3);
 8000e44:	4b5d      	ldr	r3, [pc, #372]	; (8000fbc <ReadDistanceTask+0x2ec>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4a:	4a65      	ldr	r2, [pc, #404]	; (8000fe0 <ReadDistanceTask+0x310>)
 8000e4c:	6013      	str	r3, [r2, #0]

	     leftpMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000e4e:	f000 fee3 	bl	8001c18 <HAL_GetTick>
 8000e52:	4603      	mov	r3, r0
 8000e54:	4a61      	ldr	r2, [pc, #388]	; (8000fdc <ReadDistanceTask+0x30c>)
 8000e56:	6013      	str	r3, [r2, #0]
	     // wait for the echo pin to go low
	     while ((HAL_GPIO_ReadPin (ECHOLEFT_PORT, ECHOLEFT_PIN)) && leftpMillis + 50 > HAL_GetTick());
 8000e58:	bf00      	nop
 8000e5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5e:	485a      	ldr	r0, [pc, #360]	; (8000fc8 <ReadDistanceTask+0x2f8>)
 8000e60:	f001 f970 	bl	8002144 <HAL_GPIO_ReadPin>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d008      	beq.n	8000e7c <ReadDistanceTask+0x1ac>
 8000e6a:	4b5c      	ldr	r3, [pc, #368]	; (8000fdc <ReadDistanceTask+0x30c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000e72:	f000 fed1 	bl	8001c18 <HAL_GetTick>
 8000e76:	4603      	mov	r3, r0
 8000e78:	429c      	cmp	r4, r3
 8000e7a:	d8ee      	bhi.n	8000e5a <ReadDistanceTask+0x18a>
	     leftValue2 = __HAL_TIM_GET_COUNTER (&htim3);
 8000e7c:	4b4f      	ldr	r3, [pc, #316]	; (8000fbc <ReadDistanceTask+0x2ec>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	4a58      	ldr	r2, [pc, #352]	; (8000fe4 <ReadDistanceTask+0x314>)
 8000e84:	6013      	str	r3, [r2, #0]

	     leftDistance = (leftValue2-leftValue1)* 0.034/2;
 8000e86:	4b57      	ldr	r3, [pc, #348]	; (8000fe4 <ReadDistanceTask+0x314>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	4b55      	ldr	r3, [pc, #340]	; (8000fe0 <ReadDistanceTask+0x310>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fa9f 	bl	80003d4 <__aeabi_ui2d>
 8000e96:	a346      	add	r3, pc, #280	; (adr r3, 8000fb0 <ReadDistanceTask+0x2e0>)
 8000e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9c:	f7ff fb14 	bl	80004c8 <__aeabi_dmul>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f04f 0200 	mov.w	r2, #0
 8000eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb0:	f7ff fc34 	bl	800071c <__aeabi_ddiv>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	4610      	mov	r0, r2
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f7ff fd3e 	bl	800093c <__aeabi_d2uiz>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	4b48      	ldr	r3, [pc, #288]	; (8000fe8 <ReadDistanceTask+0x318>)
 8000ec6:	801a      	strh	r2, [r3, #0]


	     //right ultrasonic
	     HAL_GPIO_WritePin(TRIGRIGHT_PORT, TRIGRIGHT_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ece:	4847      	ldr	r0, [pc, #284]	; (8000fec <ReadDistanceTask+0x31c>)
 8000ed0:	f001 f94f 	bl	8002172 <HAL_GPIO_WritePin>
	     __HAL_TIM_SET_COUNTER(&htim4, 0);
 8000ed4:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <ReadDistanceTask+0x2f0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	625a      	str	r2, [r3, #36]	; 0x24
	     while (__HAL_TIM_GET_COUNTER (&htim4) < 10);  // wait for 10 us
 8000edc:	bf00      	nop
 8000ede:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <ReadDistanceTask+0x2f0>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee4:	2b09      	cmp	r3, #9
 8000ee6:	d9fa      	bls.n	8000ede <ReadDistanceTask+0x20e>
	     HAL_GPIO_WritePin(TRIGRIGHT_PORT, TRIGRIGHT_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eee:	483f      	ldr	r0, [pc, #252]	; (8000fec <ReadDistanceTask+0x31c>)
 8000ef0:	f001 f93f 	bl	8002172 <HAL_GPIO_WritePin>

	     rightpMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000ef4:	f000 fe90 	bl	8001c18 <HAL_GetTick>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a3d      	ldr	r2, [pc, #244]	; (8000ff0 <ReadDistanceTask+0x320>)
 8000efc:	6013      	str	r3, [r2, #0]
	     // wait for the echo pin to go high
	     while (!(HAL_GPIO_ReadPin (ECHORIGHT_PORT, ECHORIGHT_PIN)) && rightpMillis + 10 >  HAL_GetTick());
 8000efe:	bf00      	nop
 8000f00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f04:	4839      	ldr	r0, [pc, #228]	; (8000fec <ReadDistanceTask+0x31c>)
 8000f06:	f001 f91d 	bl	8002144 <HAL_GPIO_ReadPin>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d108      	bne.n	8000f22 <ReadDistanceTask+0x252>
 8000f10:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <ReadDistanceTask+0x320>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f103 040a 	add.w	r4, r3, #10
 8000f18:	f000 fe7e 	bl	8001c18 <HAL_GetTick>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	429c      	cmp	r4, r3
 8000f20:	d8ee      	bhi.n	8000f00 <ReadDistanceTask+0x230>
	     rightValue1 = __HAL_TIM_GET_COUNTER (&htim4);
 8000f22:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <ReadDistanceTask+0x2f0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	4a32      	ldr	r2, [pc, #200]	; (8000ff4 <ReadDistanceTask+0x324>)
 8000f2a:	6013      	str	r3, [r2, #0]

	     rightpMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000f2c:	f000 fe74 	bl	8001c18 <HAL_GetTick>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a2f      	ldr	r2, [pc, #188]	; (8000ff0 <ReadDistanceTask+0x320>)
 8000f34:	6013      	str	r3, [r2, #0]
	     // wait for the echo pin to go low
	     while ((HAL_GPIO_ReadPin (ECHORIGHT_PORT, ECHORIGHT_PIN)) && rightpMillis + 50 > HAL_GetTick());
 8000f36:	bf00      	nop
 8000f38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f3c:	482b      	ldr	r0, [pc, #172]	; (8000fec <ReadDistanceTask+0x31c>)
 8000f3e:	f001 f901 	bl	8002144 <HAL_GPIO_ReadPin>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d008      	beq.n	8000f5a <ReadDistanceTask+0x28a>
 8000f48:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <ReadDistanceTask+0x320>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000f50:	f000 fe62 	bl	8001c18 <HAL_GetTick>
 8000f54:	4603      	mov	r3, r0
 8000f56:	429c      	cmp	r4, r3
 8000f58:	d8ee      	bhi.n	8000f38 <ReadDistanceTask+0x268>
	     rightValue2 = __HAL_TIM_GET_COUNTER (&htim4);
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <ReadDistanceTask+0x2f0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	4a25      	ldr	r2, [pc, #148]	; (8000ff8 <ReadDistanceTask+0x328>)
 8000f62:	6013      	str	r3, [r2, #0]

	     rightDistance = (rightValue2-rightValue1)* 0.034/2;
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <ReadDistanceTask+0x328>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <ReadDistanceTask+0x324>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fa30 	bl	80003d4 <__aeabi_ui2d>
 8000f74:	a30e      	add	r3, pc, #56	; (adr r3, 8000fb0 <ReadDistanceTask+0x2e0>)
 8000f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7a:	f7ff faa5 	bl	80004c8 <__aeabi_dmul>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4610      	mov	r0, r2
 8000f84:	4619      	mov	r1, r3
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f8e:	f7ff fbc5 	bl	800071c <__aeabi_ddiv>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fccf 	bl	800093c <__aeabi_d2uiz>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <ReadDistanceTask+0x32c>)
 8000fa4:	801a      	strh	r2, [r3, #0]
	     //taskEXIT_CRITICAL();
	    // vTaskDelay(pdMS_TO_TICKS(1500));
	     xSemaphoreGive(TaskMutex);
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <ReadDistanceTask+0x2f4>)
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	2300      	movs	r3, #0
 8000fac:	e028      	b.n	8001000 <ReadDistanceTask+0x330>
 8000fae:	bf00      	nop
 8000fb0:	b020c49c 	.word	0xb020c49c
 8000fb4:	3fa16872 	.word	0x3fa16872
 8000fb8:	200002d8 	.word	0x200002d8
 8000fbc:	20000368 	.word	0x20000368
 8000fc0:	200003b0 	.word	0x200003b0
 8000fc4:	20000450 	.word	0x20000450
 8000fc8:	40010800 	.word	0x40010800
 8000fcc:	200003f8 	.word	0x200003f8
 8000fd0:	200003fc 	.word	0x200003fc
 8000fd4:	20000400 	.word	0x20000400
 8000fd8:	20000404 	.word	0x20000404
 8000fdc:	20000408 	.word	0x20000408
 8000fe0:	2000040c 	.word	0x2000040c
 8000fe4:	20000410 	.word	0x20000410
 8000fe8:	20000414 	.word	0x20000414
 8000fec:	40010c00 	.word	0x40010c00
 8000ff0:	20000418 	.word	0x20000418
 8000ff4:	2000041c 	.word	0x2000041c
 8000ff8:	20000420 	.word	0x20000420
 8000ffc:	20000424 	.word	0x20000424
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	f002 fc74 	bl	80038f0 <xQueueGenericSend>
	     vTaskDelayUntil (&xLastWakeTime,pdMS_TO_TICKS(1000));
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001010:	4618      	mov	r0, r3
 8001012:	f003 f903 	bl	800421c <vTaskDelayUntil>
		  xLastWakeTime = xTaskGetTickCount();
 8001016:	e66e      	b.n	8000cf6 <ReadDistanceTask+0x26>

08001018 <PathFindTask>:

	  }
}
void PathFindTask(void * pvParameters)
		{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

	  MX_TIM2_Init();
 8001020:	f000 fac0 	bl	80015a4 <MX_TIM2_Init>
	  MX_TIM1_Init();
 8001024:	f000 fa6e 	bl	8001504 <MX_TIM1_Init>
	  HAL_TIM_Base_Start(&htim1);
 8001028:	489e      	ldr	r0, [pc, #632]	; (80012a4 <PathFindTask+0x28c>)
 800102a:	f001 fce9 	bl	8002a00 <HAL_TIM_Base_Start>


	  	  //HAL_TIM_Base_Start(&htim1);

	  HAL_GPIO_WritePin(TRIGCENTER_PORT, TRIGCENTER_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001034:	489c      	ldr	r0, [pc, #624]	; (80012a8 <PathFindTask+0x290>)
 8001036:	f001 f89c 	bl	8002172 <HAL_GPIO_WritePin>
	   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800103a:	2100      	movs	r1, #0
 800103c:	489b      	ldr	r0, [pc, #620]	; (80012ac <PathFindTask+0x294>)
 800103e:	f001 fd81 	bl	8002b44 <HAL_TIM_PWM_Start>
	   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001042:	2104      	movs	r1, #4
 8001044:	4899      	ldr	r0, [pc, #612]	; (80012ac <PathFindTask+0x294>)
 8001046:	f001 fd7d 	bl	8002b44 <HAL_TIM_PWM_Start>

	  lcd_init ();
 800104a:	f7ff fd5c 	bl	8000b06 <lcd_init>
	  HAL_Delay(1000);
 800104e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001052:	f000 fdeb 	bl	8001c2c <HAL_Delay>
	  lcd_clear();
 8001056:	f7ff fd2d 	bl	8000ab4 <lcd_clear>
	  lcd_put_cur(0, 0);
 800105a:	2100      	movs	r1, #0
 800105c:	2000      	movs	r0, #0
 800105e:	f7ff fd33 	bl	8000ac8 <lcd_put_cur>
	  lcd_send_string("HELLO ");
 8001062:	4893      	ldr	r0, [pc, #588]	; (80012b0 <PathFindTask+0x298>)
 8001064:	f7ff fd8c 	bl	8000b80 <lcd_send_string>

	  HAL_Delay(1000);
 8001068:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800106c:	f000 fdde 	bl	8001c2c <HAL_Delay>
	  lcd_clear();
 8001070:	f7ff fd20 	bl	8000ab4 <lcd_clear>
	  TickType_t xLastWakeTime;

	  while(1)
	  {
		  xLastWakeTime = xTaskGetTickCount();
 8001074:	f003 fa5a 	bl	800452c <xTaskGetTickCount>
 8001078:	4603      	mov	r3, r0
 800107a:	60fb      	str	r3, [r7, #12]
		//  xSemaphoreTake(TaskMutex, portMAX_DELAY);
		 // taskENTER_CRITICAL();
		  if(leftDistance>40 && rightDistance>40 && centerDistance>40){
 800107c:	4b8d      	ldr	r3, [pc, #564]	; (80012b4 <PathFindTask+0x29c>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	2b28      	cmp	r3, #40	; 0x28
 8001082:	d91d      	bls.n	80010c0 <PathFindTask+0xa8>
 8001084:	4b8c      	ldr	r3, [pc, #560]	; (80012b8 <PathFindTask+0x2a0>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	2b28      	cmp	r3, #40	; 0x28
 800108a:	d919      	bls.n	80010c0 <PathFindTask+0xa8>
 800108c:	4b8b      	ldr	r3, [pc, #556]	; (80012bc <PathFindTask+0x2a4>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	2b28      	cmp	r3, #40	; 0x28
 8001092:	d915      	bls.n	80010c0 <PathFindTask+0xa8>
		    	     	TIM2->CCR1=0;
 8001094:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001098:	2200      	movs	r2, #0
 800109a:	635a      	str	r2, [r3, #52]	; 0x34
		    	     	TIM2->CCR2=0;
 800109c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010a0:	2200      	movs	r2, #0
 80010a2:	639a      	str	r2, [r3, #56]	; 0x38
		    	     	lcd_put_cur(0, 0);
 80010a4:	2100      	movs	r1, #0
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fd0e 	bl	8000ac8 <lcd_put_cur>
		    	     	  lcd_send_string("No object detected! ");
 80010ac:	4884      	ldr	r0, [pc, #528]	; (80012c0 <PathFindTask+0x2a8>)
 80010ae:	f7ff fd67 	bl	8000b80 <lcd_send_string>

		   	     	  HAL_Delay(1000);
 80010b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b6:	f000 fdb9 	bl	8001c2c <HAL_Delay>
		   	     	  lcd_clear();
 80010ba:	f7ff fcfb 	bl	8000ab4 <lcd_clear>
 80010be:	e18d      	b.n	80013dc <PathFindTask+0x3c4>
		    	     }
		     else if((leftDistance>rightDistance && centerDistance>rightDistance) ){
 80010c0:	4b7c      	ldr	r3, [pc, #496]	; (80012b4 <PathFindTask+0x29c>)
 80010c2:	881a      	ldrh	r2, [r3, #0]
 80010c4:	4b7c      	ldr	r3, [pc, #496]	; (80012b8 <PathFindTask+0x2a0>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d971      	bls.n	80011b0 <PathFindTask+0x198>
 80010cc:	4b7b      	ldr	r3, [pc, #492]	; (80012bc <PathFindTask+0x2a4>)
 80010ce:	881a      	ldrh	r2, [r3, #0]
 80010d0:	4b79      	ldr	r3, [pc, #484]	; (80012b8 <PathFindTask+0x2a0>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d96b      	bls.n	80011b0 <PathFindTask+0x198>
		    	     	error=(rightDistance-desiredDistance);
 80010d8:	4b77      	ldr	r3, [pc, #476]	; (80012b8 <PathFindTask+0x2a0>)
 80010da:	881a      	ldrh	r2, [r3, #0]
 80010dc:	4b79      	ldr	r3, [pc, #484]	; (80012c4 <PathFindTask+0x2ac>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	4b78      	ldr	r3, [pc, #480]	; (80012c8 <PathFindTask+0x2b0>)
 80010e8:	801a      	strh	r2, [r3, #0]
		    	     	if(error<=0)
 80010ea:	4b77      	ldr	r3, [pc, #476]	; (80012c8 <PathFindTask+0x2b0>)
 80010ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	dc14      	bgt.n	800111e <PathFindTask+0x106>
		    	     	{
		    	     		pwmR=0;
 80010f4:	4b75      	ldr	r3, [pc, #468]	; (80012cc <PathFindTask+0x2b4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
		    	     		TIM2->CCR1=pwmR;
 80010fa:	4b74      	ldr	r3, [pc, #464]	; (80012cc <PathFindTask+0x2b4>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001102:	635a      	str	r2, [r3, #52]	; 0x34
		    	     		TIM2->CCR2=pwmR;
 8001104:	4b71      	ldr	r3, [pc, #452]	; (80012cc <PathFindTask+0x2b4>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800110c:	639a      	str	r2, [r3, #56]	; 0x38
		    	     		lcd_put_cur(0, 0);
 800110e:	2100      	movs	r1, #0
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff fcd9 	bl	8000ac8 <lcd_put_cur>
		    	     		 lcd_send_string("desired distance reached");
 8001116:	486e      	ldr	r0, [pc, #440]	; (80012d0 <PathFindTask+0x2b8>)
 8001118:	f7ff fd32 	bl	8000b80 <lcd_send_string>
		    	     	if(error<=0)
 800111c:	e15e      	b.n	80013dc <PathFindTask+0x3c4>
		    	     	}
		    	     	else
		    	     	{
		    	     	pwmR=PID_Apply(error);
 800111e:	4b6a      	ldr	r3, [pc, #424]	; (80012c8 <PathFindTask+0x2b0>)
 8001120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fd5b 	bl	8000be0 <PID_Apply>
 800112a:	4603      	mov	r3, r0
 800112c:	4a67      	ldr	r2, [pc, #412]	; (80012cc <PathFindTask+0x2b4>)
 800112e:	6013      	str	r3, [r2, #0]
		    	     	//pwmR=error*1000;
		    	     	TIM2->CCR1=pwmR;
 8001130:	4b66      	ldr	r3, [pc, #408]	; (80012cc <PathFindTask+0x2b4>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001138:	635a      	str	r2, [r3, #52]	; 0x34
		    	     	TIM2->CCR2=0;
 800113a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800113e:	2200      	movs	r2, #0
 8001140:	639a      	str	r2, [r3, #56]	; 0x38
		    	     	lcd_put_cur(0, 0);
 8001142:	2100      	movs	r1, #0
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff fcbf 	bl	8000ac8 <lcd_put_cur>
		    	       lcd_send_string("Move Right");
 800114a:	4862      	ldr	r0, [pc, #392]	; (80012d4 <PathFindTask+0x2bc>)
 800114c:	f7ff fd18 	bl	8000b80 <lcd_send_string>
		    	    	  lcd_put_cur(1, 0);
 8001150:	2100      	movs	r1, #0
 8001152:	2001      	movs	r0, #1
 8001154:	f7ff fcb8 	bl	8000ac8 <lcd_put_cur>
		    	     	sprintf(buf,"%d",error); // @suppress("Float formatting support"
 8001158:	4b5b      	ldr	r3, [pc, #364]	; (80012c8 <PathFindTask+0x2b0>)
 800115a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115e:	461a      	mov	r2, r3
 8001160:	495d      	ldr	r1, [pc, #372]	; (80012d8 <PathFindTask+0x2c0>)
 8001162:	485e      	ldr	r0, [pc, #376]	; (80012dc <PathFindTask+0x2c4>)
 8001164:	f004 fabc 	bl	80056e0 <siprintf>
		    	     		  lcd_send_string(buf);
 8001168:	485c      	ldr	r0, [pc, #368]	; (80012dc <PathFindTask+0x2c4>)
 800116a:	f7ff fd09 	bl	8000b80 <lcd_send_string>
		        		  lcd_send_string("  ");
 800116e:	485c      	ldr	r0, [pc, #368]	; (80012e0 <PathFindTask+0x2c8>)
 8001170:	f7ff fd06 	bl	8000b80 <lcd_send_string>
		        		sprintf(buf,"%d",pwmR); // @suppress("Float formatting support"
 8001174:	4b55      	ldr	r3, [pc, #340]	; (80012cc <PathFindTask+0x2b4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4957      	ldr	r1, [pc, #348]	; (80012d8 <PathFindTask+0x2c0>)
 800117c:	4857      	ldr	r0, [pc, #348]	; (80012dc <PathFindTask+0x2c4>)
 800117e:	f004 faaf 	bl	80056e0 <siprintf>
		        		  	     		  lcd_send_string(buf);
 8001182:	4856      	ldr	r0, [pc, #344]	; (80012dc <PathFindTask+0x2c4>)
 8001184:	f7ff fcfc 	bl	8000b80 <lcd_send_string>
		        		      		  lcd_send_string("  ");
 8001188:	4855      	ldr	r0, [pc, #340]	; (80012e0 <PathFindTask+0x2c8>)
 800118a:	f7ff fcf9 	bl	8000b80 <lcd_send_string>
		    	     			sprintf(buf,"%d",rightDistance); // @suppress("Float formatting support"
 800118e:	4b4a      	ldr	r3, [pc, #296]	; (80012b8 <PathFindTask+0x2a0>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	4950      	ldr	r1, [pc, #320]	; (80012d8 <PathFindTask+0x2c0>)
 8001196:	4851      	ldr	r0, [pc, #324]	; (80012dc <PathFindTask+0x2c4>)
 8001198:	f004 faa2 	bl	80056e0 <siprintf>
		    	     		    		  lcd_send_string(buf);
 800119c:	484f      	ldr	r0, [pc, #316]	; (80012dc <PathFindTask+0x2c4>)
 800119e:	f7ff fcef 	bl	8000b80 <lcd_send_string>

		    	     	 HAL_Delay(1000);
 80011a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a6:	f000 fd41 	bl	8001c2c <HAL_Delay>
		    	     	  lcd_clear();
 80011aa:	f7ff fc83 	bl	8000ab4 <lcd_clear>
		    	     	if(error<=0)
 80011ae:	e115      	b.n	80013dc <PathFindTask+0x3c4>
		    	     	}


		       }
		    	 else if((leftDistance<rightDistance && centerDistance>leftDistance)  ){
 80011b0:	4b40      	ldr	r3, [pc, #256]	; (80012b4 <PathFindTask+0x29c>)
 80011b2:	881a      	ldrh	r2, [r3, #0]
 80011b4:	4b40      	ldr	r3, [pc, #256]	; (80012b8 <PathFindTask+0x2a0>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	f080 8097 	bcs.w	80012ec <PathFindTask+0x2d4>
 80011be:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <PathFindTask+0x2a4>)
 80011c0:	881a      	ldrh	r2, [r3, #0]
 80011c2:	4b3c      	ldr	r3, [pc, #240]	; (80012b4 <PathFindTask+0x29c>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	f240 8090 	bls.w	80012ec <PathFindTask+0x2d4>
		    	     	error=(leftDistance-desiredDistance);
 80011cc:	4b39      	ldr	r3, [pc, #228]	; (80012b4 <PathFindTask+0x29c>)
 80011ce:	881a      	ldrh	r2, [r3, #0]
 80011d0:	4b3c      	ldr	r3, [pc, #240]	; (80012c4 <PathFindTask+0x2ac>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	b21a      	sxth	r2, r3
 80011da:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <PathFindTask+0x2b0>)
 80011dc:	801a      	strh	r2, [r3, #0]
		    	     	pwmL=PID_Apply(error);
 80011de:	4b3a      	ldr	r3, [pc, #232]	; (80012c8 <PathFindTask+0x2b0>)
 80011e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fcfb 	bl	8000be0 <PID_Apply>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a3d      	ldr	r2, [pc, #244]	; (80012e4 <PathFindTask+0x2cc>)
 80011ee:	6013      	str	r3, [r2, #0]
		    	     	if(error<=0)
 80011f0:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <PathFindTask+0x2b0>)
 80011f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	dc14      	bgt.n	8001224 <PathFindTask+0x20c>
		    	     	  	     	{
		    	     	  	     		pwmL=0;
 80011fa:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <PathFindTask+0x2cc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
		    	     	  	     		TIM2->CCR1=pwmL;
 8001200:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <PathFindTask+0x2cc>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001208:	635a      	str	r2, [r3, #52]	; 0x34
		    	     	  	     		TIM2->CCR2=pwmL;
 800120a:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <PathFindTask+0x2cc>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001212:	639a      	str	r2, [r3, #56]	; 0x38
		    	     	  	     		lcd_put_cur(0, 0);
 8001214:	2100      	movs	r1, #0
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff fc56 	bl	8000ac8 <lcd_put_cur>
		    	     	  	     		 lcd_send_string("desired distance reached");
 800121c:	482c      	ldr	r0, [pc, #176]	; (80012d0 <PathFindTask+0x2b8>)
 800121e:	f7ff fcaf 	bl	8000b80 <lcd_send_string>
		    	     	if(error<=0)
 8001222:	e0db      	b.n	80013dc <PathFindTask+0x3c4>
		    	     	  	     	}
		    	     	  	     	else
		    	     	  	     	{
		    	     	TIM2->CCR2=pwmL;
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <PathFindTask+0x2cc>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800122c:	639a      	str	r2, [r3, #56]	; 0x38
		    	     	TIM2->CCR1=0;
 800122e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001232:	2200      	movs	r2, #0
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
		    	     	lcd_put_cur(0, 0);
 8001236:	2100      	movs	r1, #0
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fc45 	bl	8000ac8 <lcd_put_cur>
		    	     	  lcd_send_string("Move Left ");
 800123e:	482a      	ldr	r0, [pc, #168]	; (80012e8 <PathFindTask+0x2d0>)
 8001240:	f7ff fc9e 	bl	8000b80 <lcd_send_string>
		    	     	 lcd_put_cur(1, 0);
 8001244:	2100      	movs	r1, #0
 8001246:	2001      	movs	r0, #1
 8001248:	f7ff fc3e 	bl	8000ac8 <lcd_put_cur>
		    	     	  	     	sprintf(buf,"%d",error); // @suppress("Float formatting support"
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <PathFindTask+0x2b0>)
 800124e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001252:	461a      	mov	r2, r3
 8001254:	4920      	ldr	r1, [pc, #128]	; (80012d8 <PathFindTask+0x2c0>)
 8001256:	4821      	ldr	r0, [pc, #132]	; (80012dc <PathFindTask+0x2c4>)
 8001258:	f004 fa42 	bl	80056e0 <siprintf>
		    	     	  	     		  lcd_send_string(buf);
 800125c:	481f      	ldr	r0, [pc, #124]	; (80012dc <PathFindTask+0x2c4>)
 800125e:	f7ff fc8f 	bl	8000b80 <lcd_send_string>
		    	     	  	     	 lcd_send_string("  ");
 8001262:	481f      	ldr	r0, [pc, #124]	; (80012e0 <PathFindTask+0x2c8>)
 8001264:	f7ff fc8c 	bl	8000b80 <lcd_send_string>
		    	     	  	     	sprintf(buf,"%d",pwmL); // @suppress("Float formatting support"
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <PathFindTask+0x2cc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	491a      	ldr	r1, [pc, #104]	; (80012d8 <PathFindTask+0x2c0>)
 8001270:	481a      	ldr	r0, [pc, #104]	; (80012dc <PathFindTask+0x2c4>)
 8001272:	f004 fa35 	bl	80056e0 <siprintf>
		    	     	  	     	  lcd_send_string(buf);
 8001276:	4819      	ldr	r0, [pc, #100]	; (80012dc <PathFindTask+0x2c4>)
 8001278:	f7ff fc82 	bl	8000b80 <lcd_send_string>
		    	     	      		  lcd_send_string("  ");
 800127c:	4818      	ldr	r0, [pc, #96]	; (80012e0 <PathFindTask+0x2c8>)
 800127e:	f7ff fc7f 	bl	8000b80 <lcd_send_string>
		    	     	  	     			sprintf(buf,"%d",leftDistance); // @suppress("Float formatting support"
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <PathFindTask+0x29c>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	4913      	ldr	r1, [pc, #76]	; (80012d8 <PathFindTask+0x2c0>)
 800128a:	4814      	ldr	r0, [pc, #80]	; (80012dc <PathFindTask+0x2c4>)
 800128c:	f004 fa28 	bl	80056e0 <siprintf>
		    	     	  	     		    		  lcd_send_string(buf);
 8001290:	4812      	ldr	r0, [pc, #72]	; (80012dc <PathFindTask+0x2c4>)
 8001292:	f7ff fc75 	bl	8000b80 <lcd_send_string>

		    	     	  HAL_Delay(1000);
 8001296:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800129a:	f000 fcc7 	bl	8001c2c <HAL_Delay>
		    	     	  lcd_clear();
 800129e:	f7ff fc09 	bl	8000ab4 <lcd_clear>
		    	     	if(error<=0)
 80012a2:	e09b      	b.n	80013dc <PathFindTask+0x3c4>
 80012a4:	200002d8 	.word	0x200002d8
 80012a8:	40010800 	.word	0x40010800
 80012ac:	20000320 	.word	0x20000320
 80012b0:	0800605c 	.word	0x0800605c
 80012b4:	20000414 	.word	0x20000414
 80012b8:	20000424 	.word	0x20000424
 80012bc:	20000404 	.word	0x20000404
 80012c0:	08006064 	.word	0x08006064
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000426 	.word	0x20000426
 80012cc:	2000042c 	.word	0x2000042c
 80012d0:	0800607c 	.word	0x0800607c
 80012d4:	08006098 	.word	0x08006098
 80012d8:	080060a4 	.word	0x080060a4
 80012dc:	20000444 	.word	0x20000444
 80012e0:	080060a8 	.word	0x080060a8
 80012e4:	20000430 	.word	0x20000430
 80012e8:	080060ac 	.word	0x080060ac
		    	     	  	     	}


		    	     }
		    	     else if((leftDistance>centerDistance && centerDistance<rightDistance)  )
 80012ec:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <PathFindTask+0x3d4>)
 80012ee:	881a      	ldrh	r2, [r3, #0]
 80012f0:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <PathFindTask+0x3d8>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d971      	bls.n	80013dc <PathFindTask+0x3c4>
 80012f8:	4b3d      	ldr	r3, [pc, #244]	; (80013f0 <PathFindTask+0x3d8>)
 80012fa:	881a      	ldrh	r2, [r3, #0]
 80012fc:	4b3d      	ldr	r3, [pc, #244]	; (80013f4 <PathFindTask+0x3dc>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d26b      	bcs.n	80013dc <PathFindTask+0x3c4>
		    	     {
		    	    	    error=(centerDistance-desiredDistance);
 8001304:	4b3a      	ldr	r3, [pc, #232]	; (80013f0 <PathFindTask+0x3d8>)
 8001306:	881a      	ldrh	r2, [r3, #0]
 8001308:	4b3b      	ldr	r3, [pc, #236]	; (80013f8 <PathFindTask+0x3e0>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	b29b      	uxth	r3, r3
 8001310:	b21a      	sxth	r2, r3
 8001312:	4b3a      	ldr	r3, [pc, #232]	; (80013fc <PathFindTask+0x3e4>)
 8001314:	801a      	strh	r2, [r3, #0]
		    	    	    pwmR=PID_Apply(error);
 8001316:	4b39      	ldr	r3, [pc, #228]	; (80013fc <PathFindTask+0x3e4>)
 8001318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fc5f 	bl	8000be0 <PID_Apply>
 8001322:	4603      	mov	r3, r0
 8001324:	4a36      	ldr	r2, [pc, #216]	; (8001400 <PathFindTask+0x3e8>)
 8001326:	6013      	str	r3, [r2, #0]
		    	    	       // pwmL=PID_Apply(error);
		    	    	   if(error<=0)
 8001328:	4b34      	ldr	r3, [pc, #208]	; (80013fc <PathFindTask+0x3e4>)
 800132a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132e:	2b00      	cmp	r3, #0
 8001330:	dc14      	bgt.n	800135c <PathFindTask+0x344>
		    	    	 {
		    	    		 pwmR=0;
 8001332:	4b33      	ldr	r3, [pc, #204]	; (8001400 <PathFindTask+0x3e8>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
		    	    	    TIM2->CCR1=pwmR;
 8001338:	4b31      	ldr	r3, [pc, #196]	; (8001400 <PathFindTask+0x3e8>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001340:	635a      	str	r2, [r3, #52]	; 0x34
		    	    	    TIM2->CCR2=pwmR;
 8001342:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <PathFindTask+0x3e8>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800134a:	639a      	str	r2, [r3, #56]	; 0x38
		     	     		lcd_put_cur(0, 0);
 800134c:	2100      	movs	r1, #0
 800134e:	2000      	movs	r0, #0
 8001350:	f7ff fbba 	bl	8000ac8 <lcd_put_cur>
		  	    	  	 lcd_send_string("desired distance reached");
 8001354:	482b      	ldr	r0, [pc, #172]	; (8001404 <PathFindTask+0x3ec>)
 8001356:	f7ff fc13 	bl	8000b80 <lcd_send_string>
 800135a:	e03f      	b.n	80013dc <PathFindTask+0x3c4>
		    	    	  }
		    	    	   	else
		    	    	  {
		    	    	    TIM2->CCR1=pwmR;
 800135c:	4b28      	ldr	r3, [pc, #160]	; (8001400 <PathFindTask+0x3e8>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001364:	635a      	str	r2, [r3, #52]	; 0x34
		    	    	    TIM2->CCR2=pwmR;
 8001366:	4b26      	ldr	r3, [pc, #152]	; (8001400 <PathFindTask+0x3e8>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800136e:	639a      	str	r2, [r3, #56]	; 0x38
		       	     	lcd_put_cur(0, 0);
 8001370:	2100      	movs	r1, #0
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff fba8 	bl	8000ac8 <lcd_put_cur>
		    	    	    lcd_send_string("Move Forward ");
 8001378:	4823      	ldr	r0, [pc, #140]	; (8001408 <PathFindTask+0x3f0>)
 800137a:	f7ff fc01 	bl	8000b80 <lcd_send_string>
		    	    	    lcd_put_cur(1, 0);
 800137e:	2100      	movs	r1, #0
 8001380:	2001      	movs	r0, #1
 8001382:	f7ff fba1 	bl	8000ac8 <lcd_put_cur>
		    	    	   	sprintf(buf,"%d",error); // @suppress("Float formatting support"
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <PathFindTask+0x3e4>)
 8001388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138c:	461a      	mov	r2, r3
 800138e:	491f      	ldr	r1, [pc, #124]	; (800140c <PathFindTask+0x3f4>)
 8001390:	481f      	ldr	r0, [pc, #124]	; (8001410 <PathFindTask+0x3f8>)
 8001392:	f004 f9a5 	bl	80056e0 <siprintf>
		    	    	   	lcd_send_string(buf);
 8001396:	481e      	ldr	r0, [pc, #120]	; (8001410 <PathFindTask+0x3f8>)
 8001398:	f7ff fbf2 	bl	8000b80 <lcd_send_string>
		    	    	   lcd_send_string("  ");
 800139c:	481d      	ldr	r0, [pc, #116]	; (8001414 <PathFindTask+0x3fc>)
 800139e:	f7ff fbef 	bl	8000b80 <lcd_send_string>
		             		sprintf(buf,"%d",pwmR); // @suppress("Float formatting support"
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <PathFindTask+0x3e8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	4918      	ldr	r1, [pc, #96]	; (800140c <PathFindTask+0x3f4>)
 80013aa:	4819      	ldr	r0, [pc, #100]	; (8001410 <PathFindTask+0x3f8>)
 80013ac:	f004 f998 	bl	80056e0 <siprintf>
		             		lcd_send_string(buf);
 80013b0:	4817      	ldr	r0, [pc, #92]	; (8001410 <PathFindTask+0x3f8>)
 80013b2:	f7ff fbe5 	bl	8000b80 <lcd_send_string>
		    	   		  lcd_send_string("  ");
 80013b6:	4817      	ldr	r0, [pc, #92]	; (8001414 <PathFindTask+0x3fc>)
 80013b8:	f7ff fbe2 	bl	8000b80 <lcd_send_string>
		    	    	 	sprintf(buf,"%d",centerDistance); // @suppress("Float formatting support"
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <PathFindTask+0x3d8>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4912      	ldr	r1, [pc, #72]	; (800140c <PathFindTask+0x3f4>)
 80013c4:	4812      	ldr	r0, [pc, #72]	; (8001410 <PathFindTask+0x3f8>)
 80013c6:	f004 f98b 	bl	80056e0 <siprintf>
		    	    	    lcd_send_string(buf);
 80013ca:	4811      	ldr	r0, [pc, #68]	; (8001410 <PathFindTask+0x3f8>)
 80013cc:	f7ff fbd8 	bl	8000b80 <lcd_send_string>
		    	    	    HAL_Delay(1000);
 80013d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013d4:	f000 fc2a 	bl	8001c2c <HAL_Delay>
		    	    	     lcd_clear();
 80013d8:	f7ff fb6c 	bl	8000ab4 <lcd_clear>


		    	    	     }
		    	     }

	  vTaskDelayUntil (&xLastWakeTime,pdMS_TO_TICKS(1000));
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 ff19 	bl	800421c <vTaskDelayUntil>
		  xLastWakeTime = xTaskGetTickCount();
 80013ea:	e643      	b.n	8001074 <PathFindTask+0x5c>
 80013ec:	20000414 	.word	0x20000414
 80013f0:	20000404 	.word	0x20000404
 80013f4:	20000424 	.word	0x20000424
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000426 	.word	0x20000426
 8001400:	2000042c 	.word	0x2000042c
 8001404:	0800607c 	.word	0x0800607c
 8001408:	080060b8 	.word	0x080060b8
 800140c:	080060a4 	.word	0x080060a4
 8001410:	20000444 	.word	0x20000444
 8001414:	080060a8 	.word	0x080060a8

08001418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800141e:	f000 fba3 	bl	8001b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001422:	f000 f829 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001426:	f000 f9d9 	bl	80017dc <MX_GPIO_Init>

  TaskMutex=xSemaphoreCreateMutex();
 800142a:	2001      	movs	r0, #1
 800142c:	f002 fa47 	bl	80038be <xQueueCreateMutex>
 8001430:	4603      	mov	r3, r0
 8001432:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <main+0x4c>)
 8001434:	6013      	str	r3, [r2, #0]
  xTaskCreate(PathFindTask,"Task2",128,NULL,1,NULL);
 8001436:	2300      	movs	r3, #0
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	2301      	movs	r3, #1
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2300      	movs	r3, #0
 8001440:	2280      	movs	r2, #128	; 0x80
 8001442:	4909      	ldr	r1, [pc, #36]	; (8001468 <main+0x50>)
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <main+0x54>)
 8001446:	f002 fdba 	bl	8003fbe <xTaskCreate>
xTaskCreate(ReadDistanceTask,"Task1",128,NULL,2,NULL);
 800144a:	2300      	movs	r3, #0
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	2302      	movs	r3, #2
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2300      	movs	r3, #0
 8001454:	2280      	movs	r2, #128	; 0x80
 8001456:	4906      	ldr	r1, [pc, #24]	; (8001470 <main+0x58>)
 8001458:	4806      	ldr	r0, [pc, #24]	; (8001474 <main+0x5c>)
 800145a:	f002 fdb0 	bl	8003fbe <xTaskCreate>


  vTaskStartScheduler();
 800145e:	f002 ff5b 	bl	8004318 <vTaskStartScheduler>




  while (1)
 8001462:	e7fe      	b.n	8001462 <main+0x4a>
 8001464:	20000450 	.word	0x20000450
 8001468:	080060c8 	.word	0x080060c8
 800146c:	08001019 	.word	0x08001019
 8001470:	080060d0 	.word	0x080060d0
 8001474:	08000cd1 	.word	0x08000cd1

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b090      	sub	sp, #64	; 0x40
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	2228      	movs	r2, #40	; 0x28
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f004 f94a 	bl	8005720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800149a:	2301      	movs	r3, #1
 800149c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800149e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a8:	2301      	movs	r3, #1
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ac:	2302      	movs	r3, #2
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014bc:	f107 0318 	add.w	r3, r7, #24
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 fe6f 	bl	80021a4 <HAL_RCC_OscConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014cc:	f000 fa02 	bl	80018d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d0:	230f      	movs	r3, #15
 80014d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d4:	2302      	movs	r3, #2
 80014d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2102      	movs	r1, #2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f001 f8dc 	bl	80026a8 <HAL_RCC_ClockConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014f6:	f000 f9ed 	bl	80018d4 <Error_Handler>
  }
}
 80014fa:	bf00      	nop
 80014fc:	3740      	adds	r7, #64	; 0x40
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001518:	463b      	mov	r3, r7
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <MX_TIM1_Init+0x98>)
 8001522:	4a1f      	ldr	r2, [pc, #124]	; (80015a0 <MX_TIM1_Init+0x9c>)
 8001524:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001526:	4b1d      	ldr	r3, [pc, #116]	; (800159c <MX_TIM1_Init+0x98>)
 8001528:	2247      	movs	r2, #71	; 0x47
 800152a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <MX_TIM1_Init+0x98>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_TIM1_Init+0x98>)
 8001534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001538:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <MX_TIM1_Init+0x98>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <MX_TIM1_Init+0x98>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <MX_TIM1_Init+0x98>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800154c:	4813      	ldr	r0, [pc, #76]	; (800159c <MX_TIM1_Init+0x98>)
 800154e:	f001 fa07 	bl	8002960 <HAL_TIM_Base_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001558:	f000 f9bc 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001560:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	4619      	mov	r1, r3
 8001568:	480c      	ldr	r0, [pc, #48]	; (800159c <MX_TIM1_Init+0x98>)
 800156a:	f001 fc4f 	bl	8002e0c <HAL_TIM_ConfigClockSource>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001574:	f000 f9ae 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001578:	2300      	movs	r3, #0
 800157a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001580:	463b      	mov	r3, r7
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_TIM1_Init+0x98>)
 8001586:	f001 ffad 	bl	80034e4 <HAL_TIMEx_MasterConfigSynchronization>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001590:	f000 f9a0 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200002d8 	.word	0x200002d8
 80015a0:	40012c00 	.word	0x40012c00

080015a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08e      	sub	sp, #56	; 0x38
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b8:	f107 0320 	add.w	r3, r7, #32
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
 80015d0:	615a      	str	r2, [r3, #20]
 80015d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d4:	4b32      	ldr	r3, [pc, #200]	; (80016a0 <MX_TIM2_Init+0xfc>)
 80015d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015dc:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <MX_TIM2_Init+0xfc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80015e2:	4b2f      	ldr	r3, [pc, #188]	; (80016a0 <MX_TIM2_Init+0xfc>)
 80015e4:	2240      	movs	r2, #64	; 0x40
 80015e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000;
 80015e8:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <MX_TIM2_Init+0xfc>)
 80015ea:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80015ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f0:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <MX_TIM2_Init+0xfc>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015f6:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <MX_TIM2_Init+0xfc>)
 80015f8:	2280      	movs	r2, #128	; 0x80
 80015fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015fc:	4828      	ldr	r0, [pc, #160]	; (80016a0 <MX_TIM2_Init+0xfc>)
 80015fe:	f001 f9af 	bl	8002960 <HAL_TIM_Base_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001608:	f000 f964 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001616:	4619      	mov	r1, r3
 8001618:	4821      	ldr	r0, [pc, #132]	; (80016a0 <MX_TIM2_Init+0xfc>)
 800161a:	f001 fbf7 	bl	8002e0c <HAL_TIM_ConfigClockSource>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001624:	f000 f956 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001628:	481d      	ldr	r0, [pc, #116]	; (80016a0 <MX_TIM2_Init+0xfc>)
 800162a:	f001 fa33 	bl	8002a94 <HAL_TIM_PWM_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001634:	f000 f94e 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001640:	f107 0320 	add.w	r3, r7, #32
 8001644:	4619      	mov	r1, r3
 8001646:	4816      	ldr	r0, [pc, #88]	; (80016a0 <MX_TIM2_Init+0xfc>)
 8001648:	f001 ff4c 	bl	80034e4 <HAL_TIMEx_MasterConfigSynchronization>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001652:	f000 f93f 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001656:	2360      	movs	r3, #96	; 0x60
 8001658:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	2200      	movs	r2, #0
 800166a:	4619      	mov	r1, r3
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <MX_TIM2_Init+0xfc>)
 800166e:	f001 fb0b 	bl	8002c88 <HAL_TIM_PWM_ConfigChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001678:	f000 f92c 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	2204      	movs	r2, #4
 8001680:	4619      	mov	r1, r3
 8001682:	4807      	ldr	r0, [pc, #28]	; (80016a0 <MX_TIM2_Init+0xfc>)
 8001684:	f001 fb00 	bl	8002c88 <HAL_TIM_PWM_ConfigChannel>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800168e:	f000 f921 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <MX_TIM2_Init+0xfc>)
 8001694:	f000 f9b4 	bl	8001a00 <HAL_TIM_MspPostInit>

}
 8001698:	bf00      	nop
 800169a:	3738      	adds	r7, #56	; 0x38
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000320 	.word	0x20000320

080016a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	463b      	mov	r3, r7
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <MX_TIM3_Init+0x94>)
 80016c2:	4a1e      	ldr	r2, [pc, #120]	; (800173c <MX_TIM3_Init+0x98>)
 80016c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <MX_TIM3_Init+0x94>)
 80016c8:	2247      	movs	r2, #71	; 0x47
 80016ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_TIM3_Init+0x94>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016d2:	4b19      	ldr	r3, [pc, #100]	; (8001738 <MX_TIM3_Init+0x94>)
 80016d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016da:	4b17      	ldr	r3, [pc, #92]	; (8001738 <MX_TIM3_Init+0x94>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <MX_TIM3_Init+0x94>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016e6:	4814      	ldr	r0, [pc, #80]	; (8001738 <MX_TIM3_Init+0x94>)
 80016e8:	f001 f93a 	bl	8002960 <HAL_TIM_Base_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80016f2:	f000 f8ef 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	4619      	mov	r1, r3
 8001702:	480d      	ldr	r0, [pc, #52]	; (8001738 <MX_TIM3_Init+0x94>)
 8001704:	f001 fb82 	bl	8002e0c <HAL_TIM_ConfigClockSource>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800170e:	f000 f8e1 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800171a:	463b      	mov	r3, r7
 800171c:	4619      	mov	r1, r3
 800171e:	4806      	ldr	r0, [pc, #24]	; (8001738 <MX_TIM3_Init+0x94>)
 8001720:	f001 fee0 	bl	80034e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800172a:	f000 f8d3 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000368 	.word	0x20000368
 800173c:	40000400 	.word	0x40000400

08001740 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	463b      	mov	r3, r7
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <MX_TIM4_Init+0x94>)
 800175e:	4a1e      	ldr	r2, [pc, #120]	; (80017d8 <MX_TIM4_Init+0x98>)
 8001760:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <MX_TIM4_Init+0x94>)
 8001764:	2247      	movs	r2, #71	; 0x47
 8001766:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <MX_TIM4_Init+0x94>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <MX_TIM4_Init+0x94>)
 8001770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001774:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <MX_TIM4_Init+0x94>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <MX_TIM4_Init+0x94>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001782:	4814      	ldr	r0, [pc, #80]	; (80017d4 <MX_TIM4_Init+0x94>)
 8001784:	f001 f8ec 	bl	8002960 <HAL_TIM_Base_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800178e:	f000 f8a1 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001796:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001798:	f107 0308 	add.w	r3, r7, #8
 800179c:	4619      	mov	r1, r3
 800179e:	480d      	ldr	r0, [pc, #52]	; (80017d4 <MX_TIM4_Init+0x94>)
 80017a0:	f001 fb34 	bl	8002e0c <HAL_TIM_ConfigClockSource>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80017aa:	f000 f893 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017b6:	463b      	mov	r3, r7
 80017b8:	4619      	mov	r1, r3
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <MX_TIM4_Init+0x94>)
 80017bc:	f001 fe92 	bl	80034e4 <HAL_TIMEx_MasterConfigSynchronization>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80017c6:	f000 f885 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200003b0 	.word	0x200003b0
 80017d8:	40000800 	.word	0x40000800

080017dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f0:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <MX_GPIO_Init+0xec>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a34      	ldr	r2, [pc, #208]	; (80018c8 <MX_GPIO_Init+0xec>)
 80017f6:	f043 0320 	orr.w	r3, r3, #32
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <MX_GPIO_Init+0xec>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0320 	and.w	r3, r3, #32
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <MX_GPIO_Init+0xec>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a2e      	ldr	r2, [pc, #184]	; (80018c8 <MX_GPIO_Init+0xec>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <MX_GPIO_Init+0xec>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001820:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <MX_GPIO_Init+0xec>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a28      	ldr	r2, [pc, #160]	; (80018c8 <MX_GPIO_Init+0xec>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <MX_GPIO_Init+0xec>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001838:	2200      	movs	r2, #0
 800183a:	f640 21fc 	movw	r1, #2812	; 0xafc
 800183e:	4823      	ldr	r0, [pc, #140]	; (80018cc <MX_GPIO_Init+0xf0>)
 8001840:	f000 fc97 	bl	8002172 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_3, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	f248 0108 	movw	r1, #32776	; 0x8008
 800184a:	4821      	ldr	r0, [pc, #132]	; (80018d0 <MX_GPIO_Init+0xf4>)
 800184c:	f000 fc91 	bl	8002172 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001850:	f640 23fc 	movw	r3, #2812	; 0xafc
 8001854:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2302      	movs	r3, #2
 8001860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f107 0310 	add.w	r3, r7, #16
 8001866:	4619      	mov	r1, r3
 8001868:	4818      	ldr	r0, [pc, #96]	; (80018cc <MX_GPIO_Init+0xf0>)
 800186a:	f000 fae7 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800186e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	4619      	mov	r1, r3
 8001882:	4813      	ldr	r0, [pc, #76]	; (80018d0 <MX_GPIO_Init+0xf4>)
 8001884:	f000 fada 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3;
 8001888:	f248 0308 	movw	r3, #32776	; 0x8008
 800188c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2302      	movs	r3, #2
 8001898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	4619      	mov	r1, r3
 80018a0:	480b      	ldr	r0, [pc, #44]	; (80018d0 <MX_GPIO_Init+0xf4>)
 80018a2:	f000 facb 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80018a6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80018aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	4619      	mov	r1, r3
 80018ba:	4804      	ldr	r0, [pc, #16]	; (80018cc <MX_GPIO_Init+0xf0>)
 80018bc:	f000 fabe 	bl	8001e3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018c0:	bf00      	nop
 80018c2:	3720      	adds	r7, #32
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010800 	.word	0x40010800
 80018d0:	40010c00 	.word	0x40010c00

080018d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018dc:	e7fe      	b.n	80018dc <Error_Handler+0x8>
	...

080018e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_MspInit+0x68>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	4a17      	ldr	r2, [pc, #92]	; (8001948 <HAL_MspInit+0x68>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6193      	str	r3, [r2, #24]
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_MspInit+0x68>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_MspInit+0x68>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4a11      	ldr	r2, [pc, #68]	; (8001948 <HAL_MspInit+0x68>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	61d3      	str	r3, [r2, #28]
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_MspInit+0x68>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	210f      	movs	r1, #15
 800191a:	f06f 0001 	mvn.w	r0, #1
 800191e:	f000 fa64 	bl	8001dea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_MspInit+0x6c>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_MspInit+0x6c>)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	40010000 	.word	0x40010000

08001950 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001950:	b480      	push	{r7}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a24      	ldr	r2, [pc, #144]	; (80019f0 <HAL_TIM_Base_MspInit+0xa0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d10c      	bne.n	800197c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001962:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <HAL_TIM_Base_MspInit+0xa4>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	4a23      	ldr	r2, [pc, #140]	; (80019f4 <HAL_TIM_Base_MspInit+0xa4>)
 8001968:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800196c:	6193      	str	r3, [r2, #24]
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <HAL_TIM_Base_MspInit+0xa4>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800197a:	e034      	b.n	80019e6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001984:	d10c      	bne.n	80019a0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_TIM_Base_MspInit+0xa4>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a1a      	ldr	r2, [pc, #104]	; (80019f4 <HAL_TIM_Base_MspInit+0xa4>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_TIM_Base_MspInit+0xa4>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
}
 800199e:	e022      	b.n	80019e6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <HAL_TIM_Base_MspInit+0xa8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d10c      	bne.n	80019c4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_TIM_Base_MspInit+0xa4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	4a11      	ldr	r2, [pc, #68]	; (80019f4 <HAL_TIM_Base_MspInit+0xa4>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	61d3      	str	r3, [r2, #28]
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_TIM_Base_MspInit+0xa4>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
}
 80019c2:	e010      	b.n	80019e6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <HAL_TIM_Base_MspInit+0xac>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d10b      	bne.n	80019e6 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_TIM_Base_MspInit+0xa4>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <HAL_TIM_Base_MspInit+0xa4>)
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	61d3      	str	r3, [r2, #28]
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_TIM_Base_MspInit+0xa4>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
}
 80019e6:	bf00      	nop
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	40012c00 	.word	0x40012c00
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40000400 	.word	0x40000400
 80019fc:	40000800 	.word	0x40000800

08001a00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1e:	d117      	bne.n	8001a50 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <HAL_TIM_MspPostInit+0x58>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <HAL_TIM_MspPostInit+0x58>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6193      	str	r3, [r2, #24]
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_TIM_MspPostInit+0x58>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2302      	movs	r3, #2
 8001a42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4804      	ldr	r0, [pc, #16]	; (8001a5c <HAL_TIM_MspPostInit+0x5c>)
 8001a4c:	f000 f9f6 	bl	8001e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a50:	bf00      	nop
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40010800 	.word	0x40010800

08001a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a64:	e7fe      	b.n	8001a64 <NMI_Handler+0x4>

08001a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <MemManage_Handler+0x4>

08001a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8e:	f000 f8b1 	bl	8001bf4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a92:	f003 f855 	bl	8004b40 <xTaskGetSchedulerState>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d001      	beq.n	8001aa0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a9c:	f003 fc04 	bl	80052a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aac:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <_sbrk+0x5c>)
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <_sbrk+0x60>)
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <_sbrk+0x64>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <_sbrk+0x68>)
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d207      	bcs.n	8001ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad4:	f003 fe2c 	bl	8005730 <__errno>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	220c      	movs	r2, #12
 8001adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ae2:	e009      	b.n	8001af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <_sbrk+0x64>)
 8001af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20005000 	.word	0x20005000
 8001b04:	00000400 	.word	0x00000400
 8001b08:	20000454 	.word	0x20000454
 8001b0c:	200012f0 	.word	0x200012f0

08001b10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b1c:	f7ff fff8 	bl	8001b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b20:	480b      	ldr	r0, [pc, #44]	; (8001b50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b22:	490c      	ldr	r1, [pc, #48]	; (8001b54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b24:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a09      	ldr	r2, [pc, #36]	; (8001b5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b38:	4c09      	ldr	r4, [pc, #36]	; (8001b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b46:	f003 fdf9 	bl	800573c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b4a:	f7ff fc65 	bl	8001418 <main>
  bx lr
 8001b4e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b58:	08006140 	.word	0x08006140
  ldr r2, =_sbss
 8001b5c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b60:	200012f0 	.word	0x200012f0

08001b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC1_2_IRQHandler>
	...

08001b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_Init+0x28>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_Init+0x28>)
 8001b72:	f043 0310 	orr.w	r3, r3, #16
 8001b76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f000 f92b 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7e:	200f      	movs	r0, #15
 8001b80:	f000 f808 	bl	8001b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b84:	f7ff feac 	bl	80018e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40022000 	.word	0x40022000

08001b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_InitTick+0x54>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_InitTick+0x58>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f935 	bl	8001e22 <HAL_SYSTICK_Config>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00e      	b.n	8001be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b0f      	cmp	r3, #15
 8001bc6:	d80a      	bhi.n	8001bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bd0:	f000 f90b 	bl	8001dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd4:	4a06      	ldr	r2, [pc, #24]	; (8001bf0 <HAL_InitTick+0x5c>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e000      	b.n	8001be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000008 	.word	0x20000008
 8001bec:	20000010 	.word	0x20000010
 8001bf0:	2000000c 	.word	0x2000000c

08001bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_IncTick+0x1c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_IncTick+0x20>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a03      	ldr	r2, [pc, #12]	; (8001c14 <HAL_IncTick+0x20>)
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	20000010 	.word	0x20000010
 8001c14:	20000458 	.word	0x20000458

08001c18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b02      	ldr	r3, [pc, #8]	; (8001c28 <HAL_GetTick+0x10>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	20000458 	.word	0x20000458

08001c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c34:	f7ff fff0 	bl	8001c18 <HAL_GetTick>
 8001c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c44:	d005      	beq.n	8001c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_Delay+0x44>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4413      	add	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c52:	bf00      	nop
 8001c54:	f7ff ffe0 	bl	8001c18 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d8f7      	bhi.n	8001c54 <HAL_Delay+0x28>
  {
  }
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000010 	.word	0x20000010

08001c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c90:	4013      	ands	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca6:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	60d3      	str	r3, [r2, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	f003 0307 	and.w	r3, r3, #7
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	db0a      	blt.n	8001d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	490c      	ldr	r1, [pc, #48]	; (8001d24 <__NVIC_SetPriority+0x4c>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d00:	e00a      	b.n	8001d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4908      	ldr	r1, [pc, #32]	; (8001d28 <__NVIC_SetPriority+0x50>)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3b04      	subs	r3, #4
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	440b      	add	r3, r1
 8001d16:	761a      	strb	r2, [r3, #24]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000e100 	.word	0xe000e100
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f1c3 0307 	rsb	r3, r3, #7
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	bf28      	it	cs
 8001d4a:	2304      	movcs	r3, #4
 8001d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3304      	adds	r3, #4
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d902      	bls.n	8001d5c <NVIC_EncodePriority+0x30>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3b03      	subs	r3, #3
 8001d5a:	e000      	b.n	8001d5e <NVIC_EncodePriority+0x32>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	401a      	ands	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	4313      	orrs	r3, r2
         );
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001db4:	f7ff ff90 	bl	8001cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff49 	bl	8001c74 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff5e 	bl	8001cbc <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff90 	bl	8001d2c <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5f 	bl	8001cd8 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffb0 	bl	8001d90 <SysTick_Config>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b08b      	sub	sp, #44	; 0x2c
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4e:	e169      	b.n	8002124 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e50:	2201      	movs	r2, #1
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	f040 8158 	bne.w	800211e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4a9a      	ldr	r2, [pc, #616]	; (80020dc <HAL_GPIO_Init+0x2a0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d05e      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e78:	4a98      	ldr	r2, [pc, #608]	; (80020dc <HAL_GPIO_Init+0x2a0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d875      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001e7e:	4a98      	ldr	r2, [pc, #608]	; (80020e0 <HAL_GPIO_Init+0x2a4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d058      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e84:	4a96      	ldr	r2, [pc, #600]	; (80020e0 <HAL_GPIO_Init+0x2a4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d86f      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001e8a:	4a96      	ldr	r2, [pc, #600]	; (80020e4 <HAL_GPIO_Init+0x2a8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d052      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e90:	4a94      	ldr	r2, [pc, #592]	; (80020e4 <HAL_GPIO_Init+0x2a8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d869      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001e96:	4a94      	ldr	r2, [pc, #592]	; (80020e8 <HAL_GPIO_Init+0x2ac>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d04c      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e9c:	4a92      	ldr	r2, [pc, #584]	; (80020e8 <HAL_GPIO_Init+0x2ac>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d863      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001ea2:	4a92      	ldr	r2, [pc, #584]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d046      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001ea8:	4a90      	ldr	r2, [pc, #576]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d85d      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001eae:	2b12      	cmp	r3, #18
 8001eb0:	d82a      	bhi.n	8001f08 <HAL_GPIO_Init+0xcc>
 8001eb2:	2b12      	cmp	r3, #18
 8001eb4:	d859      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001eb6:	a201      	add	r2, pc, #4	; (adr r2, 8001ebc <HAL_GPIO_Init+0x80>)
 8001eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebc:	08001f37 	.word	0x08001f37
 8001ec0:	08001f11 	.word	0x08001f11
 8001ec4:	08001f23 	.word	0x08001f23
 8001ec8:	08001f65 	.word	0x08001f65
 8001ecc:	08001f6b 	.word	0x08001f6b
 8001ed0:	08001f6b 	.word	0x08001f6b
 8001ed4:	08001f6b 	.word	0x08001f6b
 8001ed8:	08001f6b 	.word	0x08001f6b
 8001edc:	08001f6b 	.word	0x08001f6b
 8001ee0:	08001f6b 	.word	0x08001f6b
 8001ee4:	08001f6b 	.word	0x08001f6b
 8001ee8:	08001f6b 	.word	0x08001f6b
 8001eec:	08001f6b 	.word	0x08001f6b
 8001ef0:	08001f6b 	.word	0x08001f6b
 8001ef4:	08001f6b 	.word	0x08001f6b
 8001ef8:	08001f6b 	.word	0x08001f6b
 8001efc:	08001f6b 	.word	0x08001f6b
 8001f00:	08001f19 	.word	0x08001f19
 8001f04:	08001f2d 	.word	0x08001f2d
 8001f08:	4a79      	ldr	r2, [pc, #484]	; (80020f0 <HAL_GPIO_Init+0x2b4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f0e:	e02c      	b.n	8001f6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	623b      	str	r3, [r7, #32]
          break;
 8001f16:	e029      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	623b      	str	r3, [r7, #32]
          break;
 8001f20:	e024      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	3308      	adds	r3, #8
 8001f28:	623b      	str	r3, [r7, #32]
          break;
 8001f2a:	e01f      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	330c      	adds	r3, #12
 8001f32:	623b      	str	r3, [r7, #32]
          break;
 8001f34:	e01a      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f3e:	2304      	movs	r3, #4
 8001f40:	623b      	str	r3, [r7, #32]
          break;
 8001f42:	e013      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d105      	bne.n	8001f58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f4c:	2308      	movs	r3, #8
 8001f4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	611a      	str	r2, [r3, #16]
          break;
 8001f56:	e009      	b.n	8001f6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	615a      	str	r2, [r3, #20]
          break;
 8001f62:	e003      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
          break;
 8001f68:	e000      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          break;
 8001f6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2bff      	cmp	r3, #255	; 0xff
 8001f70:	d801      	bhi.n	8001f76 <HAL_GPIO_Init+0x13a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	e001      	b.n	8001f7a <HAL_GPIO_Init+0x13e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	2bff      	cmp	r3, #255	; 0xff
 8001f80:	d802      	bhi.n	8001f88 <HAL_GPIO_Init+0x14c>
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	e002      	b.n	8001f8e <HAL_GPIO_Init+0x152>
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	3b08      	subs	r3, #8
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	210f      	movs	r1, #15
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	6a39      	ldr	r1, [r7, #32]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80b1 	beq.w	800211e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fbc:	4b4d      	ldr	r3, [pc, #308]	; (80020f4 <HAL_GPIO_Init+0x2b8>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a4c      	ldr	r2, [pc, #304]	; (80020f4 <HAL_GPIO_Init+0x2b8>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b4a      	ldr	r3, [pc, #296]	; (80020f4 <HAL_GPIO_Init+0x2b8>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fd4:	4a48      	ldr	r2, [pc, #288]	; (80020f8 <HAL_GPIO_Init+0x2bc>)
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	3302      	adds	r3, #2
 8001fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	220f      	movs	r2, #15
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a40      	ldr	r2, [pc, #256]	; (80020fc <HAL_GPIO_Init+0x2c0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d013      	beq.n	8002028 <HAL_GPIO_Init+0x1ec>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a3f      	ldr	r2, [pc, #252]	; (8002100 <HAL_GPIO_Init+0x2c4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00d      	beq.n	8002024 <HAL_GPIO_Init+0x1e8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a3e      	ldr	r2, [pc, #248]	; (8002104 <HAL_GPIO_Init+0x2c8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d007      	beq.n	8002020 <HAL_GPIO_Init+0x1e4>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a3d      	ldr	r2, [pc, #244]	; (8002108 <HAL_GPIO_Init+0x2cc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_GPIO_Init+0x1e0>
 8002018:	2303      	movs	r3, #3
 800201a:	e006      	b.n	800202a <HAL_GPIO_Init+0x1ee>
 800201c:	2304      	movs	r3, #4
 800201e:	e004      	b.n	800202a <HAL_GPIO_Init+0x1ee>
 8002020:	2302      	movs	r3, #2
 8002022:	e002      	b.n	800202a <HAL_GPIO_Init+0x1ee>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <HAL_GPIO_Init+0x1ee>
 8002028:	2300      	movs	r3, #0
 800202a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202c:	f002 0203 	and.w	r2, r2, #3
 8002030:	0092      	lsls	r2, r2, #2
 8002032:	4093      	lsls	r3, r2
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800203a:	492f      	ldr	r1, [pc, #188]	; (80020f8 <HAL_GPIO_Init+0x2bc>)
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002054:	4b2d      	ldr	r3, [pc, #180]	; (800210c <HAL_GPIO_Init+0x2d0>)
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	492c      	ldr	r1, [pc, #176]	; (800210c <HAL_GPIO_Init+0x2d0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002062:	4b2a      	ldr	r3, [pc, #168]	; (800210c <HAL_GPIO_Init+0x2d0>)
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	43db      	mvns	r3, r3
 800206a:	4928      	ldr	r1, [pc, #160]	; (800210c <HAL_GPIO_Init+0x2d0>)
 800206c:	4013      	ands	r3, r2
 800206e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800207c:	4b23      	ldr	r3, [pc, #140]	; (800210c <HAL_GPIO_Init+0x2d0>)
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	4922      	ldr	r1, [pc, #136]	; (800210c <HAL_GPIO_Init+0x2d0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	60cb      	str	r3, [r1, #12]
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800208a:	4b20      	ldr	r3, [pc, #128]	; (800210c <HAL_GPIO_Init+0x2d0>)
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	43db      	mvns	r3, r3
 8002092:	491e      	ldr	r1, [pc, #120]	; (800210c <HAL_GPIO_Init+0x2d0>)
 8002094:	4013      	ands	r3, r2
 8002096:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_GPIO_Init+0x2d0>)
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4918      	ldr	r1, [pc, #96]	; (800210c <HAL_GPIO_Init+0x2d0>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020b2:	4b16      	ldr	r3, [pc, #88]	; (800210c <HAL_GPIO_Init+0x2d0>)
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	4914      	ldr	r1, [pc, #80]	; (800210c <HAL_GPIO_Init+0x2d0>)
 80020bc:	4013      	ands	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d021      	beq.n	8002110 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <HAL_GPIO_Init+0x2d0>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	490e      	ldr	r1, [pc, #56]	; (800210c <HAL_GPIO_Init+0x2d0>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
 80020d8:	e021      	b.n	800211e <HAL_GPIO_Init+0x2e2>
 80020da:	bf00      	nop
 80020dc:	10320000 	.word	0x10320000
 80020e0:	10310000 	.word	0x10310000
 80020e4:	10220000 	.word	0x10220000
 80020e8:	10210000 	.word	0x10210000
 80020ec:	10120000 	.word	0x10120000
 80020f0:	10110000 	.word	0x10110000
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010000 	.word	0x40010000
 80020fc:	40010800 	.word	0x40010800
 8002100:	40010c00 	.word	0x40010c00
 8002104:	40011000 	.word	0x40011000
 8002108:	40011400 	.word	0x40011400
 800210c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_GPIO_Init+0x304>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	43db      	mvns	r3, r3
 8002118:	4909      	ldr	r1, [pc, #36]	; (8002140 <HAL_GPIO_Init+0x304>)
 800211a:	4013      	ands	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	3301      	adds	r3, #1
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	fa22 f303 	lsr.w	r3, r2, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	f47f ae8e 	bne.w	8001e50 <HAL_GPIO_Init+0x14>
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	372c      	adds	r7, #44	; 0x2c
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	40010400 	.word	0x40010400

08002144 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	887b      	ldrh	r3, [r7, #2]
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	e001      	b.n	8002166 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002162:	2300      	movs	r3, #0
 8002164:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002166:	7bfb      	ldrb	r3, [r7, #15]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	460b      	mov	r3, r1
 800217c:	807b      	strh	r3, [r7, #2]
 800217e:	4613      	mov	r3, r2
 8002180:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002182:	787b      	ldrb	r3, [r7, #1]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002188:	887a      	ldrh	r2, [r7, #2]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800218e:	e003      	b.n	8002198 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002190:	887b      	ldrh	r3, [r7, #2]
 8002192:	041a      	lsls	r2, r3, #16
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	611a      	str	r2, [r3, #16]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
	...

080021a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e272      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8087 	beq.w	80022d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c4:	4b92      	ldr	r3, [pc, #584]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d00c      	beq.n	80021ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021d0:	4b8f      	ldr	r3, [pc, #572]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d112      	bne.n	8002202 <HAL_RCC_OscConfig+0x5e>
 80021dc:	4b8c      	ldr	r3, [pc, #560]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e8:	d10b      	bne.n	8002202 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ea:	4b89      	ldr	r3, [pc, #548]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d06c      	beq.n	80022d0 <HAL_RCC_OscConfig+0x12c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d168      	bne.n	80022d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e24c      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x76>
 800220c:	4b80      	ldr	r3, [pc, #512]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a7f      	ldr	r2, [pc, #508]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	e02e      	b.n	8002278 <HAL_RCC_OscConfig+0xd4>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x98>
 8002222:	4b7b      	ldr	r3, [pc, #492]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a7a      	ldr	r2, [pc, #488]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b78      	ldr	r3, [pc, #480]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a77      	ldr	r2, [pc, #476]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e01d      	b.n	8002278 <HAL_RCC_OscConfig+0xd4>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0xbc>
 8002246:	4b72      	ldr	r3, [pc, #456]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a71      	ldr	r2, [pc, #452]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 800224c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b6f      	ldr	r3, [pc, #444]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a6e      	ldr	r2, [pc, #440]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0xd4>
 8002260:	4b6b      	ldr	r3, [pc, #428]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a6a      	ldr	r2, [pc, #424]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b68      	ldr	r3, [pc, #416]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a67      	ldr	r2, [pc, #412]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002276:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d013      	beq.n	80022a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7ff fcca 	bl	8001c18 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002288:	f7ff fcc6 	bl	8001c18 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	; 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e200      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	4b5d      	ldr	r3, [pc, #372]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0xe4>
 80022a6:	e014      	b.n	80022d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff fcb6 	bl	8001c18 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7ff fcb2 	bl	8001c18 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e1ec      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	4b53      	ldr	r3, [pc, #332]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x10c>
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d063      	beq.n	80023a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022de:	4b4c      	ldr	r3, [pc, #304]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00b      	beq.n	8002302 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ea:	4b49      	ldr	r3, [pc, #292]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d11c      	bne.n	8002330 <HAL_RCC_OscConfig+0x18c>
 80022f6:	4b46      	ldr	r3, [pc, #280]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d116      	bne.n	8002330 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002302:	4b43      	ldr	r3, [pc, #268]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <HAL_RCC_OscConfig+0x176>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d001      	beq.n	800231a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e1c0      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231a:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4939      	ldr	r1, [pc, #228]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232e:	e03a      	b.n	80023a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d020      	beq.n	800237a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002338:	4b36      	ldr	r3, [pc, #216]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7ff fc6b 	bl	8001c18 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002346:	f7ff fc67 	bl	8001c18 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e1a1      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002364:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4927      	ldr	r1, [pc, #156]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002374:	4313      	orrs	r3, r2
 8002376:	600b      	str	r3, [r1, #0]
 8002378:	e015      	b.n	80023a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800237a:	4b26      	ldr	r3, [pc, #152]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7ff fc4a 	bl	8001c18 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002388:	f7ff fc46 	bl	8001c18 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e180      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d03a      	beq.n	8002428 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d019      	beq.n	80023ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ba:	4b17      	ldr	r3, [pc, #92]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 80023bc:	2201      	movs	r2, #1
 80023be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c0:	f7ff fc2a 	bl	8001c18 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c8:	f7ff fc26 	bl	8001c18 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e160      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023e6:	2001      	movs	r0, #1
 80023e8:	f000 fa9c 	bl	8002924 <RCC_Delay>
 80023ec:	e01c      	b.n	8002428 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f4:	f7ff fc10 	bl	8001c18 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fa:	e00f      	b.n	800241c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fc:	f7ff fc0c 	bl	8001c18 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d908      	bls.n	800241c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e146      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	42420000 	.word	0x42420000
 8002418:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241c:	4b92      	ldr	r3, [pc, #584]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1e9      	bne.n	80023fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80a6 	beq.w	8002582 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243a:	4b8b      	ldr	r3, [pc, #556]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10d      	bne.n	8002462 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002446:	4b88      	ldr	r3, [pc, #544]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4a87      	ldr	r2, [pc, #540]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002450:	61d3      	str	r3, [r2, #28]
 8002452:	4b85      	ldr	r3, [pc, #532]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245e:	2301      	movs	r3, #1
 8002460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002462:	4b82      	ldr	r3, [pc, #520]	; (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d118      	bne.n	80024a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246e:	4b7f      	ldr	r3, [pc, #508]	; (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a7e      	ldr	r2, [pc, #504]	; (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247a:	f7ff fbcd 	bl	8001c18 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002482:	f7ff fbc9 	bl	8001c18 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b64      	cmp	r3, #100	; 0x64
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e103      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	4b75      	ldr	r3, [pc, #468]	; (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x312>
 80024a8:	4b6f      	ldr	r3, [pc, #444]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4a6e      	ldr	r2, [pc, #440]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6213      	str	r3, [r2, #32]
 80024b4:	e02d      	b.n	8002512 <HAL_RCC_OscConfig+0x36e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x334>
 80024be:	4b6a      	ldr	r3, [pc, #424]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4a69      	ldr	r2, [pc, #420]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	6213      	str	r3, [r2, #32]
 80024ca:	4b67      	ldr	r3, [pc, #412]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	4a66      	ldr	r2, [pc, #408]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	f023 0304 	bic.w	r3, r3, #4
 80024d4:	6213      	str	r3, [r2, #32]
 80024d6:	e01c      	b.n	8002512 <HAL_RCC_OscConfig+0x36e>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	2b05      	cmp	r3, #5
 80024de:	d10c      	bne.n	80024fa <HAL_RCC_OscConfig+0x356>
 80024e0:	4b61      	ldr	r3, [pc, #388]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4a60      	ldr	r2, [pc, #384]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	6213      	str	r3, [r2, #32]
 80024ec:	4b5e      	ldr	r3, [pc, #376]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4a5d      	ldr	r2, [pc, #372]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6213      	str	r3, [r2, #32]
 80024f8:	e00b      	b.n	8002512 <HAL_RCC_OscConfig+0x36e>
 80024fa:	4b5b      	ldr	r3, [pc, #364]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4a5a      	ldr	r2, [pc, #360]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	f023 0301 	bic.w	r3, r3, #1
 8002504:	6213      	str	r3, [r2, #32]
 8002506:	4b58      	ldr	r3, [pc, #352]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4a57      	ldr	r2, [pc, #348]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	f023 0304 	bic.w	r3, r3, #4
 8002510:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d015      	beq.n	8002546 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7ff fb7d 	bl	8001c18 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7ff fb79 	bl	8001c18 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e0b1      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0ee      	beq.n	8002522 <HAL_RCC_OscConfig+0x37e>
 8002544:	e014      	b.n	8002570 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002546:	f7ff fb67 	bl	8001c18 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7ff fb63 	bl	8001c18 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	; 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e09b      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	4b40      	ldr	r3, [pc, #256]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1ee      	bne.n	800254e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002570:	7dfb      	ldrb	r3, [r7, #23]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d105      	bne.n	8002582 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002576:	4b3c      	ldr	r3, [pc, #240]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4a3b      	ldr	r2, [pc, #236]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002580:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8087 	beq.w	800269a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800258c:	4b36      	ldr	r3, [pc, #216]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d061      	beq.n	800265c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d146      	bne.n	800262e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a0:	4b33      	ldr	r3, [pc, #204]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7ff fb37 	bl	8001c18 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ae:	f7ff fb33 	bl	8001c18 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e06d      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c0:	4b29      	ldr	r3, [pc, #164]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d4:	d108      	bne.n	80025e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025d6:	4b24      	ldr	r3, [pc, #144]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	4921      	ldr	r1, [pc, #132]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e8:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a19      	ldr	r1, [r3, #32]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	430b      	orrs	r3, r1
 80025fa:	491b      	ldr	r1, [pc, #108]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002600:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7ff fb07 	bl	8001c18 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260e:	f7ff fb03 	bl	8001c18 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e03d      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x46a>
 800262c:	e035      	b.n	800269a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7ff faf0 	bl	8001c18 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263c:	f7ff faec 	bl	8001c18 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e026      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x498>
 800265a:	e01e      	b.n	800269a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d107      	bne.n	8002674 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e019      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
 8002668:	40021000 	.word	0x40021000
 800266c:	40007000 	.word	0x40007000
 8002670:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_RCC_OscConfig+0x500>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	429a      	cmp	r2, r3
 8002686:	d106      	bne.n	8002696 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d001      	beq.n	800269a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000

080026a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0d0      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026bc:	4b6a      	ldr	r3, [pc, #424]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d910      	bls.n	80026ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b67      	ldr	r3, [pc, #412]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 0207 	bic.w	r2, r3, #7
 80026d2:	4965      	ldr	r1, [pc, #404]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b63      	ldr	r3, [pc, #396]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0b8      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d020      	beq.n	800273a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002704:	4b59      	ldr	r3, [pc, #356]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a58      	ldr	r2, [pc, #352]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800270e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800271c:	4b53      	ldr	r3, [pc, #332]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a52      	ldr	r2, [pc, #328]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002726:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002728:	4b50      	ldr	r3, [pc, #320]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	494d      	ldr	r1, [pc, #308]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d040      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b47      	ldr	r3, [pc, #284]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d115      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e07f      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002766:	4b41      	ldr	r3, [pc, #260]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e073      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002776:	4b3d      	ldr	r3, [pc, #244]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e06b      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002786:	4b39      	ldr	r3, [pc, #228]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f023 0203 	bic.w	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4936      	ldr	r1, [pc, #216]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002798:	f7ff fa3e 	bl	8001c18 <HAL_GetTick>
 800279c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a0:	f7ff fa3a 	bl	8001c18 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e053      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	4b2d      	ldr	r3, [pc, #180]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 020c 	and.w	r2, r3, #12
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d1eb      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c8:	4b27      	ldr	r3, [pc, #156]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d210      	bcs.n	80027f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b24      	ldr	r3, [pc, #144]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 0207 	bic.w	r2, r3, #7
 80027de:	4922      	ldr	r1, [pc, #136]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e032      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4916      	ldr	r1, [pc, #88]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	490e      	ldr	r1, [pc, #56]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002836:	f000 f821 	bl	800287c <HAL_RCC_GetSysClockFreq>
 800283a:	4602      	mov	r2, r0
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	490a      	ldr	r1, [pc, #40]	; (8002870 <HAL_RCC_ClockConfig+0x1c8>)
 8002848:	5ccb      	ldrb	r3, [r1, r3]
 800284a:	fa22 f303 	lsr.w	r3, r2, r3
 800284e:	4a09      	ldr	r2, [pc, #36]	; (8002874 <HAL_RCC_ClockConfig+0x1cc>)
 8002850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_RCC_ClockConfig+0x1d0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f99c 	bl	8001b94 <HAL_InitTick>

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40022000 	.word	0x40022000
 800286c:	40021000 	.word	0x40021000
 8002870:	080060e0 	.word	0x080060e0
 8002874:	20000008 	.word	0x20000008
 8002878:	2000000c 	.word	0x2000000c

0800287c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002896:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <HAL_RCC_GetSysClockFreq+0x94>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d002      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x30>
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d003      	beq.n	80028b2 <HAL_RCC_GetSysClockFreq+0x36>
 80028aa:	e027      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028ac:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ae:	613b      	str	r3, [r7, #16]
      break;
 80028b0:	e027      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	0c9b      	lsrs	r3, r3, #18
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	4a17      	ldr	r2, [pc, #92]	; (8002918 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028bc:	5cd3      	ldrb	r3, [r2, r3]
 80028be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d010      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <HAL_RCC_GetSysClockFreq+0x94>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	0c5b      	lsrs	r3, r3, #17
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	4a11      	ldr	r2, [pc, #68]	; (800291c <HAL_RCC_GetSysClockFreq+0xa0>)
 80028d6:	5cd3      	ldrb	r3, [r2, r3]
 80028d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <HAL_RCC_GetSysClockFreq+0x98>)
 80028de:	fb03 f202 	mul.w	r2, r3, r2
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	e004      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a0c      	ldr	r2, [pc, #48]	; (8002920 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028f0:	fb02 f303 	mul.w	r3, r2, r3
 80028f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	613b      	str	r3, [r7, #16]
      break;
 80028fa:	e002      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_RCC_GetSysClockFreq+0x98>)
 80028fe:	613b      	str	r3, [r7, #16]
      break;
 8002900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002902:	693b      	ldr	r3, [r7, #16]
}
 8002904:	4618      	mov	r0, r3
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000
 8002914:	007a1200 	.word	0x007a1200
 8002918:	080060f0 	.word	0x080060f0
 800291c:	08006100 	.word	0x08006100
 8002920:	003d0900 	.word	0x003d0900

08002924 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <RCC_Delay+0x34>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0a      	ldr	r2, [pc, #40]	; (800295c <RCC_Delay+0x38>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0a5b      	lsrs	r3, r3, #9
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002940:	bf00      	nop
  }
  while (Delay --);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1e5a      	subs	r2, r3, #1
 8002946:	60fa      	str	r2, [r7, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1f9      	bne.n	8002940 <RCC_Delay+0x1c>
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	20000008 	.word	0x20000008
 800295c:	10624dd3 	.word	0x10624dd3

08002960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e041      	b.n	80029f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe ffe2 	bl	8001950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3304      	adds	r3, #4
 800299c:	4619      	mov	r1, r3
 800299e:	4610      	mov	r0, r2
 80029a0:	f000 fafc 	bl	8002f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d001      	beq.n	8002a18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e032      	b.n	8002a7e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a18      	ldr	r2, [pc, #96]	; (8002a88 <HAL_TIM_Base_Start+0x88>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00e      	beq.n	8002a48 <HAL_TIM_Base_Start+0x48>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a32:	d009      	beq.n	8002a48 <HAL_TIM_Base_Start+0x48>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <HAL_TIM_Base_Start+0x8c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d004      	beq.n	8002a48 <HAL_TIM_Base_Start+0x48>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a13      	ldr	r2, [pc, #76]	; (8002a90 <HAL_TIM_Base_Start+0x90>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d111      	bne.n	8002a6c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d010      	beq.n	8002a7c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0201 	orr.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6a:	e007      	b.n	8002a7c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	40012c00 	.word	0x40012c00
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	40000800 	.word	0x40000800

08002a94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e041      	b.n	8002b2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f839 	bl	8002b32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	f000 fa62 	bl	8002f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d109      	bne.n	8002b68 <HAL_TIM_PWM_Start+0x24>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	bf14      	ite	ne
 8002b60:	2301      	movne	r3, #1
 8002b62:	2300      	moveq	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e022      	b.n	8002bae <HAL_TIM_PWM_Start+0x6a>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d109      	bne.n	8002b82 <HAL_TIM_PWM_Start+0x3e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	bf14      	ite	ne
 8002b7a:	2301      	movne	r3, #1
 8002b7c:	2300      	moveq	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	e015      	b.n	8002bae <HAL_TIM_PWM_Start+0x6a>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d109      	bne.n	8002b9c <HAL_TIM_PWM_Start+0x58>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	bf14      	ite	ne
 8002b94:	2301      	movne	r3, #1
 8002b96:	2300      	moveq	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	e008      	b.n	8002bae <HAL_TIM_PWM_Start+0x6a>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	bf14      	ite	ne
 8002ba8:	2301      	movne	r3, #1
 8002baa:	2300      	moveq	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e05e      	b.n	8002c74 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d104      	bne.n	8002bc6 <HAL_TIM_PWM_Start+0x82>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc4:	e013      	b.n	8002bee <HAL_TIM_PWM_Start+0xaa>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d104      	bne.n	8002bd6 <HAL_TIM_PWM_Start+0x92>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd4:	e00b      	b.n	8002bee <HAL_TIM_PWM_Start+0xaa>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d104      	bne.n	8002be6 <HAL_TIM_PWM_Start+0xa2>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002be4:	e003      	b.n	8002bee <HAL_TIM_PWM_Start+0xaa>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2202      	movs	r2, #2
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	6839      	ldr	r1, [r7, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fc50 	bl	800349c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1e      	ldr	r2, [pc, #120]	; (8002c7c <HAL_TIM_PWM_Start+0x138>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d107      	bne.n	8002c16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a18      	ldr	r2, [pc, #96]	; (8002c7c <HAL_TIM_PWM_Start+0x138>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00e      	beq.n	8002c3e <HAL_TIM_PWM_Start+0xfa>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c28:	d009      	beq.n	8002c3e <HAL_TIM_PWM_Start+0xfa>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <HAL_TIM_PWM_Start+0x13c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d004      	beq.n	8002c3e <HAL_TIM_PWM_Start+0xfa>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a12      	ldr	r2, [pc, #72]	; (8002c84 <HAL_TIM_PWM_Start+0x140>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d111      	bne.n	8002c62 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b06      	cmp	r3, #6
 8002c4e:	d010      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c60:	e007      	b.n	8002c72 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0201 	orr.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40012c00 	.word	0x40012c00
 8002c80:	40000400 	.word	0x40000400
 8002c84:	40000800 	.word	0x40000800

08002c88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e0ae      	b.n	8002e04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b0c      	cmp	r3, #12
 8002cb2:	f200 809f 	bhi.w	8002df4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002cf1 	.word	0x08002cf1
 8002cc0:	08002df5 	.word	0x08002df5
 8002cc4:	08002df5 	.word	0x08002df5
 8002cc8:	08002df5 	.word	0x08002df5
 8002ccc:	08002d31 	.word	0x08002d31
 8002cd0:	08002df5 	.word	0x08002df5
 8002cd4:	08002df5 	.word	0x08002df5
 8002cd8:	08002df5 	.word	0x08002df5
 8002cdc:	08002d73 	.word	0x08002d73
 8002ce0:	08002df5 	.word	0x08002df5
 8002ce4:	08002df5 	.word	0x08002df5
 8002ce8:	08002df5 	.word	0x08002df5
 8002cec:	08002db3 	.word	0x08002db3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 f9b2 	bl	8003060 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0208 	orr.w	r2, r2, #8
 8002d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0204 	bic.w	r2, r2, #4
 8002d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6999      	ldr	r1, [r3, #24]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	691a      	ldr	r2, [r3, #16]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	619a      	str	r2, [r3, #24]
      break;
 8002d2e:	e064      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68b9      	ldr	r1, [r7, #8]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 f9f8 	bl	800312c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6999      	ldr	r1, [r3, #24]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	021a      	lsls	r2, r3, #8
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	619a      	str	r2, [r3, #24]
      break;
 8002d70:	e043      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68b9      	ldr	r1, [r7, #8]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fa41 	bl	8003200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0208 	orr.w	r2, r2, #8
 8002d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0204 	bic.w	r2, r2, #4
 8002d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69d9      	ldr	r1, [r3, #28]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	61da      	str	r2, [r3, #28]
      break;
 8002db0:	e023      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 fa8b 	bl	80032d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69da      	ldr	r2, [r3, #28]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69da      	ldr	r2, [r3, #28]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69d9      	ldr	r1, [r3, #28]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	021a      	lsls	r2, r3, #8
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	61da      	str	r2, [r3, #28]
      break;
 8002df2:	e002      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	75fb      	strb	r3, [r7, #23]
      break;
 8002df8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_TIM_ConfigClockSource+0x1c>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e0b4      	b.n	8002f92 <HAL_TIM_ConfigClockSource+0x186>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e60:	d03e      	beq.n	8002ee0 <HAL_TIM_ConfigClockSource+0xd4>
 8002e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e66:	f200 8087 	bhi.w	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6e:	f000 8086 	beq.w	8002f7e <HAL_TIM_ConfigClockSource+0x172>
 8002e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e76:	d87f      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e78:	2b70      	cmp	r3, #112	; 0x70
 8002e7a:	d01a      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0xa6>
 8002e7c:	2b70      	cmp	r3, #112	; 0x70
 8002e7e:	d87b      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e80:	2b60      	cmp	r3, #96	; 0x60
 8002e82:	d050      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x11a>
 8002e84:	2b60      	cmp	r3, #96	; 0x60
 8002e86:	d877      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e88:	2b50      	cmp	r3, #80	; 0x50
 8002e8a:	d03c      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0xfa>
 8002e8c:	2b50      	cmp	r3, #80	; 0x50
 8002e8e:	d873      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e90:	2b40      	cmp	r3, #64	; 0x40
 8002e92:	d058      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x13a>
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	d86f      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e98:	2b30      	cmp	r3, #48	; 0x30
 8002e9a:	d064      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002e9c:	2b30      	cmp	r3, #48	; 0x30
 8002e9e:	d86b      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d060      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d867      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d05c      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d05a      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002eb0:	e062      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ec2:	f000 facc 	bl	800345e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ed4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	609a      	str	r2, [r3, #8]
      break;
 8002ede:	e04f      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ef0:	f000 fab5 	bl	800345e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f02:	609a      	str	r2, [r3, #8]
      break;
 8002f04:	e03c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f12:	461a      	mov	r2, r3
 8002f14:	f000 fa2c 	bl	8003370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2150      	movs	r1, #80	; 0x50
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fa83 	bl	800342a <TIM_ITRx_SetConfig>
      break;
 8002f24:	e02c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f32:	461a      	mov	r2, r3
 8002f34:	f000 fa4a 	bl	80033cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2160      	movs	r1, #96	; 0x60
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fa73 	bl	800342a <TIM_ITRx_SetConfig>
      break;
 8002f44:	e01c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f52:	461a      	mov	r2, r3
 8002f54:	f000 fa0c 	bl	8003370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2140      	movs	r1, #64	; 0x40
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fa63 	bl	800342a <TIM_ITRx_SetConfig>
      break;
 8002f64:	e00c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4610      	mov	r0, r2
 8002f72:	f000 fa5a 	bl	800342a <TIM_ITRx_SetConfig>
      break;
 8002f76:	e003      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7c:	e000      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a29      	ldr	r2, [pc, #164]	; (8003054 <TIM_Base_SetConfig+0xb8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00b      	beq.n	8002fcc <TIM_Base_SetConfig+0x30>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fba:	d007      	beq.n	8002fcc <TIM_Base_SetConfig+0x30>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a26      	ldr	r2, [pc, #152]	; (8003058 <TIM_Base_SetConfig+0xbc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <TIM_Base_SetConfig+0x30>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a25      	ldr	r2, [pc, #148]	; (800305c <TIM_Base_SetConfig+0xc0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d108      	bne.n	8002fde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a1c      	ldr	r2, [pc, #112]	; (8003054 <TIM_Base_SetConfig+0xb8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d00b      	beq.n	8002ffe <TIM_Base_SetConfig+0x62>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fec:	d007      	beq.n	8002ffe <TIM_Base_SetConfig+0x62>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a19      	ldr	r2, [pc, #100]	; (8003058 <TIM_Base_SetConfig+0xbc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d003      	beq.n	8002ffe <TIM_Base_SetConfig+0x62>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a18      	ldr	r2, [pc, #96]	; (800305c <TIM_Base_SetConfig+0xc0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d108      	bne.n	8003010 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4313      	orrs	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a07      	ldr	r2, [pc, #28]	; (8003054 <TIM_Base_SetConfig+0xb8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d103      	bne.n	8003044 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	615a      	str	r2, [r3, #20]
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	40012c00 	.word	0x40012c00
 8003058:	40000400 	.word	0x40000400
 800305c:	40000800 	.word	0x40000800

08003060 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f023 0201 	bic.w	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f023 0302 	bic.w	r3, r3, #2
 80030a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a1c      	ldr	r2, [pc, #112]	; (8003128 <TIM_OC1_SetConfig+0xc8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d10c      	bne.n	80030d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f023 0308 	bic.w	r3, r3, #8
 80030c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f023 0304 	bic.w	r3, r3, #4
 80030d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a13      	ldr	r2, [pc, #76]	; (8003128 <TIM_OC1_SetConfig+0xc8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d111      	bne.n	8003102 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	621a      	str	r2, [r3, #32]
}
 800311c:	bf00      	nop
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40012c00 	.word	0x40012c00

0800312c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f023 0210 	bic.w	r2, r3, #16
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800315a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f023 0320 	bic.w	r3, r3, #32
 8003176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <TIM_OC2_SetConfig+0xd0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d10d      	bne.n	80031a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a14      	ldr	r2, [pc, #80]	; (80031fc <TIM_OC2_SetConfig+0xd0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d113      	bne.n	80031d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	621a      	str	r2, [r3, #32]
}
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr
 80031fc:	40012c00 	.word	0x40012c00

08003200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0303 	bic.w	r3, r3, #3
 8003236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a1d      	ldr	r2, [pc, #116]	; (80032d0 <TIM_OC3_SetConfig+0xd0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d10d      	bne.n	800327a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	021b      	lsls	r3, r3, #8
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <TIM_OC3_SetConfig+0xd0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d113      	bne.n	80032aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	621a      	str	r2, [r3, #32]
}
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40012c00 	.word	0x40012c00

080032d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800330a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800331e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	031b      	lsls	r3, r3, #12
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a0f      	ldr	r2, [pc, #60]	; (800336c <TIM_OC4_SetConfig+0x98>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d109      	bne.n	8003348 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800333a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	019b      	lsls	r3, r3, #6
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	621a      	str	r2, [r3, #32]
}
 8003362:	bf00      	nop
 8003364:	371c      	adds	r7, #28
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	40012c00 	.word	0x40012c00

08003370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f023 0201 	bic.w	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800339a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f023 030a 	bic.w	r3, r3, #10
 80033ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	621a      	str	r2, [r3, #32]
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f023 0210 	bic.w	r2, r3, #16
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	031b      	lsls	r3, r3, #12
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003408:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	621a      	str	r2, [r3, #32]
}
 8003420:	bf00      	nop
 8003422:	371c      	adds	r7, #28
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800342a:	b480      	push	{r7}
 800342c:	b085      	sub	sp, #20
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	f043 0307 	orr.w	r3, r3, #7
 800344c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	609a      	str	r2, [r3, #8]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr

0800345e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800345e:	b480      	push	{r7}
 8003460:	b087      	sub	sp, #28
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003478:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	021a      	lsls	r2, r3, #8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	431a      	orrs	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4313      	orrs	r3, r2
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	609a      	str	r2, [r3, #8]
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	2201      	movs	r2, #1
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a1a      	ldr	r2, [r3, #32]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	43db      	mvns	r3, r3
 80034be:	401a      	ands	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a1a      	ldr	r2, [r3, #32]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	431a      	orrs	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e046      	b.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a16      	ldr	r2, [pc, #88]	; (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00e      	beq.n	800355e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003548:	d009      	beq.n	800355e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a12      	ldr	r2, [pc, #72]	; (8003598 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d004      	beq.n	800355e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a10      	ldr	r2, [pc, #64]	; (800359c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d10c      	bne.n	8003578 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	4313      	orrs	r3, r2
 800356e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr
 8003594:	40012c00 	.word	0x40012c00
 8003598:	40000400 	.word	0x40000400
 800359c:	40000800 	.word	0x40000800

080035a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f103 0208 	add.w	r2, r3, #8
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f103 0208 	add.w	r2, r3, #8
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f103 0208 	add.w	r2, r3, #8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr

080035de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr

080035f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035f6:	b480      	push	{r7}
 80035f8:	b085      	sub	sp, #20
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	601a      	str	r2, [r3, #0]
}
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003652:	d103      	bne.n	800365c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	e00c      	b.n	8003676 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3308      	adds	r3, #8
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	e002      	b.n	800366a <vListInsert+0x2e>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	429a      	cmp	r2, r3
 8003674:	d2f6      	bcs.n	8003664 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	601a      	str	r2, [r3, #0]
}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr

080036ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6892      	ldr	r2, [r2, #8]
 80036c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6852      	ldr	r2, [r2, #4]
 80036cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d103      	bne.n	80036e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	1e5a      	subs	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr
	...

08003700 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10a      	bne.n	800372a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003726:	bf00      	nop
 8003728:	e7fe      	b.n	8003728 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800372a:	f001 fd3f 	bl	80051ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003736:	68f9      	ldr	r1, [r7, #12]
 8003738:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	441a      	add	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375a:	3b01      	subs	r3, #1
 800375c:	68f9      	ldr	r1, [r7, #12]
 800375e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	441a      	add	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	22ff      	movs	r2, #255	; 0xff
 800376e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	22ff      	movs	r2, #255	; 0xff
 8003776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d114      	bne.n	80037aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01a      	beq.n	80037be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	3310      	adds	r3, #16
 800378c:	4618      	mov	r0, r3
 800378e:	f001 f817 	bl	80047c0 <xTaskRemoveFromEventList>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d012      	beq.n	80037be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <xQueueGenericReset+0xcc>)
 800379a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	e009      	b.n	80037be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	3310      	adds	r3, #16
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff fef6 	bl	80035a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3324      	adds	r3, #36	; 0x24
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff fef1 	bl	80035a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80037be:	f001 fd25 	bl	800520c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80037c2:	2301      	movs	r3, #1
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	e000ed04 	.word	0xe000ed04

080037d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08a      	sub	sp, #40	; 0x28
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	4613      	mov	r3, r2
 80037dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <xQueueGenericCreate+0x2a>
	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	613b      	str	r3, [r7, #16]
}
 80037f6:	bf00      	nop
 80037f8:	e7fe      	b.n	80037f8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d102      	bne.n	8003806 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003800:	2300      	movs	r3, #0
 8003802:	61fb      	str	r3, [r7, #28]
 8003804:	e004      	b.n	8003810 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	3348      	adds	r3, #72	; 0x48
 8003814:	4618      	mov	r0, r3
 8003816:	f001 fd8b 	bl	8005330 <pvPortMalloc>
 800381a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00f      	beq.n	8003842 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	3348      	adds	r3, #72	; 0x48
 8003826:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003830:	79fa      	ldrb	r2, [r7, #7]
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	4613      	mov	r3, r2
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f805 	bl	800384c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003842:	69bb      	ldr	r3, [r7, #24]
	}
 8003844:	4618      	mov	r0, r3
 8003846:	3720      	adds	r7, #32
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d103      	bne.n	8003868 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	e002      	b.n	800386e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800387a:	2101      	movs	r1, #1
 800387c:	69b8      	ldr	r0, [r7, #24]
 800387e:	f7ff ff3f 	bl	8003700 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003882:	bf00      	nop
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00e      	beq.n	80038b6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80038aa:	2300      	movs	r3, #0
 80038ac:	2200      	movs	r2, #0
 80038ae:	2100      	movs	r1, #0
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f81d 	bl	80038f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b086      	sub	sp, #24
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	4603      	mov	r3, r0
 80038c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80038c8:	2301      	movs	r3, #1
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	2300      	movs	r3, #0
 80038ce:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	461a      	mov	r2, r3
 80038d4:	6939      	ldr	r1, [r7, #16]
 80038d6:	6978      	ldr	r0, [r7, #20]
 80038d8:	f7ff ff7a 	bl	80037d0 <xQueueGenericCreate>
 80038dc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f7ff ffd3 	bl	800388a <prvInitialiseMutex>

		return pxNewQueue;
 80038e4:	68fb      	ldr	r3, [r7, #12]
	}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08e      	sub	sp, #56	; 0x38
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038fe:	2300      	movs	r3, #0
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10a      	bne.n	8003922 <xQueueGenericSend+0x32>
	__asm volatile
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800391e:	bf00      	nop
 8003920:	e7fe      	b.n	8003920 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d103      	bne.n	8003930 <xQueueGenericSend+0x40>
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <xQueueGenericSend+0x44>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <xQueueGenericSend+0x46>
 8003934:	2300      	movs	r3, #0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <xQueueGenericSend+0x60>
	__asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800394c:	bf00      	nop
 800394e:	e7fe      	b.n	800394e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d103      	bne.n	800395e <xQueueGenericSend+0x6e>
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <xQueueGenericSend+0x72>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <xQueueGenericSend+0x74>
 8003962:	2300      	movs	r3, #0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10a      	bne.n	800397e <xQueueGenericSend+0x8e>
	__asm volatile
 8003968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	623b      	str	r3, [r7, #32]
}
 800397a:	bf00      	nop
 800397c:	e7fe      	b.n	800397c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800397e:	f001 f8df 	bl	8004b40 <xTaskGetSchedulerState>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <xQueueGenericSend+0x9e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <xQueueGenericSend+0xa2>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <xQueueGenericSend+0xa4>
 8003992:	2300      	movs	r3, #0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <xQueueGenericSend+0xbe>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	61fb      	str	r3, [r7, #28]
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039ae:	f001 fbfd 	bl	80051ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d302      	bcc.n	80039c4 <xQueueGenericSend+0xd4>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d129      	bne.n	8003a18 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	68b9      	ldr	r1, [r7, #8]
 80039c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ca:	f000 f9b2 	bl	8003d32 <prvCopyDataToQueue>
 80039ce:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d010      	beq.n	80039fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039da:	3324      	adds	r3, #36	; 0x24
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 feef 	bl	80047c0 <xTaskRemoveFromEventList>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d013      	beq.n	8003a10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039e8:	4b3f      	ldr	r3, [pc, #252]	; (8003ae8 <xQueueGenericSend+0x1f8>)
 80039ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	e00a      	b.n	8003a10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d007      	beq.n	8003a10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a00:	4b39      	ldr	r3, [pc, #228]	; (8003ae8 <xQueueGenericSend+0x1f8>)
 8003a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a10:	f001 fbfc 	bl	800520c <vPortExitCritical>
				return pdPASS;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e063      	b.n	8003ae0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a1e:	f001 fbf5 	bl	800520c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e05c      	b.n	8003ae0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d106      	bne.n	8003a3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a2c:	f107 0314 	add.w	r3, r7, #20
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 ff27 	bl	8004884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a36:	2301      	movs	r3, #1
 8003a38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a3a:	f001 fbe7 	bl	800520c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a3e:	f000 fccb 	bl	80043d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a42:	f001 fbb3 	bl	80051ac <vPortEnterCritical>
 8003a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a4c:	b25b      	sxtb	r3, r3
 8003a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a52:	d103      	bne.n	8003a5c <xQueueGenericSend+0x16c>
 8003a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a62:	b25b      	sxtb	r3, r3
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a68:	d103      	bne.n	8003a72 <xQueueGenericSend+0x182>
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a72:	f001 fbcb 	bl	800520c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a76:	1d3a      	adds	r2, r7, #4
 8003a78:	f107 0314 	add.w	r3, r7, #20
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 ff16 	bl	80048b0 <xTaskCheckForTimeOut>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d124      	bne.n	8003ad4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a8c:	f000 fa23 	bl	8003ed6 <prvIsQueueFull>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d018      	beq.n	8003ac8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	3310      	adds	r3, #16
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fe6a 	bl	8004778 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aa6:	f000 f9ae 	bl	8003e06 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003aaa:	f000 fca3 	bl	80043f4 <xTaskResumeAll>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f47f af7c 	bne.w	80039ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <xQueueGenericSend+0x1f8>)
 8003ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	e772      	b.n	80039ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aca:	f000 f99c 	bl	8003e06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ace:	f000 fc91 	bl	80043f4 <xTaskResumeAll>
 8003ad2:	e76c      	b.n	80039ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ad6:	f000 f996 	bl	8003e06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ada:	f000 fc8b 	bl	80043f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ade:	2300      	movs	r3, #0
		}
	}
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3738      	adds	r7, #56	; 0x38
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	e000ed04 	.word	0xe000ed04

08003aec <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08e      	sub	sp, #56	; 0x38
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003af6:	2300      	movs	r3, #0
 8003af8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003afe:	2300      	movs	r3, #0
 8003b00:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10a      	bne.n	8003b1e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	623b      	str	r3, [r7, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	e7fe      	b.n	8003b1c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	61fb      	str	r3, [r7, #28]
}
 8003b38:	bf00      	nop
 8003b3a:	e7fe      	b.n	8003b3a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b3c:	f001 f800 	bl	8004b40 <xTaskGetSchedulerState>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d102      	bne.n	8003b4c <xQueueSemaphoreTake+0x60>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <xQueueSemaphoreTake+0x64>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <xQueueSemaphoreTake+0x66>
 8003b50:	2300      	movs	r3, #0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10a      	bne.n	8003b6c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	61bb      	str	r3, [r7, #24]
}
 8003b68:	bf00      	nop
 8003b6a:	e7fe      	b.n	8003b6a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b6c:	f001 fb1e 	bl	80051ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d024      	beq.n	8003bc6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	1e5a      	subs	r2, r3, #1
 8003b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d104      	bne.n	8003b96 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003b8c:	f001 f9a2 	bl	8004ed4 <pvTaskIncrementMutexHeldCount>
 8003b90:	4602      	mov	r2, r0
 8003b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b94:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00f      	beq.n	8003bbe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	3310      	adds	r3, #16
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fe0c 	bl	80047c0 <xTaskRemoveFromEventList>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d007      	beq.n	8003bbe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003bae:	4b54      	ldr	r3, [pc, #336]	; (8003d00 <xQueueSemaphoreTake+0x214>)
 8003bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003bbe:	f001 fb25 	bl	800520c <vPortExitCritical>
				return pdPASS;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e097      	b.n	8003cf6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d111      	bne.n	8003bf0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	617b      	str	r3, [r7, #20]
}
 8003be4:	bf00      	nop
 8003be6:	e7fe      	b.n	8003be6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003be8:	f001 fb10 	bl	800520c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bec:	2300      	movs	r3, #0
 8003bee:	e082      	b.n	8003cf6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bf6:	f107 030c 	add.w	r3, r7, #12
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fe42 	bl	8004884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c00:	2301      	movs	r3, #1
 8003c02:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c04:	f001 fb02 	bl	800520c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c08:	f000 fbe6 	bl	80043d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c0c:	f001 face 	bl	80051ac <vPortEnterCritical>
 8003c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c16:	b25b      	sxtb	r3, r3
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c1c:	d103      	bne.n	8003c26 <xQueueSemaphoreTake+0x13a>
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c2c:	b25b      	sxtb	r3, r3
 8003c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c32:	d103      	bne.n	8003c3c <xQueueSemaphoreTake+0x150>
 8003c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c3c:	f001 fae6 	bl	800520c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c40:	463a      	mov	r2, r7
 8003c42:	f107 030c 	add.w	r3, r7, #12
 8003c46:	4611      	mov	r1, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fe31 	bl	80048b0 <xTaskCheckForTimeOut>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d132      	bne.n	8003cba <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c56:	f000 f928 	bl	8003eaa <prvIsQueueEmpty>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d026      	beq.n	8003cae <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d109      	bne.n	8003c7c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003c68:	f001 faa0 	bl	80051ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 ff83 	bl	8004b7c <xTaskPriorityInherit>
 8003c76:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003c78:	f001 fac8 	bl	800520c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7e:	3324      	adds	r3, #36	; 0x24
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	4611      	mov	r1, r2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fd77 	bl	8004778 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c8c:	f000 f8bb 	bl	8003e06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c90:	f000 fbb0 	bl	80043f4 <xTaskResumeAll>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f47f af68 	bne.w	8003b6c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003c9c:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <xQueueSemaphoreTake+0x214>)
 8003c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	e75e      	b.n	8003b6c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003cae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cb0:	f000 f8a9 	bl	8003e06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cb4:	f000 fb9e 	bl	80043f4 <xTaskResumeAll>
 8003cb8:	e758      	b.n	8003b6c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003cba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cbc:	f000 f8a3 	bl	8003e06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cc0:	f000 fb98 	bl	80043f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cc6:	f000 f8f0 	bl	8003eaa <prvIsQueueEmpty>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f43f af4d 	beq.w	8003b6c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00d      	beq.n	8003cf4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003cd8:	f001 fa68 	bl	80051ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003cdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cde:	f000 f811 	bl	8003d04 <prvGetDisinheritPriorityAfterTimeout>
 8003ce2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cea:	4618      	mov	r0, r3
 8003cec:	f001 f852 	bl	8004d94 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003cf0:	f001 fa8c 	bl	800520c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003cf4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3738      	adds	r7, #56	; 0x38
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	e000ed04 	.word	0xe000ed04

08003d04 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d006      	beq.n	8003d22 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f1c3 0307 	rsb	r3, r3, #7
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	e001      	b.n	8003d26 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003d26:	68fb      	ldr	r3, [r7, #12]
	}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b086      	sub	sp, #24
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d46:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10d      	bne.n	8003d6c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d14d      	bne.n	8003df4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 ff93 	bl	8004c88 <xTaskPriorityDisinherit>
 8003d62:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	605a      	str	r2, [r3, #4]
 8003d6a:	e043      	b.n	8003df4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d119      	bne.n	8003da6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6898      	ldr	r0, [r3, #8]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	f001 fd03 	bl	8005788 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	441a      	add	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d32b      	bcc.n	8003df4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	609a      	str	r2, [r3, #8]
 8003da4:	e026      	b.n	8003df4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	68d8      	ldr	r0, [r3, #12]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	461a      	mov	r2, r3
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	f001 fce9 	bl	8005788 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	425b      	negs	r3, r3
 8003dc0:	441a      	add	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d207      	bcs.n	8003de2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	425b      	negs	r3, r3
 8003ddc:	441a      	add	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d105      	bne.n	8003df4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003dfc:	697b      	ldr	r3, [r7, #20]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e0e:	f001 f9cd 	bl	80051ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e18:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e1a:	e011      	b.n	8003e40 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d012      	beq.n	8003e4a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3324      	adds	r3, #36	; 0x24
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fcc9 	bl	80047c0 <xTaskRemoveFromEventList>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e34:	f000 fd9e 	bl	8004974 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	dce9      	bgt.n	8003e1c <prvUnlockQueue+0x16>
 8003e48:	e000      	b.n	8003e4c <prvUnlockQueue+0x46>
					break;
 8003e4a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	22ff      	movs	r2, #255	; 0xff
 8003e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e54:	f001 f9da 	bl	800520c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e58:	f001 f9a8 	bl	80051ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e62:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e64:	e011      	b.n	8003e8a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d012      	beq.n	8003e94 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	3310      	adds	r3, #16
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fca4 	bl	80047c0 <xTaskRemoveFromEventList>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e7e:	f000 fd79 	bl	8004974 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e82:	7bbb      	ldrb	r3, [r7, #14]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	dce9      	bgt.n	8003e66 <prvUnlockQueue+0x60>
 8003e92:	e000      	b.n	8003e96 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e94:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	22ff      	movs	r2, #255	; 0xff
 8003e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e9e:	f001 f9b5 	bl	800520c <vPortExitCritical>
}
 8003ea2:	bf00      	nop
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003eb2:	f001 f97b 	bl	80051ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d102      	bne.n	8003ec4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	e001      	b.n	8003ec8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ec8:	f001 f9a0 	bl	800520c <vPortExitCritical>

	return xReturn;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ede:	f001 f965 	bl	80051ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d102      	bne.n	8003ef4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	e001      	b.n	8003ef8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ef8:	f001 f988 	bl	800520c <vPortExitCritical>

	return xReturn;
 8003efc:	68fb      	ldr	r3, [r7, #12]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b08e      	sub	sp, #56	; 0x38
 8003f0a:	af04      	add	r7, sp, #16
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	607a      	str	r2, [r7, #4]
 8003f12:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	623b      	str	r3, [r7, #32]
}
 8003f2c:	bf00      	nop
 8003f2e:	e7fe      	b.n	8003f2e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <xTaskCreateStatic+0x46>
	__asm volatile
 8003f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	61fb      	str	r3, [r7, #28]
}
 8003f48:	bf00      	nop
 8003f4a:	e7fe      	b.n	8003f4a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f4c:	2354      	movs	r3, #84	; 0x54
 8003f4e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b54      	cmp	r3, #84	; 0x54
 8003f54:	d00a      	beq.n	8003f6c <xTaskCreateStatic+0x66>
	__asm volatile
 8003f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	61bb      	str	r3, [r7, #24]
}
 8003f68:	bf00      	nop
 8003f6a:	e7fe      	b.n	8003f6a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01e      	beq.n	8003fb0 <xTaskCreateStatic+0xaa>
 8003f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01b      	beq.n	8003fb0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	2202      	movs	r2, #2
 8003f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	9303      	str	r3, [sp, #12]
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	9302      	str	r3, [sp, #8]
 8003f92:	f107 0314 	add.w	r3, r7, #20
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 f850 	bl	8004048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003faa:	f000 f8cd 	bl	8004148 <prvAddNewTaskToReadyList>
 8003fae:	e001      	b.n	8003fb4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003fb4:	697b      	ldr	r3, [r7, #20]
	}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3728      	adds	r7, #40	; 0x28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b08c      	sub	sp, #48	; 0x30
 8003fc2:	af04      	add	r7, sp, #16
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	603b      	str	r3, [r7, #0]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f001 f9ac 	bl	8005330 <pvPortMalloc>
 8003fd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00e      	beq.n	8003ffe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003fe0:	2054      	movs	r0, #84	; 0x54
 8003fe2:	f001 f9a5 	bl	8005330 <pvPortMalloc>
 8003fe6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ff4:	e005      	b.n	8004002 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ff6:	6978      	ldr	r0, [r7, #20]
 8003ff8:	f001 fa5e 	bl	80054b8 <vPortFree>
 8003ffc:	e001      	b.n	8004002 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d017      	beq.n	8004038 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004010:	88fa      	ldrh	r2, [r7, #6]
 8004012:	2300      	movs	r3, #0
 8004014:	9303      	str	r3, [sp, #12]
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	9302      	str	r3, [sp, #8]
 800401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f80e 	bl	8004048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800402c:	69f8      	ldr	r0, [r7, #28]
 800402e:	f000 f88b 	bl	8004148 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004032:	2301      	movs	r3, #1
 8004034:	61bb      	str	r3, [r7, #24]
 8004036:	e002      	b.n	800403e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800403c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800403e:	69bb      	ldr	r3, [r7, #24]
	}
 8004040:	4618      	mov	r0, r3
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004060:	3b01      	subs	r3, #1
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	f023 0307 	bic.w	r3, r3, #7
 800406e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <prvInitialiseNewTask+0x48>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	617b      	str	r3, [r7, #20]
}
 800408c:	bf00      	nop
 800408e:	e7fe      	b.n	800408e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004090:	2300      	movs	r3, #0
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	e012      	b.n	80040bc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	4413      	add	r3, r2
 800409c:	7819      	ldrb	r1, [r3, #0]
 800409e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	4413      	add	r3, r2
 80040a4:	3334      	adds	r3, #52	; 0x34
 80040a6:	460a      	mov	r2, r1
 80040a8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4413      	add	r3, r2
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d006      	beq.n	80040c4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	3301      	adds	r3, #1
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2b0f      	cmp	r3, #15
 80040c0:	d9e9      	bls.n	8004096 <prvInitialiseNewTask+0x4e>
 80040c2:	e000      	b.n	80040c6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80040c4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d0:	2b06      	cmp	r3, #6
 80040d2:	d901      	bls.n	80040d8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040d4:	2306      	movs	r3, #6
 80040d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	2200      	movs	r2, #0
 80040e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	3304      	adds	r3, #4
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff fa75 	bl	80035de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	3318      	adds	r3, #24
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff fa70 	bl	80035de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004102:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	f1c3 0207 	rsb	r2, r3, #7
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004112:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	2200      	movs	r2, #0
 8004118:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	68f9      	ldr	r1, [r7, #12]
 8004126:	69b8      	ldr	r0, [r7, #24]
 8004128:	f000 ff4e 	bl	8004fc8 <pxPortInitialiseStack>
 800412c:	4602      	mov	r2, r0
 800412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004130:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800413e:	bf00      	nop
 8004140:	3720      	adds	r7, #32
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004150:	f001 f82c 	bl	80051ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004154:	4b2a      	ldr	r3, [pc, #168]	; (8004200 <prvAddNewTaskToReadyList+0xb8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3301      	adds	r3, #1
 800415a:	4a29      	ldr	r2, [pc, #164]	; (8004200 <prvAddNewTaskToReadyList+0xb8>)
 800415c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800415e:	4b29      	ldr	r3, [pc, #164]	; (8004204 <prvAddNewTaskToReadyList+0xbc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004166:	4a27      	ldr	r2, [pc, #156]	; (8004204 <prvAddNewTaskToReadyList+0xbc>)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800416c:	4b24      	ldr	r3, [pc, #144]	; (8004200 <prvAddNewTaskToReadyList+0xb8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d110      	bne.n	8004196 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004174:	f000 fc22 	bl	80049bc <prvInitialiseTaskLists>
 8004178:	e00d      	b.n	8004196 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800417a:	4b23      	ldr	r3, [pc, #140]	; (8004208 <prvAddNewTaskToReadyList+0xc0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004182:	4b20      	ldr	r3, [pc, #128]	; (8004204 <prvAddNewTaskToReadyList+0xbc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	429a      	cmp	r2, r3
 800418e:	d802      	bhi.n	8004196 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004190:	4a1c      	ldr	r2, [pc, #112]	; (8004204 <prvAddNewTaskToReadyList+0xbc>)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004196:	4b1d      	ldr	r3, [pc, #116]	; (800420c <prvAddNewTaskToReadyList+0xc4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3301      	adds	r3, #1
 800419c:	4a1b      	ldr	r2, [pc, #108]	; (800420c <prvAddNewTaskToReadyList+0xc4>)
 800419e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	2201      	movs	r2, #1
 80041a6:	409a      	lsls	r2, r3
 80041a8:	4b19      	ldr	r3, [pc, #100]	; (8004210 <prvAddNewTaskToReadyList+0xc8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	4a18      	ldr	r2, [pc, #96]	; (8004210 <prvAddNewTaskToReadyList+0xc8>)
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4a15      	ldr	r2, [pc, #84]	; (8004214 <prvAddNewTaskToReadyList+0xcc>)
 80041c0:	441a      	add	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3304      	adds	r3, #4
 80041c6:	4619      	mov	r1, r3
 80041c8:	4610      	mov	r0, r2
 80041ca:	f7ff fa14 	bl	80035f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041ce:	f001 f81d 	bl	800520c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041d2:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <prvAddNewTaskToReadyList+0xc0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00e      	beq.n	80041f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041da:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <prvAddNewTaskToReadyList+0xbc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d207      	bcs.n	80041f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <prvAddNewTaskToReadyList+0xd0>)
 80041ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041f8:	bf00      	nop
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	2000055c 	.word	0x2000055c
 8004204:	2000045c 	.word	0x2000045c
 8004208:	20000568 	.word	0x20000568
 800420c:	20000578 	.word	0x20000578
 8004210:	20000564 	.word	0x20000564
 8004214:	20000460 	.word	0x20000460
 8004218:	e000ed04 	.word	0xe000ed04

0800421c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	; 0x28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004226:	2300      	movs	r3, #0
 8004228:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <vTaskDelayUntil+0x2a>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	617b      	str	r3, [r7, #20]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10a      	bne.n	8004262 <vTaskDelayUntil+0x46>
	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	613b      	str	r3, [r7, #16]
}
 800425e:	bf00      	nop
 8004260:	e7fe      	b.n	8004260 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004262:	4b2a      	ldr	r3, [pc, #168]	; (800430c <vTaskDelayUntil+0xf0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <vTaskDelayUntil+0x64>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	60fb      	str	r3, [r7, #12]
}
 800427c:	bf00      	nop
 800427e:	e7fe      	b.n	800427e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004280:	f000 f8aa 	bl	80043d8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004284:	4b22      	ldr	r3, [pc, #136]	; (8004310 <vTaskDelayUntil+0xf4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	4413      	add	r3, r2
 8004292:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6a3a      	ldr	r2, [r7, #32]
 800429a:	429a      	cmp	r2, r3
 800429c:	d20b      	bcs.n	80042b6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d211      	bcs.n	80042cc <vTaskDelayUntil+0xb0>
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d90d      	bls.n	80042cc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80042b0:	2301      	movs	r3, #1
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
 80042b4:	e00a      	b.n	80042cc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d303      	bcc.n	80042c8 <vTaskDelayUntil+0xac>
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d901      	bls.n	80042cc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80042c8:	2301      	movs	r3, #1
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d006      	beq.n	80042e6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fe0b 	bl	8004efc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80042e6:	f000 f885 	bl	80043f4 <xTaskResumeAll>
 80042ea:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d107      	bne.n	8004302 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <vTaskDelayUntil+0xf8>)
 80042f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004302:	bf00      	nop
 8004304:	3728      	adds	r7, #40	; 0x28
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000584 	.word	0x20000584
 8004310:	20000560 	.word	0x20000560
 8004314:	e000ed04 	.word	0xe000ed04

08004318 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08a      	sub	sp, #40	; 0x28
 800431c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800431e:	2300      	movs	r3, #0
 8004320:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004322:	2300      	movs	r3, #0
 8004324:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004326:	463a      	mov	r2, r7
 8004328:	1d39      	adds	r1, r7, #4
 800432a:	f107 0308 	add.w	r3, r7, #8
 800432e:	4618      	mov	r0, r3
 8004330:	f7fc fc3c 	bl	8000bac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004334:	6839      	ldr	r1, [r7, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	9202      	str	r2, [sp, #8]
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	2300      	movs	r3, #0
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	2300      	movs	r3, #0
 8004344:	460a      	mov	r2, r1
 8004346:	491e      	ldr	r1, [pc, #120]	; (80043c0 <vTaskStartScheduler+0xa8>)
 8004348:	481e      	ldr	r0, [pc, #120]	; (80043c4 <vTaskStartScheduler+0xac>)
 800434a:	f7ff fddc 	bl	8003f06 <xTaskCreateStatic>
 800434e:	4603      	mov	r3, r0
 8004350:	4a1d      	ldr	r2, [pc, #116]	; (80043c8 <vTaskStartScheduler+0xb0>)
 8004352:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004354:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <vTaskStartScheduler+0xb0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800435c:	2301      	movs	r3, #1
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	e001      	b.n	8004366 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d116      	bne.n	800439a <vTaskStartScheduler+0x82>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	613b      	str	r3, [r7, #16]
}
 800437e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004380:	4b12      	ldr	r3, [pc, #72]	; (80043cc <vTaskStartScheduler+0xb4>)
 8004382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004386:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004388:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <vTaskStartScheduler+0xb8>)
 800438a:	2201      	movs	r2, #1
 800438c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800438e:	4b11      	ldr	r3, [pc, #68]	; (80043d4 <vTaskStartScheduler+0xbc>)
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004394:	f000 fe98 	bl	80050c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004398:	e00e      	b.n	80043b8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a0:	d10a      	bne.n	80043b8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	60fb      	str	r3, [r7, #12]
}
 80043b4:	bf00      	nop
 80043b6:	e7fe      	b.n	80043b6 <vTaskStartScheduler+0x9e>
}
 80043b8:	bf00      	nop
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	080060d8 	.word	0x080060d8
 80043c4:	0800498d 	.word	0x0800498d
 80043c8:	20000580 	.word	0x20000580
 80043cc:	2000057c 	.word	0x2000057c
 80043d0:	20000568 	.word	0x20000568
 80043d4:	20000560 	.word	0x20000560

080043d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80043dc:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <vTaskSuspendAll+0x18>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3301      	adds	r3, #1
 80043e2:	4a03      	ldr	r2, [pc, #12]	; (80043f0 <vTaskSuspendAll+0x18>)
 80043e4:	6013      	str	r3, [r2, #0]
}
 80043e6:	bf00      	nop
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000584 	.word	0x20000584

080043f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043fe:	2300      	movs	r3, #0
 8004400:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004402:	4b41      	ldr	r3, [pc, #260]	; (8004508 <xTaskResumeAll+0x114>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <xTaskResumeAll+0x2c>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	603b      	str	r3, [r7, #0]
}
 800441c:	bf00      	nop
 800441e:	e7fe      	b.n	800441e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004420:	f000 fec4 	bl	80051ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004424:	4b38      	ldr	r3, [pc, #224]	; (8004508 <xTaskResumeAll+0x114>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3b01      	subs	r3, #1
 800442a:	4a37      	ldr	r2, [pc, #220]	; (8004508 <xTaskResumeAll+0x114>)
 800442c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800442e:	4b36      	ldr	r3, [pc, #216]	; (8004508 <xTaskResumeAll+0x114>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d161      	bne.n	80044fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004436:	4b35      	ldr	r3, [pc, #212]	; (800450c <xTaskResumeAll+0x118>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d05d      	beq.n	80044fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800443e:	e02e      	b.n	800449e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004440:	4b33      	ldr	r3, [pc, #204]	; (8004510 <xTaskResumeAll+0x11c>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	3318      	adds	r3, #24
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff f92d 	bl	80036ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	3304      	adds	r3, #4
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff f928 	bl	80036ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	2201      	movs	r2, #1
 8004462:	409a      	lsls	r2, r3
 8004464:	4b2b      	ldr	r3, [pc, #172]	; (8004514 <xTaskResumeAll+0x120>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4313      	orrs	r3, r2
 800446a:	4a2a      	ldr	r2, [pc, #168]	; (8004514 <xTaskResumeAll+0x120>)
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4a27      	ldr	r2, [pc, #156]	; (8004518 <xTaskResumeAll+0x124>)
 800447c:	441a      	add	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	3304      	adds	r3, #4
 8004482:	4619      	mov	r1, r3
 8004484:	4610      	mov	r0, r2
 8004486:	f7ff f8b6 	bl	80035f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448e:	4b23      	ldr	r3, [pc, #140]	; (800451c <xTaskResumeAll+0x128>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	429a      	cmp	r2, r3
 8004496:	d302      	bcc.n	800449e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004498:	4b21      	ldr	r3, [pc, #132]	; (8004520 <xTaskResumeAll+0x12c>)
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800449e:	4b1c      	ldr	r3, [pc, #112]	; (8004510 <xTaskResumeAll+0x11c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1cc      	bne.n	8004440 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044ac:	f000 fb24 	bl	8004af8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80044b0:	4b1c      	ldr	r3, [pc, #112]	; (8004524 <xTaskResumeAll+0x130>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d010      	beq.n	80044de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044bc:	f000 f844 	bl	8004548 <xTaskIncrementTick>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80044c6:	4b16      	ldr	r3, [pc, #88]	; (8004520 <xTaskResumeAll+0x12c>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f1      	bne.n	80044bc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80044d8:	4b12      	ldr	r3, [pc, #72]	; (8004524 <xTaskResumeAll+0x130>)
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044de:	4b10      	ldr	r3, [pc, #64]	; (8004520 <xTaskResumeAll+0x12c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044e6:	2301      	movs	r3, #1
 80044e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044ea:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <xTaskResumeAll+0x134>)
 80044ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044fa:	f000 fe87 	bl	800520c <vPortExitCritical>

	return xAlreadyYielded;
 80044fe:	68bb      	ldr	r3, [r7, #8]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000584 	.word	0x20000584
 800450c:	2000055c 	.word	0x2000055c
 8004510:	2000051c 	.word	0x2000051c
 8004514:	20000564 	.word	0x20000564
 8004518:	20000460 	.word	0x20000460
 800451c:	2000045c 	.word	0x2000045c
 8004520:	20000570 	.word	0x20000570
 8004524:	2000056c 	.word	0x2000056c
 8004528:	e000ed04 	.word	0xe000ed04

0800452c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004532:	4b04      	ldr	r3, [pc, #16]	; (8004544 <xTaskGetTickCount+0x18>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004538:	687b      	ldr	r3, [r7, #4]
}
 800453a:	4618      	mov	r0, r3
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr
 8004544:	20000560 	.word	0x20000560

08004548 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004552:	4b51      	ldr	r3, [pc, #324]	; (8004698 <xTaskIncrementTick+0x150>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	f040 808d 	bne.w	8004676 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800455c:	4b4f      	ldr	r3, [pc, #316]	; (800469c <xTaskIncrementTick+0x154>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3301      	adds	r3, #1
 8004562:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004564:	4a4d      	ldr	r2, [pc, #308]	; (800469c <xTaskIncrementTick+0x154>)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d120      	bne.n	80045b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004570:	4b4b      	ldr	r3, [pc, #300]	; (80046a0 <xTaskIncrementTick+0x158>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <xTaskIncrementTick+0x48>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	603b      	str	r3, [r7, #0]
}
 800458c:	bf00      	nop
 800458e:	e7fe      	b.n	800458e <xTaskIncrementTick+0x46>
 8004590:	4b43      	ldr	r3, [pc, #268]	; (80046a0 <xTaskIncrementTick+0x158>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	4b43      	ldr	r3, [pc, #268]	; (80046a4 <xTaskIncrementTick+0x15c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a41      	ldr	r2, [pc, #260]	; (80046a0 <xTaskIncrementTick+0x158>)
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	4a41      	ldr	r2, [pc, #260]	; (80046a4 <xTaskIncrementTick+0x15c>)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4b40      	ldr	r3, [pc, #256]	; (80046a8 <xTaskIncrementTick+0x160>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3301      	adds	r3, #1
 80045aa:	4a3f      	ldr	r2, [pc, #252]	; (80046a8 <xTaskIncrementTick+0x160>)
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	f000 faa3 	bl	8004af8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045b2:	4b3e      	ldr	r3, [pc, #248]	; (80046ac <xTaskIncrementTick+0x164>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d34d      	bcc.n	8004658 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045bc:	4b38      	ldr	r3, [pc, #224]	; (80046a0 <xTaskIncrementTick+0x158>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <xTaskIncrementTick+0x82>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <xTaskIncrementTick+0x84>
 80045ca:	2300      	movs	r3, #0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d004      	beq.n	80045da <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045d0:	4b36      	ldr	r3, [pc, #216]	; (80046ac <xTaskIncrementTick+0x164>)
 80045d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045d6:	601a      	str	r2, [r3, #0]
					break;
 80045d8:	e03e      	b.n	8004658 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045da:	4b31      	ldr	r3, [pc, #196]	; (80046a0 <xTaskIncrementTick+0x158>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d203      	bcs.n	80045fa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045f2:	4a2e      	ldr	r2, [pc, #184]	; (80046ac <xTaskIncrementTick+0x164>)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6013      	str	r3, [r2, #0]
						break;
 80045f8:	e02e      	b.n	8004658 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff f854 	bl	80036ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004608:	2b00      	cmp	r3, #0
 800460a:	d004      	beq.n	8004616 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	3318      	adds	r3, #24
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff f84b 	bl	80036ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	2201      	movs	r2, #1
 800461c:	409a      	lsls	r2, r3
 800461e:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <xTaskIncrementTick+0x168>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4313      	orrs	r3, r2
 8004624:	4a22      	ldr	r2, [pc, #136]	; (80046b0 <xTaskIncrementTick+0x168>)
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4a1f      	ldr	r2, [pc, #124]	; (80046b4 <xTaskIncrementTick+0x16c>)
 8004636:	441a      	add	r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	3304      	adds	r3, #4
 800463c:	4619      	mov	r1, r3
 800463e:	4610      	mov	r0, r2
 8004640:	f7fe ffd9 	bl	80035f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004648:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <xTaskIncrementTick+0x170>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	429a      	cmp	r2, r3
 8004650:	d3b4      	bcc.n	80045bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004652:	2301      	movs	r3, #1
 8004654:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004656:	e7b1      	b.n	80045bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004658:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <xTaskIncrementTick+0x170>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465e:	4915      	ldr	r1, [pc, #84]	; (80046b4 <xTaskIncrementTick+0x16c>)
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d907      	bls.n	8004680 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004670:	2301      	movs	r3, #1
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	e004      	b.n	8004680 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004676:	4b11      	ldr	r3, [pc, #68]	; (80046bc <xTaskIncrementTick+0x174>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3301      	adds	r3, #1
 800467c:	4a0f      	ldr	r2, [pc, #60]	; (80046bc <xTaskIncrementTick+0x174>)
 800467e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004680:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <xTaskIncrementTick+0x178>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004688:	2301      	movs	r3, #1
 800468a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800468c:	697b      	ldr	r3, [r7, #20]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20000584 	.word	0x20000584
 800469c:	20000560 	.word	0x20000560
 80046a0:	20000514 	.word	0x20000514
 80046a4:	20000518 	.word	0x20000518
 80046a8:	20000574 	.word	0x20000574
 80046ac:	2000057c 	.word	0x2000057c
 80046b0:	20000564 	.word	0x20000564
 80046b4:	20000460 	.word	0x20000460
 80046b8:	2000045c 	.word	0x2000045c
 80046bc:	2000056c 	.word	0x2000056c
 80046c0:	20000570 	.word	0x20000570

080046c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046ca:	4b26      	ldr	r3, [pc, #152]	; (8004764 <vTaskSwitchContext+0xa0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046d2:	4b25      	ldr	r3, [pc, #148]	; (8004768 <vTaskSwitchContext+0xa4>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046d8:	e03f      	b.n	800475a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80046da:	4b23      	ldr	r3, [pc, #140]	; (8004768 <vTaskSwitchContext+0xa4>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80046e0:	4b22      	ldr	r3, [pc, #136]	; (800476c <vTaskSwitchContext+0xa8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	fab3 f383 	clz	r3, r3
 80046ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80046ee:	7afb      	ldrb	r3, [r7, #11]
 80046f0:	f1c3 031f 	rsb	r3, r3, #31
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	491e      	ldr	r1, [pc, #120]	; (8004770 <vTaskSwitchContext+0xac>)
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	4613      	mov	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	440b      	add	r3, r1
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <vTaskSwitchContext+0x5c>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	607b      	str	r3, [r7, #4]
}
 800471c:	bf00      	nop
 800471e:	e7fe      	b.n	800471e <vTaskSwitchContext+0x5a>
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4a11      	ldr	r2, [pc, #68]	; (8004770 <vTaskSwitchContext+0xac>)
 800472c:	4413      	add	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	3308      	adds	r3, #8
 8004742:	429a      	cmp	r2, r3
 8004744:	d104      	bne.n	8004750 <vTaskSwitchContext+0x8c>
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	605a      	str	r2, [r3, #4]
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	4a07      	ldr	r2, [pc, #28]	; (8004774 <vTaskSwitchContext+0xb0>)
 8004758:	6013      	str	r3, [r2, #0]
}
 800475a:	bf00      	nop
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr
 8004764:	20000584 	.word	0x20000584
 8004768:	20000570 	.word	0x20000570
 800476c:	20000564 	.word	0x20000564
 8004770:	20000460 	.word	0x20000460
 8004774:	2000045c 	.word	0x2000045c

08004778 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	60fb      	str	r3, [r7, #12]
}
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800479e:	4b07      	ldr	r3, [pc, #28]	; (80047bc <vTaskPlaceOnEventList+0x44>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3318      	adds	r3, #24
 80047a4:	4619      	mov	r1, r3
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fe ff48 	bl	800363c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047ac:	2101      	movs	r1, #1
 80047ae:	6838      	ldr	r0, [r7, #0]
 80047b0:	f000 fba4 	bl	8004efc <prvAddCurrentTaskToDelayedList>
}
 80047b4:	bf00      	nop
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	2000045c 	.word	0x2000045c

080047c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10a      	bne.n	80047ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	60fb      	str	r3, [r7, #12]
}
 80047e8:	bf00      	nop
 80047ea:	e7fe      	b.n	80047ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	3318      	adds	r3, #24
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fe ff5b 	bl	80036ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047f6:	4b1d      	ldr	r3, [pc, #116]	; (800486c <xTaskRemoveFromEventList+0xac>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d11c      	bne.n	8004838 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	3304      	adds	r3, #4
 8004802:	4618      	mov	r0, r3
 8004804:	f7fe ff52 	bl	80036ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	2201      	movs	r2, #1
 800480e:	409a      	lsls	r2, r3
 8004810:	4b17      	ldr	r3, [pc, #92]	; (8004870 <xTaskRemoveFromEventList+0xb0>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4313      	orrs	r3, r2
 8004816:	4a16      	ldr	r2, [pc, #88]	; (8004870 <xTaskRemoveFromEventList+0xb0>)
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4a13      	ldr	r2, [pc, #76]	; (8004874 <xTaskRemoveFromEventList+0xb4>)
 8004828:	441a      	add	r2, r3
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	3304      	adds	r3, #4
 800482e:	4619      	mov	r1, r3
 8004830:	4610      	mov	r0, r2
 8004832:	f7fe fee0 	bl	80035f6 <vListInsertEnd>
 8004836:	e005      	b.n	8004844 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	3318      	adds	r3, #24
 800483c:	4619      	mov	r1, r3
 800483e:	480e      	ldr	r0, [pc, #56]	; (8004878 <xTaskRemoveFromEventList+0xb8>)
 8004840:	f7fe fed9 	bl	80035f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004848:	4b0c      	ldr	r3, [pc, #48]	; (800487c <xTaskRemoveFromEventList+0xbc>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	429a      	cmp	r2, r3
 8004850:	d905      	bls.n	800485e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004852:	2301      	movs	r3, #1
 8004854:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004856:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <xTaskRemoveFromEventList+0xc0>)
 8004858:	2201      	movs	r2, #1
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e001      	b.n	8004862 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004862:	697b      	ldr	r3, [r7, #20]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20000584 	.word	0x20000584
 8004870:	20000564 	.word	0x20000564
 8004874:	20000460 	.word	0x20000460
 8004878:	2000051c 	.word	0x2000051c
 800487c:	2000045c 	.word	0x2000045c
 8004880:	20000570 	.word	0x20000570

08004884 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <vTaskInternalSetTimeOutState+0x24>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <vTaskInternalSetTimeOutState+0x28>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	605a      	str	r2, [r3, #4]
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	20000574 	.word	0x20000574
 80048ac:	20000560 	.word	0x20000560

080048b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	613b      	str	r3, [r7, #16]
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	60fb      	str	r3, [r7, #12]
}
 80048ee:	bf00      	nop
 80048f0:	e7fe      	b.n	80048f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80048f2:	f000 fc5b 	bl	80051ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048f6:	4b1d      	ldr	r3, [pc, #116]	; (800496c <xTaskCheckForTimeOut+0xbc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800490e:	d102      	bne.n	8004916 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004910:	2300      	movs	r3, #0
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	e023      	b.n	800495e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	4b15      	ldr	r3, [pc, #84]	; (8004970 <xTaskCheckForTimeOut+0xc0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d007      	beq.n	8004932 <xTaskCheckForTimeOut+0x82>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	429a      	cmp	r2, r3
 800492a:	d302      	bcc.n	8004932 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800492c:	2301      	movs	r3, #1
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	e015      	b.n	800495e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	429a      	cmp	r2, r3
 800493a:	d20b      	bcs.n	8004954 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	1ad2      	subs	r2, r2, r3
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff ff9b 	bl	8004884 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	e004      	b.n	800495e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800495a:	2301      	movs	r3, #1
 800495c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800495e:	f000 fc55 	bl	800520c <vPortExitCritical>

	return xReturn;
 8004962:	69fb      	ldr	r3, [r7, #28]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3720      	adds	r7, #32
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20000560 	.word	0x20000560
 8004970:	20000574 	.word	0x20000574

08004974 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004978:	4b03      	ldr	r3, [pc, #12]	; (8004988 <vTaskMissedYield+0x14>)
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]
}
 800497e:	bf00      	nop
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20000570 	.word	0x20000570

0800498c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004994:	f000 f852 	bl	8004a3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004998:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <prvIdleTask+0x28>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d9f9      	bls.n	8004994 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049a0:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <prvIdleTask+0x2c>)
 80049a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049b0:	e7f0      	b.n	8004994 <prvIdleTask+0x8>
 80049b2:	bf00      	nop
 80049b4:	20000460 	.word	0x20000460
 80049b8:	e000ed04 	.word	0xe000ed04

080049bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049c2:	2300      	movs	r3, #0
 80049c4:	607b      	str	r3, [r7, #4]
 80049c6:	e00c      	b.n	80049e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4a12      	ldr	r2, [pc, #72]	; (8004a1c <prvInitialiseTaskLists+0x60>)
 80049d4:	4413      	add	r3, r2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fe fde2 	bl	80035a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3301      	adds	r3, #1
 80049e0:	607b      	str	r3, [r7, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b06      	cmp	r3, #6
 80049e6:	d9ef      	bls.n	80049c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049e8:	480d      	ldr	r0, [pc, #52]	; (8004a20 <prvInitialiseTaskLists+0x64>)
 80049ea:	f7fe fdd9 	bl	80035a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049ee:	480d      	ldr	r0, [pc, #52]	; (8004a24 <prvInitialiseTaskLists+0x68>)
 80049f0:	f7fe fdd6 	bl	80035a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049f4:	480c      	ldr	r0, [pc, #48]	; (8004a28 <prvInitialiseTaskLists+0x6c>)
 80049f6:	f7fe fdd3 	bl	80035a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049fa:	480c      	ldr	r0, [pc, #48]	; (8004a2c <prvInitialiseTaskLists+0x70>)
 80049fc:	f7fe fdd0 	bl	80035a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a00:	480b      	ldr	r0, [pc, #44]	; (8004a30 <prvInitialiseTaskLists+0x74>)
 8004a02:	f7fe fdcd 	bl	80035a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <prvInitialiseTaskLists+0x78>)
 8004a08:	4a05      	ldr	r2, [pc, #20]	; (8004a20 <prvInitialiseTaskLists+0x64>)
 8004a0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	; (8004a38 <prvInitialiseTaskLists+0x7c>)
 8004a0e:	4a05      	ldr	r2, [pc, #20]	; (8004a24 <prvInitialiseTaskLists+0x68>)
 8004a10:	601a      	str	r2, [r3, #0]
}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000460 	.word	0x20000460
 8004a20:	200004ec 	.word	0x200004ec
 8004a24:	20000500 	.word	0x20000500
 8004a28:	2000051c 	.word	0x2000051c
 8004a2c:	20000530 	.word	0x20000530
 8004a30:	20000548 	.word	0x20000548
 8004a34:	20000514 	.word	0x20000514
 8004a38:	20000518 	.word	0x20000518

08004a3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a42:	e019      	b.n	8004a78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a44:	f000 fbb2 	bl	80051ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004a48:	4b10      	ldr	r3, [pc, #64]	; (8004a8c <prvCheckTasksWaitingTermination+0x50>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3304      	adds	r3, #4
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fe fe29 	bl	80036ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a5a:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <prvCheckTasksWaitingTermination+0x54>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	4a0b      	ldr	r2, [pc, #44]	; (8004a90 <prvCheckTasksWaitingTermination+0x54>)
 8004a62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a64:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <prvCheckTasksWaitingTermination+0x58>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	4a0a      	ldr	r2, [pc, #40]	; (8004a94 <prvCheckTasksWaitingTermination+0x58>)
 8004a6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a6e:	f000 fbcd 	bl	800520c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f810 	bl	8004a98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a78:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <prvCheckTasksWaitingTermination+0x58>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e1      	bne.n	8004a44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000530 	.word	0x20000530
 8004a90:	2000055c 	.word	0x2000055c
 8004a94:	20000544 	.word	0x20000544

08004a98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d108      	bne.n	8004abc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fd02 	bl	80054b8 <vPortFree>
				vPortFree( pxTCB );
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fcff 	bl	80054b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004aba:	e018      	b.n	8004aee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d103      	bne.n	8004ace <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fcf6 	bl	80054b8 <vPortFree>
	}
 8004acc:	e00f      	b.n	8004aee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d00a      	beq.n	8004aee <prvDeleteTCB+0x56>
	__asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	60fb      	str	r3, [r7, #12]
}
 8004aea:	bf00      	nop
 8004aec:	e7fe      	b.n	8004aec <prvDeleteTCB+0x54>
	}
 8004aee:	bf00      	nop
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004afe:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <prvResetNextTaskUnblockTime+0x40>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <prvResetNextTaskUnblockTime+0x14>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e000      	b.n	8004b0e <prvResetNextTaskUnblockTime+0x16>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d004      	beq.n	8004b1c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b12:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <prvResetNextTaskUnblockTime+0x44>)
 8004b14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b18:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b1a:	e008      	b.n	8004b2e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <prvResetNextTaskUnblockTime+0x40>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	4a04      	ldr	r2, [pc, #16]	; (8004b3c <prvResetNextTaskUnblockTime+0x44>)
 8004b2c:	6013      	str	r3, [r2, #0]
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bc80      	pop	{r7}
 8004b36:	4770      	bx	lr
 8004b38:	20000514 	.word	0x20000514
 8004b3c:	2000057c 	.word	0x2000057c

08004b40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b46:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <xTaskGetSchedulerState+0x34>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	607b      	str	r3, [r7, #4]
 8004b52:	e008      	b.n	8004b66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b54:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <xTaskGetSchedulerState+0x38>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d102      	bne.n	8004b62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	607b      	str	r3, [r7, #4]
 8004b60:	e001      	b.n	8004b66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b66:	687b      	ldr	r3, [r7, #4]
	}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	20000568 	.word	0x20000568
 8004b78:	20000584 	.word	0x20000584

08004b7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d06e      	beq.n	8004c70 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b96:	4b39      	ldr	r3, [pc, #228]	; (8004c7c <xTaskPriorityInherit+0x100>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d25e      	bcs.n	8004c5e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	db06      	blt.n	8004bb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ba8:	4b34      	ldr	r3, [pc, #208]	; (8004c7c <xTaskPriorityInherit+0x100>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	f1c3 0207 	rsb	r2, r3, #7
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	6959      	ldr	r1, [r3, #20]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4a2e      	ldr	r2, [pc, #184]	; (8004c80 <xTaskPriorityInherit+0x104>)
 8004bc8:	4413      	add	r3, r2
 8004bca:	4299      	cmp	r1, r3
 8004bcc:	d101      	bne.n	8004bd2 <xTaskPriorityInherit+0x56>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <xTaskPriorityInherit+0x58>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d03a      	beq.n	8004c4e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fe fd65 	bl	80036ac <uxListRemove>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d115      	bne.n	8004c14 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bec:	4924      	ldr	r1, [pc, #144]	; (8004c80 <xTaskPriorityInherit+0x104>)
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10a      	bne.n	8004c14 <xTaskPriorityInherit+0x98>
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	2201      	movs	r2, #1
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	43da      	mvns	r2, r3
 8004c0a:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <xTaskPriorityInherit+0x108>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	4a1c      	ldr	r2, [pc, #112]	; (8004c84 <xTaskPriorityInherit+0x108>)
 8004c12:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c14:	4b19      	ldr	r3, [pc, #100]	; (8004c7c <xTaskPriorityInherit+0x100>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	2201      	movs	r2, #1
 8004c24:	409a      	lsls	r2, r3
 8004c26:	4b17      	ldr	r3, [pc, #92]	; (8004c84 <xTaskPriorityInherit+0x108>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	4a15      	ldr	r2, [pc, #84]	; (8004c84 <xTaskPriorityInherit+0x108>)
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4a10      	ldr	r2, [pc, #64]	; (8004c80 <xTaskPriorityInherit+0x104>)
 8004c3e:	441a      	add	r2, r3
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	3304      	adds	r3, #4
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f7fe fcd5 	bl	80035f6 <vListInsertEnd>
 8004c4c:	e004      	b.n	8004c58 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <xTaskPriorityInherit+0x100>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	e008      	b.n	8004c70 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c62:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <xTaskPriorityInherit+0x100>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d201      	bcs.n	8004c70 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c70:	68fb      	ldr	r3, [r7, #12]
	}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	2000045c 	.word	0x2000045c
 8004c80:	20000460 	.word	0x20000460
 8004c84:	20000564 	.word	0x20000564

08004c88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d06e      	beq.n	8004d7c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c9e:	4b3a      	ldr	r3, [pc, #232]	; (8004d88 <xTaskPriorityDisinherit+0x100>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d00a      	beq.n	8004cbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	60fb      	str	r3, [r7, #12]
}
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10a      	bne.n	8004cdc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	60bb      	str	r3, [r7, #8]
}
 8004cd8:	bf00      	nop
 8004cda:	e7fe      	b.n	8004cda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce0:	1e5a      	subs	r2, r3, #1
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d044      	beq.n	8004d7c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d140      	bne.n	8004d7c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fe fcd4 	bl	80036ac <uxListRemove>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d115      	bne.n	8004d36 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0e:	491f      	ldr	r1, [pc, #124]	; (8004d8c <xTaskPriorityDisinherit+0x104>)
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <xTaskPriorityDisinherit+0xae>
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	2201      	movs	r2, #1
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43da      	mvns	r2, r3
 8004d2c:	4b18      	ldr	r3, [pc, #96]	; (8004d90 <xTaskPriorityDisinherit+0x108>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4013      	ands	r3, r2
 8004d32:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <xTaskPriorityDisinherit+0x108>)
 8004d34:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d42:	f1c3 0207 	rsb	r2, r3, #7
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	2201      	movs	r2, #1
 8004d50:	409a      	lsls	r2, r3
 8004d52:	4b0f      	ldr	r3, [pc, #60]	; (8004d90 <xTaskPriorityDisinherit+0x108>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	4a0d      	ldr	r2, [pc, #52]	; (8004d90 <xTaskPriorityDisinherit+0x108>)
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4a08      	ldr	r2, [pc, #32]	; (8004d8c <xTaskPriorityDisinherit+0x104>)
 8004d6a:	441a      	add	r2, r3
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	4619      	mov	r1, r3
 8004d72:	4610      	mov	r0, r2
 8004d74:	f7fe fc3f 	bl	80035f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d7c:	697b      	ldr	r3, [r7, #20]
	}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	2000045c 	.word	0x2000045c
 8004d8c:	20000460 	.word	0x20000460
 8004d90:	20000564 	.word	0x20000564

08004d94 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004da2:	2301      	movs	r3, #1
 8004da4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 8088 	beq.w	8004ebe <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10a      	bne.n	8004dcc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	60fb      	str	r3, [r7, #12]
}
 8004dc8:	bf00      	nop
 8004dca:	e7fe      	b.n	8004dca <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d902      	bls.n	8004ddc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	61fb      	str	r3, [r7, #28]
 8004dda:	e002      	b.n	8004de2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d068      	beq.n	8004ebe <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d163      	bne.n	8004ebe <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004df6:	4b34      	ldr	r3, [pc, #208]	; (8004ec8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d10a      	bne.n	8004e16 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	60bb      	str	r3, [r7, #8]
}
 8004e12:	bf00      	nop
 8004e14:	e7fe      	b.n	8004e14 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	db04      	blt.n	8004e34 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	f1c3 0207 	rsb	r2, r3, #7
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	6959      	ldr	r1, [r3, #20]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4a22      	ldr	r2, [pc, #136]	; (8004ecc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004e44:	4413      	add	r3, r2
 8004e46:	4299      	cmp	r1, r3
 8004e48:	d101      	bne.n	8004e4e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d034      	beq.n	8004ebe <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	3304      	adds	r3, #4
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fe fc27 	bl	80036ac <uxListRemove>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d115      	bne.n	8004e90 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e68:	4918      	ldr	r1, [pc, #96]	; (8004ecc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	440b      	add	r3, r1
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	2201      	movs	r2, #1
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	43da      	mvns	r2, r3
 8004e86:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	4a10      	ldr	r2, [pc, #64]	; (8004ed0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004e8e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	2201      	movs	r2, #1
 8004e96:	409a      	lsls	r2, r3
 8004e98:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	4a0c      	ldr	r2, [pc, #48]	; (8004ed0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4a07      	ldr	r2, [pc, #28]	; (8004ecc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004eb0:	441a      	add	r2, r3
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4610      	mov	r0, r2
 8004eba:	f7fe fb9c 	bl	80035f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ebe:	bf00      	nop
 8004ec0:	3720      	adds	r7, #32
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	2000045c 	.word	0x2000045c
 8004ecc:	20000460 	.word	0x20000460
 8004ed0:	20000564 	.word	0x20000564

08004ed4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004ed8:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d004      	beq.n	8004eea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004ee0:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ee6:	3201      	adds	r2, #1
 8004ee8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004eea:	4b03      	ldr	r3, [pc, #12]	; (8004ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004eec:	681b      	ldr	r3, [r3, #0]
	}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	2000045c 	.word	0x2000045c

08004efc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f06:	4b29      	ldr	r3, [pc, #164]	; (8004fac <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f0c:	4b28      	ldr	r3, [pc, #160]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3304      	adds	r3, #4
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe fbca 	bl	80036ac <uxListRemove>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004f1e:	4b24      	ldr	r3, [pc, #144]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	2201      	movs	r2, #1
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43da      	mvns	r2, r3
 8004f2c:	4b21      	ldr	r3, [pc, #132]	; (8004fb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4013      	ands	r3, r2
 8004f32:	4a20      	ldr	r2, [pc, #128]	; (8004fb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f3c:	d10a      	bne.n	8004f54 <prvAddCurrentTaskToDelayedList+0x58>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f44:	4b1a      	ldr	r3, [pc, #104]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	481a      	ldr	r0, [pc, #104]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f4e:	f7fe fb52 	bl	80035f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f52:	e026      	b.n	8004fa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4413      	add	r3, r2
 8004f5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f5c:	4b14      	ldr	r3, [pc, #80]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d209      	bcs.n	8004f80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f6c:	4b13      	ldr	r3, [pc, #76]	; (8004fbc <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	4b0f      	ldr	r3, [pc, #60]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3304      	adds	r3, #4
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f7fe fb5f 	bl	800363c <vListInsert>
}
 8004f7e:	e010      	b.n	8004fa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f80:	4b0f      	ldr	r3, [pc, #60]	; (8004fc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	4b0a      	ldr	r3, [pc, #40]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	f7fe fb55 	bl	800363c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f92:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d202      	bcs.n	8004fa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f9c:	4a09      	ldr	r2, [pc, #36]	; (8004fc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	6013      	str	r3, [r2, #0]
}
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20000560 	.word	0x20000560
 8004fb0:	2000045c 	.word	0x2000045c
 8004fb4:	20000564 	.word	0x20000564
 8004fb8:	20000548 	.word	0x20000548
 8004fbc:	20000518 	.word	0x20000518
 8004fc0:	20000514 	.word	0x20000514
 8004fc4:	2000057c 	.word	0x2000057c

08004fc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3b04      	subs	r3, #4
 8004fd8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3b04      	subs	r3, #4
 8004fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f023 0201 	bic.w	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3b04      	subs	r3, #4
 8004ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ff8:	4a08      	ldr	r2, [pc, #32]	; (800501c <pxPortInitialiseStack+0x54>)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3b14      	subs	r3, #20
 8005002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3b20      	subs	r3, #32
 800500e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005010:	68fb      	ldr	r3, [r7, #12]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr
 800501c:	08005021 	.word	0x08005021

08005020 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005026:	2300      	movs	r3, #0
 8005028:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800502a:	4b12      	ldr	r3, [pc, #72]	; (8005074 <prvTaskExitError+0x54>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005032:	d00a      	beq.n	800504a <prvTaskExitError+0x2a>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	60fb      	str	r3, [r7, #12]
}
 8005046:	bf00      	nop
 8005048:	e7fe      	b.n	8005048 <prvTaskExitError+0x28>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	60bb      	str	r3, [r7, #8]
}
 800505c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800505e:	bf00      	nop
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0fc      	beq.n	8005060 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005066:	bf00      	nop
 8005068:	bf00      	nop
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000014 	.word	0x20000014
	...

08005080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005080:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <pxCurrentTCBConst2>)
 8005082:	6819      	ldr	r1, [r3, #0]
 8005084:	6808      	ldr	r0, [r1, #0]
 8005086:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800508a:	f380 8809 	msr	PSP, r0
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f04f 0000 	mov.w	r0, #0
 8005096:	f380 8811 	msr	BASEPRI, r0
 800509a:	f04e 0e0d 	orr.w	lr, lr, #13
 800509e:	4770      	bx	lr

080050a0 <pxCurrentTCBConst2>:
 80050a0:	2000045c 	.word	0x2000045c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop

080050a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80050a8:	4806      	ldr	r0, [pc, #24]	; (80050c4 <prvPortStartFirstTask+0x1c>)
 80050aa:	6800      	ldr	r0, [r0, #0]
 80050ac:	6800      	ldr	r0, [r0, #0]
 80050ae:	f380 8808 	msr	MSP, r0
 80050b2:	b662      	cpsie	i
 80050b4:	b661      	cpsie	f
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	df00      	svc	0
 80050c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050c2:	bf00      	nop
 80050c4:	e000ed08 	.word	0xe000ed08

080050c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050ce:	4b32      	ldr	r3, [pc, #200]	; (8005198 <xPortStartScheduler+0xd0>)
 80050d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	22ff      	movs	r2, #255	; 0xff
 80050de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	4b2a      	ldr	r3, [pc, #168]	; (800519c <xPortStartScheduler+0xd4>)
 80050f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050f6:	4b2a      	ldr	r3, [pc, #168]	; (80051a0 <xPortStartScheduler+0xd8>)
 80050f8:	2207      	movs	r2, #7
 80050fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050fc:	e009      	b.n	8005112 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80050fe:	4b28      	ldr	r3, [pc, #160]	; (80051a0 <xPortStartScheduler+0xd8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3b01      	subs	r3, #1
 8005104:	4a26      	ldr	r2, [pc, #152]	; (80051a0 <xPortStartScheduler+0xd8>)
 8005106:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	b2db      	uxtb	r3, r3
 8005110:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511a:	2b80      	cmp	r3, #128	; 0x80
 800511c:	d0ef      	beq.n	80050fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800511e:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <xPortStartScheduler+0xd8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f1c3 0307 	rsb	r3, r3, #7
 8005126:	2b04      	cmp	r3, #4
 8005128:	d00a      	beq.n	8005140 <xPortStartScheduler+0x78>
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	60bb      	str	r3, [r7, #8]
}
 800513c:	bf00      	nop
 800513e:	e7fe      	b.n	800513e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005140:	4b17      	ldr	r3, [pc, #92]	; (80051a0 <xPortStartScheduler+0xd8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	021b      	lsls	r3, r3, #8
 8005146:	4a16      	ldr	r2, [pc, #88]	; (80051a0 <xPortStartScheduler+0xd8>)
 8005148:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800514a:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <xPortStartScheduler+0xd8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005152:	4a13      	ldr	r2, [pc, #76]	; (80051a0 <xPortStartScheduler+0xd8>)
 8005154:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	b2da      	uxtb	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800515e:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <xPortStartScheduler+0xdc>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a10      	ldr	r2, [pc, #64]	; (80051a4 <xPortStartScheduler+0xdc>)
 8005164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005168:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800516a:	4b0e      	ldr	r3, [pc, #56]	; (80051a4 <xPortStartScheduler+0xdc>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a0d      	ldr	r2, [pc, #52]	; (80051a4 <xPortStartScheduler+0xdc>)
 8005170:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005174:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005176:	f000 f8b9 	bl	80052ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800517a:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <xPortStartScheduler+0xe0>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005180:	f7ff ff92 	bl	80050a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005184:	f7ff fa9e 	bl	80046c4 <vTaskSwitchContext>
	prvTaskExitError();
 8005188:	f7ff ff4a 	bl	8005020 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	e000e400 	.word	0xe000e400
 800519c:	20000588 	.word	0x20000588
 80051a0:	2000058c 	.word	0x2000058c
 80051a4:	e000ed20 	.word	0xe000ed20
 80051a8:	20000014 	.word	0x20000014

080051ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	607b      	str	r3, [r7, #4]
}
 80051c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051c6:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <vPortEnterCritical+0x58>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3301      	adds	r3, #1
 80051cc:	4a0d      	ldr	r2, [pc, #52]	; (8005204 <vPortEnterCritical+0x58>)
 80051ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051d0:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <vPortEnterCritical+0x58>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d10f      	bne.n	80051f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051d8:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <vPortEnterCritical+0x5c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80051e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	603b      	str	r3, [r7, #0]
}
 80051f4:	bf00      	nop
 80051f6:	e7fe      	b.n	80051f6 <vPortEnterCritical+0x4a>
	}
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	20000014 	.word	0x20000014
 8005208:	e000ed04 	.word	0xe000ed04

0800520c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005212:	4b11      	ldr	r3, [pc, #68]	; (8005258 <vPortExitCritical+0x4c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10a      	bne.n	8005230 <vPortExitCritical+0x24>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	607b      	str	r3, [r7, #4]
}
 800522c:	bf00      	nop
 800522e:	e7fe      	b.n	800522e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005230:	4b09      	ldr	r3, [pc, #36]	; (8005258 <vPortExitCritical+0x4c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3b01      	subs	r3, #1
 8005236:	4a08      	ldr	r2, [pc, #32]	; (8005258 <vPortExitCritical+0x4c>)
 8005238:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800523a:	4b07      	ldr	r3, [pc, #28]	; (8005258 <vPortExitCritical+0x4c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d105      	bne.n	800524e <vPortExitCritical+0x42>
 8005242:	2300      	movs	r3, #0
 8005244:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800524c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr
 8005258:	20000014 	.word	0x20000014
 800525c:	00000000 	.word	0x00000000

08005260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005260:	f3ef 8009 	mrs	r0, PSP
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	4b0d      	ldr	r3, [pc, #52]	; (80052a0 <pxCurrentTCBConst>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005270:	6010      	str	r0, [r2, #0]
 8005272:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005276:	f04f 0050 	mov.w	r0, #80	; 0x50
 800527a:	f380 8811 	msr	BASEPRI, r0
 800527e:	f7ff fa21 	bl	80046c4 <vTaskSwitchContext>
 8005282:	f04f 0000 	mov.w	r0, #0
 8005286:	f380 8811 	msr	BASEPRI, r0
 800528a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800528e:	6819      	ldr	r1, [r3, #0]
 8005290:	6808      	ldr	r0, [r1, #0]
 8005292:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005296:	f380 8809 	msr	PSP, r0
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	4770      	bx	lr

080052a0 <pxCurrentTCBConst>:
 80052a0:	2000045c 	.word	0x2000045c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop

080052a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	607b      	str	r3, [r7, #4]
}
 80052c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052c2:	f7ff f941 	bl	8004548 <xTaskIncrementTick>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <xPortSysTickHandler+0x40>)
 80052ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	2300      	movs	r3, #0
 80052d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	f383 8811 	msr	BASEPRI, r3
}
 80052de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052e0:	bf00      	nop
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	e000ed04 	.word	0xe000ed04

080052ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052f0:	4b0a      	ldr	r3, [pc, #40]	; (800531c <vPortSetupTimerInterrupt+0x30>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052f6:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <vPortSetupTimerInterrupt+0x34>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052fc:	4b09      	ldr	r3, [pc, #36]	; (8005324 <vPortSetupTimerInterrupt+0x38>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a09      	ldr	r2, [pc, #36]	; (8005328 <vPortSetupTimerInterrupt+0x3c>)
 8005302:	fba2 2303 	umull	r2, r3, r2, r3
 8005306:	099b      	lsrs	r3, r3, #6
 8005308:	4a08      	ldr	r2, [pc, #32]	; (800532c <vPortSetupTimerInterrupt+0x40>)
 800530a:	3b01      	subs	r3, #1
 800530c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800530e:	4b03      	ldr	r3, [pc, #12]	; (800531c <vPortSetupTimerInterrupt+0x30>)
 8005310:	2207      	movs	r2, #7
 8005312:	601a      	str	r2, [r3, #0]
}
 8005314:	bf00      	nop
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr
 800531c:	e000e010 	.word	0xe000e010
 8005320:	e000e018 	.word	0xe000e018
 8005324:	20000008 	.word	0x20000008
 8005328:	10624dd3 	.word	0x10624dd3
 800532c:	e000e014 	.word	0xe000e014

08005330 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	; 0x28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005338:	2300      	movs	r3, #0
 800533a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800533c:	f7ff f84c 	bl	80043d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005340:	4b58      	ldr	r3, [pc, #352]	; (80054a4 <pvPortMalloc+0x174>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005348:	f000 f910 	bl	800556c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800534c:	4b56      	ldr	r3, [pc, #344]	; (80054a8 <pvPortMalloc+0x178>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4013      	ands	r3, r2
 8005354:	2b00      	cmp	r3, #0
 8005356:	f040 808e 	bne.w	8005476 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01d      	beq.n	800539c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005360:	2208      	movs	r2, #8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4413      	add	r3, r2
 8005366:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	2b00      	cmp	r3, #0
 8005370:	d014      	beq.n	800539c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f023 0307 	bic.w	r3, r3, #7
 8005378:	3308      	adds	r3, #8
 800537a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <pvPortMalloc+0x6c>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	617b      	str	r3, [r7, #20]
}
 8005398:	bf00      	nop
 800539a:	e7fe      	b.n	800539a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d069      	beq.n	8005476 <pvPortMalloc+0x146>
 80053a2:	4b42      	ldr	r3, [pc, #264]	; (80054ac <pvPortMalloc+0x17c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d864      	bhi.n	8005476 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053ac:	4b40      	ldr	r3, [pc, #256]	; (80054b0 <pvPortMalloc+0x180>)
 80053ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053b0:	4b3f      	ldr	r3, [pc, #252]	; (80054b0 <pvPortMalloc+0x180>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053b6:	e004      	b.n	80053c2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d903      	bls.n	80053d4 <pvPortMalloc+0xa4>
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1f1      	bne.n	80053b8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053d4:	4b33      	ldr	r3, [pc, #204]	; (80054a4 <pvPortMalloc+0x174>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053da:	429a      	cmp	r2, r3
 80053dc:	d04b      	beq.n	8005476 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2208      	movs	r2, #8
 80053e4:	4413      	add	r3, r2
 80053e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	1ad2      	subs	r2, r2, r3
 80053f8:	2308      	movs	r3, #8
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d91f      	bls.n	8005440 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4413      	add	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <pvPortMalloc+0xf8>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	613b      	str	r3, [r7, #16]
}
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	1ad2      	subs	r2, r2, r3
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800543a:	69b8      	ldr	r0, [r7, #24]
 800543c:	f000 f8f8 	bl	8005630 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005440:	4b1a      	ldr	r3, [pc, #104]	; (80054ac <pvPortMalloc+0x17c>)
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	4a18      	ldr	r2, [pc, #96]	; (80054ac <pvPortMalloc+0x17c>)
 800544c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800544e:	4b17      	ldr	r3, [pc, #92]	; (80054ac <pvPortMalloc+0x17c>)
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	4b18      	ldr	r3, [pc, #96]	; (80054b4 <pvPortMalloc+0x184>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d203      	bcs.n	8005462 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800545a:	4b14      	ldr	r3, [pc, #80]	; (80054ac <pvPortMalloc+0x17c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a15      	ldr	r2, [pc, #84]	; (80054b4 <pvPortMalloc+0x184>)
 8005460:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	4b10      	ldr	r3, [pc, #64]	; (80054a8 <pvPortMalloc+0x178>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	431a      	orrs	r2, r3
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005476:	f7fe ffbd 	bl	80043f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <pvPortMalloc+0x16a>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	60fb      	str	r3, [r7, #12]
}
 8005496:	bf00      	nop
 8005498:	e7fe      	b.n	8005498 <pvPortMalloc+0x168>
	return pvReturn;
 800549a:	69fb      	ldr	r3, [r7, #28]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3728      	adds	r7, #40	; 0x28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	20001198 	.word	0x20001198
 80054a8:	200011a4 	.word	0x200011a4
 80054ac:	2000119c 	.word	0x2000119c
 80054b0:	20001190 	.word	0x20001190
 80054b4:	200011a0 	.word	0x200011a0

080054b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d048      	beq.n	800555c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054ca:	2308      	movs	r3, #8
 80054cc:	425b      	negs	r3, r3
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4413      	add	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	4b21      	ldr	r3, [pc, #132]	; (8005564 <vPortFree+0xac>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4013      	ands	r3, r2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10a      	bne.n	80054fc <vPortFree+0x44>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	60fb      	str	r3, [r7, #12]
}
 80054f8:	bf00      	nop
 80054fa:	e7fe      	b.n	80054fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00a      	beq.n	800551a <vPortFree+0x62>
	__asm volatile
 8005504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	60bb      	str	r3, [r7, #8]
}
 8005516:	bf00      	nop
 8005518:	e7fe      	b.n	8005518 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	4b11      	ldr	r3, [pc, #68]	; (8005564 <vPortFree+0xac>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4013      	ands	r3, r2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d019      	beq.n	800555c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d115      	bne.n	800555c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <vPortFree+0xac>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	43db      	mvns	r3, r3
 800553a:	401a      	ands	r2, r3
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005540:	f7fe ff4a 	bl	80043d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	4b07      	ldr	r3, [pc, #28]	; (8005568 <vPortFree+0xb0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4413      	add	r3, r2
 800554e:	4a06      	ldr	r2, [pc, #24]	; (8005568 <vPortFree+0xb0>)
 8005550:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005552:	6938      	ldr	r0, [r7, #16]
 8005554:	f000 f86c 	bl	8005630 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005558:	f7fe ff4c 	bl	80043f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800555c:	bf00      	nop
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	200011a4 	.word	0x200011a4
 8005568:	2000119c 	.word	0x2000119c

0800556c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005572:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005576:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005578:	4b27      	ldr	r3, [pc, #156]	; (8005618 <prvHeapInit+0xac>)
 800557a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00c      	beq.n	80055a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3307      	adds	r3, #7
 800558a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0307 	bic.w	r3, r3, #7
 8005592:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	4a1f      	ldr	r2, [pc, #124]	; (8005618 <prvHeapInit+0xac>)
 800559c:	4413      	add	r3, r2
 800559e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055a4:	4a1d      	ldr	r2, [pc, #116]	; (800561c <prvHeapInit+0xb0>)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055aa:	4b1c      	ldr	r3, [pc, #112]	; (800561c <prvHeapInit+0xb0>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	4413      	add	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055b8:	2208      	movs	r2, #8
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0307 	bic.w	r3, r3, #7
 80055c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4a15      	ldr	r2, [pc, #84]	; (8005620 <prvHeapInit+0xb4>)
 80055cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055ce:	4b14      	ldr	r3, [pc, #80]	; (8005620 <prvHeapInit+0xb4>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2200      	movs	r2, #0
 80055d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055d6:	4b12      	ldr	r3, [pc, #72]	; (8005620 <prvHeapInit+0xb4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	1ad2      	subs	r2, r2, r3
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055ec:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <prvHeapInit+0xb4>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	4a0a      	ldr	r2, [pc, #40]	; (8005624 <prvHeapInit+0xb8>)
 80055fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4a09      	ldr	r2, [pc, #36]	; (8005628 <prvHeapInit+0xbc>)
 8005602:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005604:	4b09      	ldr	r3, [pc, #36]	; (800562c <prvHeapInit+0xc0>)
 8005606:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800560a:	601a      	str	r2, [r3, #0]
}
 800560c:	bf00      	nop
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	20000590 	.word	0x20000590
 800561c:	20001190 	.word	0x20001190
 8005620:	20001198 	.word	0x20001198
 8005624:	200011a0 	.word	0x200011a0
 8005628:	2000119c 	.word	0x2000119c
 800562c:	200011a4 	.word	0x200011a4

08005630 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005638:	4b27      	ldr	r3, [pc, #156]	; (80056d8 <prvInsertBlockIntoFreeList+0xa8>)
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	e002      	b.n	8005644 <prvInsertBlockIntoFreeList+0x14>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	429a      	cmp	r2, r3
 800564c:	d8f7      	bhi.n	800563e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	4413      	add	r3, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	429a      	cmp	r2, r3
 800565e:	d108      	bne.n	8005672 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	441a      	add	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	441a      	add	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	429a      	cmp	r2, r3
 8005684:	d118      	bne.n	80056b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4b14      	ldr	r3, [pc, #80]	; (80056dc <prvInsertBlockIntoFreeList+0xac>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d00d      	beq.n	80056ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	441a      	add	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e008      	b.n	80056c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <prvInsertBlockIntoFreeList+0xac>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	e003      	b.n	80056c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d002      	beq.n	80056ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056ce:	bf00      	nop
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr
 80056d8:	20001190 	.word	0x20001190
 80056dc:	20001198 	.word	0x20001198

080056e0 <siprintf>:
 80056e0:	b40e      	push	{r1, r2, r3}
 80056e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056e6:	b500      	push	{lr}
 80056e8:	b09c      	sub	sp, #112	; 0x70
 80056ea:	ab1d      	add	r3, sp, #116	; 0x74
 80056ec:	9002      	str	r0, [sp, #8]
 80056ee:	9006      	str	r0, [sp, #24]
 80056f0:	9107      	str	r1, [sp, #28]
 80056f2:	9104      	str	r1, [sp, #16]
 80056f4:	4808      	ldr	r0, [pc, #32]	; (8005718 <siprintf+0x38>)
 80056f6:	4909      	ldr	r1, [pc, #36]	; (800571c <siprintf+0x3c>)
 80056f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80056fc:	9105      	str	r1, [sp, #20]
 80056fe:	6800      	ldr	r0, [r0, #0]
 8005700:	a902      	add	r1, sp, #8
 8005702:	9301      	str	r3, [sp, #4]
 8005704:	f000 f8a8 	bl	8005858 <_svfiprintf_r>
 8005708:	2200      	movs	r2, #0
 800570a:	9b02      	ldr	r3, [sp, #8]
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	b01c      	add	sp, #112	; 0x70
 8005710:	f85d eb04 	ldr.w	lr, [sp], #4
 8005714:	b003      	add	sp, #12
 8005716:	4770      	bx	lr
 8005718:	20000064 	.word	0x20000064
 800571c:	ffff0208 	.word	0xffff0208

08005720 <memset>:
 8005720:	4603      	mov	r3, r0
 8005722:	4402      	add	r2, r0
 8005724:	4293      	cmp	r3, r2
 8005726:	d100      	bne.n	800572a <memset+0xa>
 8005728:	4770      	bx	lr
 800572a:	f803 1b01 	strb.w	r1, [r3], #1
 800572e:	e7f9      	b.n	8005724 <memset+0x4>

08005730 <__errno>:
 8005730:	4b01      	ldr	r3, [pc, #4]	; (8005738 <__errno+0x8>)
 8005732:	6818      	ldr	r0, [r3, #0]
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	20000064 	.word	0x20000064

0800573c <__libc_init_array>:
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	2600      	movs	r6, #0
 8005740:	4d0c      	ldr	r5, [pc, #48]	; (8005774 <__libc_init_array+0x38>)
 8005742:	4c0d      	ldr	r4, [pc, #52]	; (8005778 <__libc_init_array+0x3c>)
 8005744:	1b64      	subs	r4, r4, r5
 8005746:	10a4      	asrs	r4, r4, #2
 8005748:	42a6      	cmp	r6, r4
 800574a:	d109      	bne.n	8005760 <__libc_init_array+0x24>
 800574c:	f000 fc7a 	bl	8006044 <_init>
 8005750:	2600      	movs	r6, #0
 8005752:	4d0a      	ldr	r5, [pc, #40]	; (800577c <__libc_init_array+0x40>)
 8005754:	4c0a      	ldr	r4, [pc, #40]	; (8005780 <__libc_init_array+0x44>)
 8005756:	1b64      	subs	r4, r4, r5
 8005758:	10a4      	asrs	r4, r4, #2
 800575a:	42a6      	cmp	r6, r4
 800575c:	d105      	bne.n	800576a <__libc_init_array+0x2e>
 800575e:	bd70      	pop	{r4, r5, r6, pc}
 8005760:	f855 3b04 	ldr.w	r3, [r5], #4
 8005764:	4798      	blx	r3
 8005766:	3601      	adds	r6, #1
 8005768:	e7ee      	b.n	8005748 <__libc_init_array+0xc>
 800576a:	f855 3b04 	ldr.w	r3, [r5], #4
 800576e:	4798      	blx	r3
 8005770:	3601      	adds	r6, #1
 8005772:	e7f2      	b.n	800575a <__libc_init_array+0x1e>
 8005774:	08006138 	.word	0x08006138
 8005778:	08006138 	.word	0x08006138
 800577c:	08006138 	.word	0x08006138
 8005780:	0800613c 	.word	0x0800613c

08005784 <__retarget_lock_acquire_recursive>:
 8005784:	4770      	bx	lr

08005786 <__retarget_lock_release_recursive>:
 8005786:	4770      	bx	lr

08005788 <memcpy>:
 8005788:	440a      	add	r2, r1
 800578a:	4291      	cmp	r1, r2
 800578c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005790:	d100      	bne.n	8005794 <memcpy+0xc>
 8005792:	4770      	bx	lr
 8005794:	b510      	push	{r4, lr}
 8005796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800579a:	4291      	cmp	r1, r2
 800579c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057a0:	d1f9      	bne.n	8005796 <memcpy+0xe>
 80057a2:	bd10      	pop	{r4, pc}

080057a4 <__ssputs_r>:
 80057a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a8:	461f      	mov	r7, r3
 80057aa:	688e      	ldr	r6, [r1, #8]
 80057ac:	4682      	mov	sl, r0
 80057ae:	42be      	cmp	r6, r7
 80057b0:	460c      	mov	r4, r1
 80057b2:	4690      	mov	r8, r2
 80057b4:	680b      	ldr	r3, [r1, #0]
 80057b6:	d82c      	bhi.n	8005812 <__ssputs_r+0x6e>
 80057b8:	898a      	ldrh	r2, [r1, #12]
 80057ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057be:	d026      	beq.n	800580e <__ssputs_r+0x6a>
 80057c0:	6965      	ldr	r5, [r4, #20]
 80057c2:	6909      	ldr	r1, [r1, #16]
 80057c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057c8:	eba3 0901 	sub.w	r9, r3, r1
 80057cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057d0:	1c7b      	adds	r3, r7, #1
 80057d2:	444b      	add	r3, r9
 80057d4:	106d      	asrs	r5, r5, #1
 80057d6:	429d      	cmp	r5, r3
 80057d8:	bf38      	it	cc
 80057da:	461d      	movcc	r5, r3
 80057dc:	0553      	lsls	r3, r2, #21
 80057de:	d527      	bpl.n	8005830 <__ssputs_r+0x8c>
 80057e0:	4629      	mov	r1, r5
 80057e2:	f000 f957 	bl	8005a94 <_malloc_r>
 80057e6:	4606      	mov	r6, r0
 80057e8:	b360      	cbz	r0, 8005844 <__ssputs_r+0xa0>
 80057ea:	464a      	mov	r2, r9
 80057ec:	6921      	ldr	r1, [r4, #16]
 80057ee:	f7ff ffcb 	bl	8005788 <memcpy>
 80057f2:	89a3      	ldrh	r3, [r4, #12]
 80057f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fc:	81a3      	strh	r3, [r4, #12]
 80057fe:	6126      	str	r6, [r4, #16]
 8005800:	444e      	add	r6, r9
 8005802:	6026      	str	r6, [r4, #0]
 8005804:	463e      	mov	r6, r7
 8005806:	6165      	str	r5, [r4, #20]
 8005808:	eba5 0509 	sub.w	r5, r5, r9
 800580c:	60a5      	str	r5, [r4, #8]
 800580e:	42be      	cmp	r6, r7
 8005810:	d900      	bls.n	8005814 <__ssputs_r+0x70>
 8005812:	463e      	mov	r6, r7
 8005814:	4632      	mov	r2, r6
 8005816:	4641      	mov	r1, r8
 8005818:	6820      	ldr	r0, [r4, #0]
 800581a:	f000 fb8a 	bl	8005f32 <memmove>
 800581e:	2000      	movs	r0, #0
 8005820:	68a3      	ldr	r3, [r4, #8]
 8005822:	1b9b      	subs	r3, r3, r6
 8005824:	60a3      	str	r3, [r4, #8]
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	4433      	add	r3, r6
 800582a:	6023      	str	r3, [r4, #0]
 800582c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005830:	462a      	mov	r2, r5
 8005832:	f000 fb4f 	bl	8005ed4 <_realloc_r>
 8005836:	4606      	mov	r6, r0
 8005838:	2800      	cmp	r0, #0
 800583a:	d1e0      	bne.n	80057fe <__ssputs_r+0x5a>
 800583c:	4650      	mov	r0, sl
 800583e:	6921      	ldr	r1, [r4, #16]
 8005840:	f000 fbb0 	bl	8005fa4 <_free_r>
 8005844:	230c      	movs	r3, #12
 8005846:	f8ca 3000 	str.w	r3, [sl]
 800584a:	89a3      	ldrh	r3, [r4, #12]
 800584c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005854:	81a3      	strh	r3, [r4, #12]
 8005856:	e7e9      	b.n	800582c <__ssputs_r+0x88>

08005858 <_svfiprintf_r>:
 8005858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800585c:	4698      	mov	r8, r3
 800585e:	898b      	ldrh	r3, [r1, #12]
 8005860:	4607      	mov	r7, r0
 8005862:	061b      	lsls	r3, r3, #24
 8005864:	460d      	mov	r5, r1
 8005866:	4614      	mov	r4, r2
 8005868:	b09d      	sub	sp, #116	; 0x74
 800586a:	d50e      	bpl.n	800588a <_svfiprintf_r+0x32>
 800586c:	690b      	ldr	r3, [r1, #16]
 800586e:	b963      	cbnz	r3, 800588a <_svfiprintf_r+0x32>
 8005870:	2140      	movs	r1, #64	; 0x40
 8005872:	f000 f90f 	bl	8005a94 <_malloc_r>
 8005876:	6028      	str	r0, [r5, #0]
 8005878:	6128      	str	r0, [r5, #16]
 800587a:	b920      	cbnz	r0, 8005886 <_svfiprintf_r+0x2e>
 800587c:	230c      	movs	r3, #12
 800587e:	603b      	str	r3, [r7, #0]
 8005880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005884:	e0d0      	b.n	8005a28 <_svfiprintf_r+0x1d0>
 8005886:	2340      	movs	r3, #64	; 0x40
 8005888:	616b      	str	r3, [r5, #20]
 800588a:	2300      	movs	r3, #0
 800588c:	9309      	str	r3, [sp, #36]	; 0x24
 800588e:	2320      	movs	r3, #32
 8005890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005894:	2330      	movs	r3, #48	; 0x30
 8005896:	f04f 0901 	mov.w	r9, #1
 800589a:	f8cd 800c 	str.w	r8, [sp, #12]
 800589e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005a40 <_svfiprintf_r+0x1e8>
 80058a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058a6:	4623      	mov	r3, r4
 80058a8:	469a      	mov	sl, r3
 80058aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058ae:	b10a      	cbz	r2, 80058b4 <_svfiprintf_r+0x5c>
 80058b0:	2a25      	cmp	r2, #37	; 0x25
 80058b2:	d1f9      	bne.n	80058a8 <_svfiprintf_r+0x50>
 80058b4:	ebba 0b04 	subs.w	fp, sl, r4
 80058b8:	d00b      	beq.n	80058d2 <_svfiprintf_r+0x7a>
 80058ba:	465b      	mov	r3, fp
 80058bc:	4622      	mov	r2, r4
 80058be:	4629      	mov	r1, r5
 80058c0:	4638      	mov	r0, r7
 80058c2:	f7ff ff6f 	bl	80057a4 <__ssputs_r>
 80058c6:	3001      	adds	r0, #1
 80058c8:	f000 80a9 	beq.w	8005a1e <_svfiprintf_r+0x1c6>
 80058cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058ce:	445a      	add	r2, fp
 80058d0:	9209      	str	r2, [sp, #36]	; 0x24
 80058d2:	f89a 3000 	ldrb.w	r3, [sl]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 80a1 	beq.w	8005a1e <_svfiprintf_r+0x1c6>
 80058dc:	2300      	movs	r3, #0
 80058de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058e6:	f10a 0a01 	add.w	sl, sl, #1
 80058ea:	9304      	str	r3, [sp, #16]
 80058ec:	9307      	str	r3, [sp, #28]
 80058ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058f2:	931a      	str	r3, [sp, #104]	; 0x68
 80058f4:	4654      	mov	r4, sl
 80058f6:	2205      	movs	r2, #5
 80058f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058fc:	4850      	ldr	r0, [pc, #320]	; (8005a40 <_svfiprintf_r+0x1e8>)
 80058fe:	f000 fb43 	bl	8005f88 <memchr>
 8005902:	9a04      	ldr	r2, [sp, #16]
 8005904:	b9d8      	cbnz	r0, 800593e <_svfiprintf_r+0xe6>
 8005906:	06d0      	lsls	r0, r2, #27
 8005908:	bf44      	itt	mi
 800590a:	2320      	movmi	r3, #32
 800590c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005910:	0711      	lsls	r1, r2, #28
 8005912:	bf44      	itt	mi
 8005914:	232b      	movmi	r3, #43	; 0x2b
 8005916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800591a:	f89a 3000 	ldrb.w	r3, [sl]
 800591e:	2b2a      	cmp	r3, #42	; 0x2a
 8005920:	d015      	beq.n	800594e <_svfiprintf_r+0xf6>
 8005922:	4654      	mov	r4, sl
 8005924:	2000      	movs	r0, #0
 8005926:	f04f 0c0a 	mov.w	ip, #10
 800592a:	9a07      	ldr	r2, [sp, #28]
 800592c:	4621      	mov	r1, r4
 800592e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005932:	3b30      	subs	r3, #48	; 0x30
 8005934:	2b09      	cmp	r3, #9
 8005936:	d94d      	bls.n	80059d4 <_svfiprintf_r+0x17c>
 8005938:	b1b0      	cbz	r0, 8005968 <_svfiprintf_r+0x110>
 800593a:	9207      	str	r2, [sp, #28]
 800593c:	e014      	b.n	8005968 <_svfiprintf_r+0x110>
 800593e:	eba0 0308 	sub.w	r3, r0, r8
 8005942:	fa09 f303 	lsl.w	r3, r9, r3
 8005946:	4313      	orrs	r3, r2
 8005948:	46a2      	mov	sl, r4
 800594a:	9304      	str	r3, [sp, #16]
 800594c:	e7d2      	b.n	80058f4 <_svfiprintf_r+0x9c>
 800594e:	9b03      	ldr	r3, [sp, #12]
 8005950:	1d19      	adds	r1, r3, #4
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	9103      	str	r1, [sp, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	bfbb      	ittet	lt
 800595a:	425b      	neglt	r3, r3
 800595c:	f042 0202 	orrlt.w	r2, r2, #2
 8005960:	9307      	strge	r3, [sp, #28]
 8005962:	9307      	strlt	r3, [sp, #28]
 8005964:	bfb8      	it	lt
 8005966:	9204      	strlt	r2, [sp, #16]
 8005968:	7823      	ldrb	r3, [r4, #0]
 800596a:	2b2e      	cmp	r3, #46	; 0x2e
 800596c:	d10c      	bne.n	8005988 <_svfiprintf_r+0x130>
 800596e:	7863      	ldrb	r3, [r4, #1]
 8005970:	2b2a      	cmp	r3, #42	; 0x2a
 8005972:	d134      	bne.n	80059de <_svfiprintf_r+0x186>
 8005974:	9b03      	ldr	r3, [sp, #12]
 8005976:	3402      	adds	r4, #2
 8005978:	1d1a      	adds	r2, r3, #4
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	9203      	str	r2, [sp, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	bfb8      	it	lt
 8005982:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005986:	9305      	str	r3, [sp, #20]
 8005988:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005a44 <_svfiprintf_r+0x1ec>
 800598c:	2203      	movs	r2, #3
 800598e:	4650      	mov	r0, sl
 8005990:	7821      	ldrb	r1, [r4, #0]
 8005992:	f000 faf9 	bl	8005f88 <memchr>
 8005996:	b138      	cbz	r0, 80059a8 <_svfiprintf_r+0x150>
 8005998:	2240      	movs	r2, #64	; 0x40
 800599a:	9b04      	ldr	r3, [sp, #16]
 800599c:	eba0 000a 	sub.w	r0, r0, sl
 80059a0:	4082      	lsls	r2, r0
 80059a2:	4313      	orrs	r3, r2
 80059a4:	3401      	adds	r4, #1
 80059a6:	9304      	str	r3, [sp, #16]
 80059a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ac:	2206      	movs	r2, #6
 80059ae:	4826      	ldr	r0, [pc, #152]	; (8005a48 <_svfiprintf_r+0x1f0>)
 80059b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059b4:	f000 fae8 	bl	8005f88 <memchr>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d038      	beq.n	8005a2e <_svfiprintf_r+0x1d6>
 80059bc:	4b23      	ldr	r3, [pc, #140]	; (8005a4c <_svfiprintf_r+0x1f4>)
 80059be:	bb1b      	cbnz	r3, 8005a08 <_svfiprintf_r+0x1b0>
 80059c0:	9b03      	ldr	r3, [sp, #12]
 80059c2:	3307      	adds	r3, #7
 80059c4:	f023 0307 	bic.w	r3, r3, #7
 80059c8:	3308      	adds	r3, #8
 80059ca:	9303      	str	r3, [sp, #12]
 80059cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ce:	4433      	add	r3, r6
 80059d0:	9309      	str	r3, [sp, #36]	; 0x24
 80059d2:	e768      	b.n	80058a6 <_svfiprintf_r+0x4e>
 80059d4:	460c      	mov	r4, r1
 80059d6:	2001      	movs	r0, #1
 80059d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80059dc:	e7a6      	b.n	800592c <_svfiprintf_r+0xd4>
 80059de:	2300      	movs	r3, #0
 80059e0:	f04f 0c0a 	mov.w	ip, #10
 80059e4:	4619      	mov	r1, r3
 80059e6:	3401      	adds	r4, #1
 80059e8:	9305      	str	r3, [sp, #20]
 80059ea:	4620      	mov	r0, r4
 80059ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059f0:	3a30      	subs	r2, #48	; 0x30
 80059f2:	2a09      	cmp	r2, #9
 80059f4:	d903      	bls.n	80059fe <_svfiprintf_r+0x1a6>
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0c6      	beq.n	8005988 <_svfiprintf_r+0x130>
 80059fa:	9105      	str	r1, [sp, #20]
 80059fc:	e7c4      	b.n	8005988 <_svfiprintf_r+0x130>
 80059fe:	4604      	mov	r4, r0
 8005a00:	2301      	movs	r3, #1
 8005a02:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a06:	e7f0      	b.n	80059ea <_svfiprintf_r+0x192>
 8005a08:	ab03      	add	r3, sp, #12
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	462a      	mov	r2, r5
 8005a0e:	4638      	mov	r0, r7
 8005a10:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <_svfiprintf_r+0x1f8>)
 8005a12:	a904      	add	r1, sp, #16
 8005a14:	f3af 8000 	nop.w
 8005a18:	1c42      	adds	r2, r0, #1
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	d1d6      	bne.n	80059cc <_svfiprintf_r+0x174>
 8005a1e:	89ab      	ldrh	r3, [r5, #12]
 8005a20:	065b      	lsls	r3, r3, #25
 8005a22:	f53f af2d 	bmi.w	8005880 <_svfiprintf_r+0x28>
 8005a26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a28:	b01d      	add	sp, #116	; 0x74
 8005a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a2e:	ab03      	add	r3, sp, #12
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	462a      	mov	r2, r5
 8005a34:	4638      	mov	r0, r7
 8005a36:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <_svfiprintf_r+0x1f8>)
 8005a38:	a904      	add	r1, sp, #16
 8005a3a:	f000 f91d 	bl	8005c78 <_printf_i>
 8005a3e:	e7eb      	b.n	8005a18 <_svfiprintf_r+0x1c0>
 8005a40:	08006102 	.word	0x08006102
 8005a44:	08006108 	.word	0x08006108
 8005a48:	0800610c 	.word	0x0800610c
 8005a4c:	00000000 	.word	0x00000000
 8005a50:	080057a5 	.word	0x080057a5

08005a54 <sbrk_aligned>:
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	4e0e      	ldr	r6, [pc, #56]	; (8005a90 <sbrk_aligned+0x3c>)
 8005a58:	460c      	mov	r4, r1
 8005a5a:	6831      	ldr	r1, [r6, #0]
 8005a5c:	4605      	mov	r5, r0
 8005a5e:	b911      	cbnz	r1, 8005a66 <sbrk_aligned+0x12>
 8005a60:	f000 fa82 	bl	8005f68 <_sbrk_r>
 8005a64:	6030      	str	r0, [r6, #0]
 8005a66:	4621      	mov	r1, r4
 8005a68:	4628      	mov	r0, r5
 8005a6a:	f000 fa7d 	bl	8005f68 <_sbrk_r>
 8005a6e:	1c43      	adds	r3, r0, #1
 8005a70:	d00a      	beq.n	8005a88 <sbrk_aligned+0x34>
 8005a72:	1cc4      	adds	r4, r0, #3
 8005a74:	f024 0403 	bic.w	r4, r4, #3
 8005a78:	42a0      	cmp	r0, r4
 8005a7a:	d007      	beq.n	8005a8c <sbrk_aligned+0x38>
 8005a7c:	1a21      	subs	r1, r4, r0
 8005a7e:	4628      	mov	r0, r5
 8005a80:	f000 fa72 	bl	8005f68 <_sbrk_r>
 8005a84:	3001      	adds	r0, #1
 8005a86:	d101      	bne.n	8005a8c <sbrk_aligned+0x38>
 8005a88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	bd70      	pop	{r4, r5, r6, pc}
 8005a90:	200012e8 	.word	0x200012e8

08005a94 <_malloc_r>:
 8005a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a98:	1ccd      	adds	r5, r1, #3
 8005a9a:	f025 0503 	bic.w	r5, r5, #3
 8005a9e:	3508      	adds	r5, #8
 8005aa0:	2d0c      	cmp	r5, #12
 8005aa2:	bf38      	it	cc
 8005aa4:	250c      	movcc	r5, #12
 8005aa6:	2d00      	cmp	r5, #0
 8005aa8:	4607      	mov	r7, r0
 8005aaa:	db01      	blt.n	8005ab0 <_malloc_r+0x1c>
 8005aac:	42a9      	cmp	r1, r5
 8005aae:	d905      	bls.n	8005abc <_malloc_r+0x28>
 8005ab0:	230c      	movs	r3, #12
 8005ab2:	2600      	movs	r6, #0
 8005ab4:	603b      	str	r3, [r7, #0]
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005abc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005b90 <_malloc_r+0xfc>
 8005ac0:	f000 f9fc 	bl	8005ebc <__malloc_lock>
 8005ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ac8:	461c      	mov	r4, r3
 8005aca:	bb5c      	cbnz	r4, 8005b24 <_malloc_r+0x90>
 8005acc:	4629      	mov	r1, r5
 8005ace:	4638      	mov	r0, r7
 8005ad0:	f7ff ffc0 	bl	8005a54 <sbrk_aligned>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	d155      	bne.n	8005b86 <_malloc_r+0xf2>
 8005ada:	f8d8 4000 	ldr.w	r4, [r8]
 8005ade:	4626      	mov	r6, r4
 8005ae0:	2e00      	cmp	r6, #0
 8005ae2:	d145      	bne.n	8005b70 <_malloc_r+0xdc>
 8005ae4:	2c00      	cmp	r4, #0
 8005ae6:	d048      	beq.n	8005b7a <_malloc_r+0xe6>
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	4631      	mov	r1, r6
 8005aec:	4638      	mov	r0, r7
 8005aee:	eb04 0903 	add.w	r9, r4, r3
 8005af2:	f000 fa39 	bl	8005f68 <_sbrk_r>
 8005af6:	4581      	cmp	r9, r0
 8005af8:	d13f      	bne.n	8005b7a <_malloc_r+0xe6>
 8005afa:	6821      	ldr	r1, [r4, #0]
 8005afc:	4638      	mov	r0, r7
 8005afe:	1a6d      	subs	r5, r5, r1
 8005b00:	4629      	mov	r1, r5
 8005b02:	f7ff ffa7 	bl	8005a54 <sbrk_aligned>
 8005b06:	3001      	adds	r0, #1
 8005b08:	d037      	beq.n	8005b7a <_malloc_r+0xe6>
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	442b      	add	r3, r5
 8005b0e:	6023      	str	r3, [r4, #0]
 8005b10:	f8d8 3000 	ldr.w	r3, [r8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d038      	beq.n	8005b8a <_malloc_r+0xf6>
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	42a2      	cmp	r2, r4
 8005b1c:	d12b      	bne.n	8005b76 <_malloc_r+0xe2>
 8005b1e:	2200      	movs	r2, #0
 8005b20:	605a      	str	r2, [r3, #4]
 8005b22:	e00f      	b.n	8005b44 <_malloc_r+0xb0>
 8005b24:	6822      	ldr	r2, [r4, #0]
 8005b26:	1b52      	subs	r2, r2, r5
 8005b28:	d41f      	bmi.n	8005b6a <_malloc_r+0xd6>
 8005b2a:	2a0b      	cmp	r2, #11
 8005b2c:	d917      	bls.n	8005b5e <_malloc_r+0xca>
 8005b2e:	1961      	adds	r1, r4, r5
 8005b30:	42a3      	cmp	r3, r4
 8005b32:	6025      	str	r5, [r4, #0]
 8005b34:	bf18      	it	ne
 8005b36:	6059      	strne	r1, [r3, #4]
 8005b38:	6863      	ldr	r3, [r4, #4]
 8005b3a:	bf08      	it	eq
 8005b3c:	f8c8 1000 	streq.w	r1, [r8]
 8005b40:	5162      	str	r2, [r4, r5]
 8005b42:	604b      	str	r3, [r1, #4]
 8005b44:	4638      	mov	r0, r7
 8005b46:	f104 060b 	add.w	r6, r4, #11
 8005b4a:	f000 f9bd 	bl	8005ec8 <__malloc_unlock>
 8005b4e:	f026 0607 	bic.w	r6, r6, #7
 8005b52:	1d23      	adds	r3, r4, #4
 8005b54:	1af2      	subs	r2, r6, r3
 8005b56:	d0ae      	beq.n	8005ab6 <_malloc_r+0x22>
 8005b58:	1b9b      	subs	r3, r3, r6
 8005b5a:	50a3      	str	r3, [r4, r2]
 8005b5c:	e7ab      	b.n	8005ab6 <_malloc_r+0x22>
 8005b5e:	42a3      	cmp	r3, r4
 8005b60:	6862      	ldr	r2, [r4, #4]
 8005b62:	d1dd      	bne.n	8005b20 <_malloc_r+0x8c>
 8005b64:	f8c8 2000 	str.w	r2, [r8]
 8005b68:	e7ec      	b.n	8005b44 <_malloc_r+0xb0>
 8005b6a:	4623      	mov	r3, r4
 8005b6c:	6864      	ldr	r4, [r4, #4]
 8005b6e:	e7ac      	b.n	8005aca <_malloc_r+0x36>
 8005b70:	4634      	mov	r4, r6
 8005b72:	6876      	ldr	r6, [r6, #4]
 8005b74:	e7b4      	b.n	8005ae0 <_malloc_r+0x4c>
 8005b76:	4613      	mov	r3, r2
 8005b78:	e7cc      	b.n	8005b14 <_malloc_r+0x80>
 8005b7a:	230c      	movs	r3, #12
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	603b      	str	r3, [r7, #0]
 8005b80:	f000 f9a2 	bl	8005ec8 <__malloc_unlock>
 8005b84:	e797      	b.n	8005ab6 <_malloc_r+0x22>
 8005b86:	6025      	str	r5, [r4, #0]
 8005b88:	e7dc      	b.n	8005b44 <_malloc_r+0xb0>
 8005b8a:	605b      	str	r3, [r3, #4]
 8005b8c:	deff      	udf	#255	; 0xff
 8005b8e:	bf00      	nop
 8005b90:	200012e4 	.word	0x200012e4

08005b94 <_printf_common>:
 8005b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b98:	4616      	mov	r6, r2
 8005b9a:	4699      	mov	r9, r3
 8005b9c:	688a      	ldr	r2, [r1, #8]
 8005b9e:	690b      	ldr	r3, [r1, #16]
 8005ba0:	4607      	mov	r7, r0
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	bfb8      	it	lt
 8005ba6:	4613      	movlt	r3, r2
 8005ba8:	6033      	str	r3, [r6, #0]
 8005baa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bae:	460c      	mov	r4, r1
 8005bb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bb4:	b10a      	cbz	r2, 8005bba <_printf_common+0x26>
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	6033      	str	r3, [r6, #0]
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	0699      	lsls	r1, r3, #26
 8005bbe:	bf42      	ittt	mi
 8005bc0:	6833      	ldrmi	r3, [r6, #0]
 8005bc2:	3302      	addmi	r3, #2
 8005bc4:	6033      	strmi	r3, [r6, #0]
 8005bc6:	6825      	ldr	r5, [r4, #0]
 8005bc8:	f015 0506 	ands.w	r5, r5, #6
 8005bcc:	d106      	bne.n	8005bdc <_printf_common+0x48>
 8005bce:	f104 0a19 	add.w	sl, r4, #25
 8005bd2:	68e3      	ldr	r3, [r4, #12]
 8005bd4:	6832      	ldr	r2, [r6, #0]
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	42ab      	cmp	r3, r5
 8005bda:	dc2b      	bgt.n	8005c34 <_printf_common+0xa0>
 8005bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005be0:	1e13      	subs	r3, r2, #0
 8005be2:	6822      	ldr	r2, [r4, #0]
 8005be4:	bf18      	it	ne
 8005be6:	2301      	movne	r3, #1
 8005be8:	0692      	lsls	r2, r2, #26
 8005bea:	d430      	bmi.n	8005c4e <_printf_common+0xba>
 8005bec:	4649      	mov	r1, r9
 8005bee:	4638      	mov	r0, r7
 8005bf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bf4:	47c0      	blx	r8
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	d023      	beq.n	8005c42 <_printf_common+0xae>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	6922      	ldr	r2, [r4, #16]
 8005bfe:	f003 0306 	and.w	r3, r3, #6
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	bf14      	ite	ne
 8005c06:	2500      	movne	r5, #0
 8005c08:	6833      	ldreq	r3, [r6, #0]
 8005c0a:	f04f 0600 	mov.w	r6, #0
 8005c0e:	bf08      	it	eq
 8005c10:	68e5      	ldreq	r5, [r4, #12]
 8005c12:	f104 041a 	add.w	r4, r4, #26
 8005c16:	bf08      	it	eq
 8005c18:	1aed      	subeq	r5, r5, r3
 8005c1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005c1e:	bf08      	it	eq
 8005c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c24:	4293      	cmp	r3, r2
 8005c26:	bfc4      	itt	gt
 8005c28:	1a9b      	subgt	r3, r3, r2
 8005c2a:	18ed      	addgt	r5, r5, r3
 8005c2c:	42b5      	cmp	r5, r6
 8005c2e:	d11a      	bne.n	8005c66 <_printf_common+0xd2>
 8005c30:	2000      	movs	r0, #0
 8005c32:	e008      	b.n	8005c46 <_printf_common+0xb2>
 8005c34:	2301      	movs	r3, #1
 8005c36:	4652      	mov	r2, sl
 8005c38:	4649      	mov	r1, r9
 8005c3a:	4638      	mov	r0, r7
 8005c3c:	47c0      	blx	r8
 8005c3e:	3001      	adds	r0, #1
 8005c40:	d103      	bne.n	8005c4a <_printf_common+0xb6>
 8005c42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c4a:	3501      	adds	r5, #1
 8005c4c:	e7c1      	b.n	8005bd2 <_printf_common+0x3e>
 8005c4e:	2030      	movs	r0, #48	; 0x30
 8005c50:	18e1      	adds	r1, r4, r3
 8005c52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c5c:	4422      	add	r2, r4
 8005c5e:	3302      	adds	r3, #2
 8005c60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c64:	e7c2      	b.n	8005bec <_printf_common+0x58>
 8005c66:	2301      	movs	r3, #1
 8005c68:	4622      	mov	r2, r4
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	47c0      	blx	r8
 8005c70:	3001      	adds	r0, #1
 8005c72:	d0e6      	beq.n	8005c42 <_printf_common+0xae>
 8005c74:	3601      	adds	r6, #1
 8005c76:	e7d9      	b.n	8005c2c <_printf_common+0x98>

08005c78 <_printf_i>:
 8005c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c7c:	7e0f      	ldrb	r7, [r1, #24]
 8005c7e:	4691      	mov	r9, r2
 8005c80:	2f78      	cmp	r7, #120	; 0x78
 8005c82:	4680      	mov	r8, r0
 8005c84:	460c      	mov	r4, r1
 8005c86:	469a      	mov	sl, r3
 8005c88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c8e:	d807      	bhi.n	8005ca0 <_printf_i+0x28>
 8005c90:	2f62      	cmp	r7, #98	; 0x62
 8005c92:	d80a      	bhi.n	8005caa <_printf_i+0x32>
 8005c94:	2f00      	cmp	r7, #0
 8005c96:	f000 80d5 	beq.w	8005e44 <_printf_i+0x1cc>
 8005c9a:	2f58      	cmp	r7, #88	; 0x58
 8005c9c:	f000 80c1 	beq.w	8005e22 <_printf_i+0x1aa>
 8005ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ca4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ca8:	e03a      	b.n	8005d20 <_printf_i+0xa8>
 8005caa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cae:	2b15      	cmp	r3, #21
 8005cb0:	d8f6      	bhi.n	8005ca0 <_printf_i+0x28>
 8005cb2:	a101      	add	r1, pc, #4	; (adr r1, 8005cb8 <_printf_i+0x40>)
 8005cb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cb8:	08005d11 	.word	0x08005d11
 8005cbc:	08005d25 	.word	0x08005d25
 8005cc0:	08005ca1 	.word	0x08005ca1
 8005cc4:	08005ca1 	.word	0x08005ca1
 8005cc8:	08005ca1 	.word	0x08005ca1
 8005ccc:	08005ca1 	.word	0x08005ca1
 8005cd0:	08005d25 	.word	0x08005d25
 8005cd4:	08005ca1 	.word	0x08005ca1
 8005cd8:	08005ca1 	.word	0x08005ca1
 8005cdc:	08005ca1 	.word	0x08005ca1
 8005ce0:	08005ca1 	.word	0x08005ca1
 8005ce4:	08005e2b 	.word	0x08005e2b
 8005ce8:	08005d51 	.word	0x08005d51
 8005cec:	08005de5 	.word	0x08005de5
 8005cf0:	08005ca1 	.word	0x08005ca1
 8005cf4:	08005ca1 	.word	0x08005ca1
 8005cf8:	08005e4d 	.word	0x08005e4d
 8005cfc:	08005ca1 	.word	0x08005ca1
 8005d00:	08005d51 	.word	0x08005d51
 8005d04:	08005ca1 	.word	0x08005ca1
 8005d08:	08005ca1 	.word	0x08005ca1
 8005d0c:	08005ded 	.word	0x08005ded
 8005d10:	682b      	ldr	r3, [r5, #0]
 8005d12:	1d1a      	adds	r2, r3, #4
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	602a      	str	r2, [r5, #0]
 8005d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d20:	2301      	movs	r3, #1
 8005d22:	e0a0      	b.n	8005e66 <_printf_i+0x1ee>
 8005d24:	6820      	ldr	r0, [r4, #0]
 8005d26:	682b      	ldr	r3, [r5, #0]
 8005d28:	0607      	lsls	r7, r0, #24
 8005d2a:	f103 0104 	add.w	r1, r3, #4
 8005d2e:	6029      	str	r1, [r5, #0]
 8005d30:	d501      	bpl.n	8005d36 <_printf_i+0xbe>
 8005d32:	681e      	ldr	r6, [r3, #0]
 8005d34:	e003      	b.n	8005d3e <_printf_i+0xc6>
 8005d36:	0646      	lsls	r6, r0, #25
 8005d38:	d5fb      	bpl.n	8005d32 <_printf_i+0xba>
 8005d3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d3e:	2e00      	cmp	r6, #0
 8005d40:	da03      	bge.n	8005d4a <_printf_i+0xd2>
 8005d42:	232d      	movs	r3, #45	; 0x2d
 8005d44:	4276      	negs	r6, r6
 8005d46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d4a:	230a      	movs	r3, #10
 8005d4c:	4859      	ldr	r0, [pc, #356]	; (8005eb4 <_printf_i+0x23c>)
 8005d4e:	e012      	b.n	8005d76 <_printf_i+0xfe>
 8005d50:	682b      	ldr	r3, [r5, #0]
 8005d52:	6820      	ldr	r0, [r4, #0]
 8005d54:	1d19      	adds	r1, r3, #4
 8005d56:	6029      	str	r1, [r5, #0]
 8005d58:	0605      	lsls	r5, r0, #24
 8005d5a:	d501      	bpl.n	8005d60 <_printf_i+0xe8>
 8005d5c:	681e      	ldr	r6, [r3, #0]
 8005d5e:	e002      	b.n	8005d66 <_printf_i+0xee>
 8005d60:	0641      	lsls	r1, r0, #25
 8005d62:	d5fb      	bpl.n	8005d5c <_printf_i+0xe4>
 8005d64:	881e      	ldrh	r6, [r3, #0]
 8005d66:	2f6f      	cmp	r7, #111	; 0x6f
 8005d68:	bf0c      	ite	eq
 8005d6a:	2308      	moveq	r3, #8
 8005d6c:	230a      	movne	r3, #10
 8005d6e:	4851      	ldr	r0, [pc, #324]	; (8005eb4 <_printf_i+0x23c>)
 8005d70:	2100      	movs	r1, #0
 8005d72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d76:	6865      	ldr	r5, [r4, #4]
 8005d78:	2d00      	cmp	r5, #0
 8005d7a:	bfa8      	it	ge
 8005d7c:	6821      	ldrge	r1, [r4, #0]
 8005d7e:	60a5      	str	r5, [r4, #8]
 8005d80:	bfa4      	itt	ge
 8005d82:	f021 0104 	bicge.w	r1, r1, #4
 8005d86:	6021      	strge	r1, [r4, #0]
 8005d88:	b90e      	cbnz	r6, 8005d8e <_printf_i+0x116>
 8005d8a:	2d00      	cmp	r5, #0
 8005d8c:	d04b      	beq.n	8005e26 <_printf_i+0x1ae>
 8005d8e:	4615      	mov	r5, r2
 8005d90:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d94:	fb03 6711 	mls	r7, r3, r1, r6
 8005d98:	5dc7      	ldrb	r7, [r0, r7]
 8005d9a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d9e:	4637      	mov	r7, r6
 8005da0:	42bb      	cmp	r3, r7
 8005da2:	460e      	mov	r6, r1
 8005da4:	d9f4      	bls.n	8005d90 <_printf_i+0x118>
 8005da6:	2b08      	cmp	r3, #8
 8005da8:	d10b      	bne.n	8005dc2 <_printf_i+0x14a>
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	07de      	lsls	r6, r3, #31
 8005dae:	d508      	bpl.n	8005dc2 <_printf_i+0x14a>
 8005db0:	6923      	ldr	r3, [r4, #16]
 8005db2:	6861      	ldr	r1, [r4, #4]
 8005db4:	4299      	cmp	r1, r3
 8005db6:	bfde      	ittt	le
 8005db8:	2330      	movle	r3, #48	; 0x30
 8005dba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dbe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005dc2:	1b52      	subs	r2, r2, r5
 8005dc4:	6122      	str	r2, [r4, #16]
 8005dc6:	464b      	mov	r3, r9
 8005dc8:	4621      	mov	r1, r4
 8005dca:	4640      	mov	r0, r8
 8005dcc:	f8cd a000 	str.w	sl, [sp]
 8005dd0:	aa03      	add	r2, sp, #12
 8005dd2:	f7ff fedf 	bl	8005b94 <_printf_common>
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	d14a      	bne.n	8005e70 <_printf_i+0x1f8>
 8005dda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dde:	b004      	add	sp, #16
 8005de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	f043 0320 	orr.w	r3, r3, #32
 8005dea:	6023      	str	r3, [r4, #0]
 8005dec:	2778      	movs	r7, #120	; 0x78
 8005dee:	4832      	ldr	r0, [pc, #200]	; (8005eb8 <_printf_i+0x240>)
 8005df0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	6829      	ldr	r1, [r5, #0]
 8005df8:	061f      	lsls	r7, r3, #24
 8005dfa:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dfe:	d402      	bmi.n	8005e06 <_printf_i+0x18e>
 8005e00:	065f      	lsls	r7, r3, #25
 8005e02:	bf48      	it	mi
 8005e04:	b2b6      	uxthmi	r6, r6
 8005e06:	07df      	lsls	r7, r3, #31
 8005e08:	bf48      	it	mi
 8005e0a:	f043 0320 	orrmi.w	r3, r3, #32
 8005e0e:	6029      	str	r1, [r5, #0]
 8005e10:	bf48      	it	mi
 8005e12:	6023      	strmi	r3, [r4, #0]
 8005e14:	b91e      	cbnz	r6, 8005e1e <_printf_i+0x1a6>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	f023 0320 	bic.w	r3, r3, #32
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	2310      	movs	r3, #16
 8005e20:	e7a6      	b.n	8005d70 <_printf_i+0xf8>
 8005e22:	4824      	ldr	r0, [pc, #144]	; (8005eb4 <_printf_i+0x23c>)
 8005e24:	e7e4      	b.n	8005df0 <_printf_i+0x178>
 8005e26:	4615      	mov	r5, r2
 8005e28:	e7bd      	b.n	8005da6 <_printf_i+0x12e>
 8005e2a:	682b      	ldr	r3, [r5, #0]
 8005e2c:	6826      	ldr	r6, [r4, #0]
 8005e2e:	1d18      	adds	r0, r3, #4
 8005e30:	6961      	ldr	r1, [r4, #20]
 8005e32:	6028      	str	r0, [r5, #0]
 8005e34:	0635      	lsls	r5, r6, #24
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	d501      	bpl.n	8005e3e <_printf_i+0x1c6>
 8005e3a:	6019      	str	r1, [r3, #0]
 8005e3c:	e002      	b.n	8005e44 <_printf_i+0x1cc>
 8005e3e:	0670      	lsls	r0, r6, #25
 8005e40:	d5fb      	bpl.n	8005e3a <_printf_i+0x1c2>
 8005e42:	8019      	strh	r1, [r3, #0]
 8005e44:	2300      	movs	r3, #0
 8005e46:	4615      	mov	r5, r2
 8005e48:	6123      	str	r3, [r4, #16]
 8005e4a:	e7bc      	b.n	8005dc6 <_printf_i+0x14e>
 8005e4c:	682b      	ldr	r3, [r5, #0]
 8005e4e:	2100      	movs	r1, #0
 8005e50:	1d1a      	adds	r2, r3, #4
 8005e52:	602a      	str	r2, [r5, #0]
 8005e54:	681d      	ldr	r5, [r3, #0]
 8005e56:	6862      	ldr	r2, [r4, #4]
 8005e58:	4628      	mov	r0, r5
 8005e5a:	f000 f895 	bl	8005f88 <memchr>
 8005e5e:	b108      	cbz	r0, 8005e64 <_printf_i+0x1ec>
 8005e60:	1b40      	subs	r0, r0, r5
 8005e62:	6060      	str	r0, [r4, #4]
 8005e64:	6863      	ldr	r3, [r4, #4]
 8005e66:	6123      	str	r3, [r4, #16]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e6e:	e7aa      	b.n	8005dc6 <_printf_i+0x14e>
 8005e70:	462a      	mov	r2, r5
 8005e72:	4649      	mov	r1, r9
 8005e74:	4640      	mov	r0, r8
 8005e76:	6923      	ldr	r3, [r4, #16]
 8005e78:	47d0      	blx	sl
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	d0ad      	beq.n	8005dda <_printf_i+0x162>
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	079b      	lsls	r3, r3, #30
 8005e82:	d413      	bmi.n	8005eac <_printf_i+0x234>
 8005e84:	68e0      	ldr	r0, [r4, #12]
 8005e86:	9b03      	ldr	r3, [sp, #12]
 8005e88:	4298      	cmp	r0, r3
 8005e8a:	bfb8      	it	lt
 8005e8c:	4618      	movlt	r0, r3
 8005e8e:	e7a6      	b.n	8005dde <_printf_i+0x166>
 8005e90:	2301      	movs	r3, #1
 8005e92:	4632      	mov	r2, r6
 8005e94:	4649      	mov	r1, r9
 8005e96:	4640      	mov	r0, r8
 8005e98:	47d0      	blx	sl
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	d09d      	beq.n	8005dda <_printf_i+0x162>
 8005e9e:	3501      	adds	r5, #1
 8005ea0:	68e3      	ldr	r3, [r4, #12]
 8005ea2:	9903      	ldr	r1, [sp, #12]
 8005ea4:	1a5b      	subs	r3, r3, r1
 8005ea6:	42ab      	cmp	r3, r5
 8005ea8:	dcf2      	bgt.n	8005e90 <_printf_i+0x218>
 8005eaa:	e7eb      	b.n	8005e84 <_printf_i+0x20c>
 8005eac:	2500      	movs	r5, #0
 8005eae:	f104 0619 	add.w	r6, r4, #25
 8005eb2:	e7f5      	b.n	8005ea0 <_printf_i+0x228>
 8005eb4:	08006113 	.word	0x08006113
 8005eb8:	08006124 	.word	0x08006124

08005ebc <__malloc_lock>:
 8005ebc:	4801      	ldr	r0, [pc, #4]	; (8005ec4 <__malloc_lock+0x8>)
 8005ebe:	f7ff bc61 	b.w	8005784 <__retarget_lock_acquire_recursive>
 8005ec2:	bf00      	nop
 8005ec4:	200012e0 	.word	0x200012e0

08005ec8 <__malloc_unlock>:
 8005ec8:	4801      	ldr	r0, [pc, #4]	; (8005ed0 <__malloc_unlock+0x8>)
 8005eca:	f7ff bc5c 	b.w	8005786 <__retarget_lock_release_recursive>
 8005ece:	bf00      	nop
 8005ed0:	200012e0 	.word	0x200012e0

08005ed4 <_realloc_r>:
 8005ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed8:	4680      	mov	r8, r0
 8005eda:	4614      	mov	r4, r2
 8005edc:	460e      	mov	r6, r1
 8005ede:	b921      	cbnz	r1, 8005eea <_realloc_r+0x16>
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee6:	f7ff bdd5 	b.w	8005a94 <_malloc_r>
 8005eea:	b92a      	cbnz	r2, 8005ef8 <_realloc_r+0x24>
 8005eec:	f000 f85a 	bl	8005fa4 <_free_r>
 8005ef0:	4625      	mov	r5, r4
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ef8:	f000 f89c 	bl	8006034 <_malloc_usable_size_r>
 8005efc:	4284      	cmp	r4, r0
 8005efe:	4607      	mov	r7, r0
 8005f00:	d802      	bhi.n	8005f08 <_realloc_r+0x34>
 8005f02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f06:	d812      	bhi.n	8005f2e <_realloc_r+0x5a>
 8005f08:	4621      	mov	r1, r4
 8005f0a:	4640      	mov	r0, r8
 8005f0c:	f7ff fdc2 	bl	8005a94 <_malloc_r>
 8005f10:	4605      	mov	r5, r0
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d0ed      	beq.n	8005ef2 <_realloc_r+0x1e>
 8005f16:	42bc      	cmp	r4, r7
 8005f18:	4622      	mov	r2, r4
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	bf28      	it	cs
 8005f1e:	463a      	movcs	r2, r7
 8005f20:	f7ff fc32 	bl	8005788 <memcpy>
 8005f24:	4631      	mov	r1, r6
 8005f26:	4640      	mov	r0, r8
 8005f28:	f000 f83c 	bl	8005fa4 <_free_r>
 8005f2c:	e7e1      	b.n	8005ef2 <_realloc_r+0x1e>
 8005f2e:	4635      	mov	r5, r6
 8005f30:	e7df      	b.n	8005ef2 <_realloc_r+0x1e>

08005f32 <memmove>:
 8005f32:	4288      	cmp	r0, r1
 8005f34:	b510      	push	{r4, lr}
 8005f36:	eb01 0402 	add.w	r4, r1, r2
 8005f3a:	d902      	bls.n	8005f42 <memmove+0x10>
 8005f3c:	4284      	cmp	r4, r0
 8005f3e:	4623      	mov	r3, r4
 8005f40:	d807      	bhi.n	8005f52 <memmove+0x20>
 8005f42:	1e43      	subs	r3, r0, #1
 8005f44:	42a1      	cmp	r1, r4
 8005f46:	d008      	beq.n	8005f5a <memmove+0x28>
 8005f48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f4c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f50:	e7f8      	b.n	8005f44 <memmove+0x12>
 8005f52:	4601      	mov	r1, r0
 8005f54:	4402      	add	r2, r0
 8005f56:	428a      	cmp	r2, r1
 8005f58:	d100      	bne.n	8005f5c <memmove+0x2a>
 8005f5a:	bd10      	pop	{r4, pc}
 8005f5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f60:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f64:	e7f7      	b.n	8005f56 <memmove+0x24>
	...

08005f68 <_sbrk_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	4d05      	ldr	r5, [pc, #20]	; (8005f84 <_sbrk_r+0x1c>)
 8005f6e:	4604      	mov	r4, r0
 8005f70:	4608      	mov	r0, r1
 8005f72:	602b      	str	r3, [r5, #0]
 8005f74:	f7fb fd96 	bl	8001aa4 <_sbrk>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d102      	bne.n	8005f82 <_sbrk_r+0x1a>
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	b103      	cbz	r3, 8005f82 <_sbrk_r+0x1a>
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	bd38      	pop	{r3, r4, r5, pc}
 8005f84:	200012ec 	.word	0x200012ec

08005f88 <memchr>:
 8005f88:	4603      	mov	r3, r0
 8005f8a:	b510      	push	{r4, lr}
 8005f8c:	b2c9      	uxtb	r1, r1
 8005f8e:	4402      	add	r2, r0
 8005f90:	4293      	cmp	r3, r2
 8005f92:	4618      	mov	r0, r3
 8005f94:	d101      	bne.n	8005f9a <memchr+0x12>
 8005f96:	2000      	movs	r0, #0
 8005f98:	e003      	b.n	8005fa2 <memchr+0x1a>
 8005f9a:	7804      	ldrb	r4, [r0, #0]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	428c      	cmp	r4, r1
 8005fa0:	d1f6      	bne.n	8005f90 <memchr+0x8>
 8005fa2:	bd10      	pop	{r4, pc}

08005fa4 <_free_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	2900      	cmp	r1, #0
 8005faa:	d040      	beq.n	800602e <_free_r+0x8a>
 8005fac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fb0:	1f0c      	subs	r4, r1, #4
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	bfb8      	it	lt
 8005fb6:	18e4      	addlt	r4, r4, r3
 8005fb8:	f7ff ff80 	bl	8005ebc <__malloc_lock>
 8005fbc:	4a1c      	ldr	r2, [pc, #112]	; (8006030 <_free_r+0x8c>)
 8005fbe:	6813      	ldr	r3, [r2, #0]
 8005fc0:	b933      	cbnz	r3, 8005fd0 <_free_r+0x2c>
 8005fc2:	6063      	str	r3, [r4, #4]
 8005fc4:	6014      	str	r4, [r2, #0]
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fcc:	f7ff bf7c 	b.w	8005ec8 <__malloc_unlock>
 8005fd0:	42a3      	cmp	r3, r4
 8005fd2:	d908      	bls.n	8005fe6 <_free_r+0x42>
 8005fd4:	6820      	ldr	r0, [r4, #0]
 8005fd6:	1821      	adds	r1, r4, r0
 8005fd8:	428b      	cmp	r3, r1
 8005fda:	bf01      	itttt	eq
 8005fdc:	6819      	ldreq	r1, [r3, #0]
 8005fde:	685b      	ldreq	r3, [r3, #4]
 8005fe0:	1809      	addeq	r1, r1, r0
 8005fe2:	6021      	streq	r1, [r4, #0]
 8005fe4:	e7ed      	b.n	8005fc2 <_free_r+0x1e>
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	b10b      	cbz	r3, 8005ff0 <_free_r+0x4c>
 8005fec:	42a3      	cmp	r3, r4
 8005fee:	d9fa      	bls.n	8005fe6 <_free_r+0x42>
 8005ff0:	6811      	ldr	r1, [r2, #0]
 8005ff2:	1850      	adds	r0, r2, r1
 8005ff4:	42a0      	cmp	r0, r4
 8005ff6:	d10b      	bne.n	8006010 <_free_r+0x6c>
 8005ff8:	6820      	ldr	r0, [r4, #0]
 8005ffa:	4401      	add	r1, r0
 8005ffc:	1850      	adds	r0, r2, r1
 8005ffe:	4283      	cmp	r3, r0
 8006000:	6011      	str	r1, [r2, #0]
 8006002:	d1e0      	bne.n	8005fc6 <_free_r+0x22>
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	4408      	add	r0, r1
 800600a:	6010      	str	r0, [r2, #0]
 800600c:	6053      	str	r3, [r2, #4]
 800600e:	e7da      	b.n	8005fc6 <_free_r+0x22>
 8006010:	d902      	bls.n	8006018 <_free_r+0x74>
 8006012:	230c      	movs	r3, #12
 8006014:	602b      	str	r3, [r5, #0]
 8006016:	e7d6      	b.n	8005fc6 <_free_r+0x22>
 8006018:	6820      	ldr	r0, [r4, #0]
 800601a:	1821      	adds	r1, r4, r0
 800601c:	428b      	cmp	r3, r1
 800601e:	bf01      	itttt	eq
 8006020:	6819      	ldreq	r1, [r3, #0]
 8006022:	685b      	ldreq	r3, [r3, #4]
 8006024:	1809      	addeq	r1, r1, r0
 8006026:	6021      	streq	r1, [r4, #0]
 8006028:	6063      	str	r3, [r4, #4]
 800602a:	6054      	str	r4, [r2, #4]
 800602c:	e7cb      	b.n	8005fc6 <_free_r+0x22>
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	200012e4 	.word	0x200012e4

08006034 <_malloc_usable_size_r>:
 8006034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006038:	1f18      	subs	r0, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	bfbc      	itt	lt
 800603e:	580b      	ldrlt	r3, [r1, r0]
 8006040:	18c0      	addlt	r0, r0, r3
 8006042:	4770      	bx	lr

08006044 <_init>:
 8006044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006046:	bf00      	nop
 8006048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800604a:	bc08      	pop	{r3}
 800604c:	469e      	mov	lr, r3
 800604e:	4770      	bx	lr

08006050 <_fini>:
 8006050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006052:	bf00      	nop
 8006054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006056:	bc08      	pop	{r3}
 8006058:	469e      	mov	lr, r3
 800605a:	4770      	bx	lr
