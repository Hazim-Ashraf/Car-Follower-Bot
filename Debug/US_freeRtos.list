
US_freeRtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059a8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005ab8  08005ab8  00015ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b48  08005b48  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005b48  08005b48  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b48  08005b48  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b48  08005b48  00015b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b4c  08005b4c  00015b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016b8  20000014  08005b64  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016cc  08005b64  000216cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef87  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029cd  00000000  00000000  0002f007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  000319d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c37  00000000  00000000  000329b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f0e  00000000  00000000  000335e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010fcc  00000000  00000000  000364f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009057e  00000000  00000000  000474c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004290  00000000  00000000  000d7a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000dbcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08005aa0 	.word	0x08005aa0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08005aa0 	.word	0x08005aa0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	4a06      	ldr	r2, [pc, #24]	; (8000954 <vApplicationGetIdleTaskMemory+0x28>)
 800093c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	4a05      	ldr	r2, [pc, #20]	; (8000958 <vApplicationGetIdleTaskMemory+0x2c>)
 8000942:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	20000030 	.word	0x20000030
 8000958:	20000084 	.word	0x20000084

0800095c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4a07      	ldr	r2, [pc, #28]	; (8000988 <vApplicationGetTimerTaskMemory+0x2c>)
 800096c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <vApplicationGetTimerTaskMemory+0x30>)
 8000972:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800097a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000284 	.word	0x20000284
 800098c:	200002d8 	.word	0x200002d8

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b5b0      	push	{r4, r5, r7, lr}
 8000992:	b090      	sub	sp, #64	; 0x40
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000996:	f000 fded 	bl	8001574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099a:	f000 f869 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099e:	f000 fa19 	bl	8000dd4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80009a2:	f000 f8ab 	bl	8000afc <MX_TIM1_Init>
  MX_TIM2_Init();
 80009a6:	f000 f8f9 	bl	8000b9c <MX_TIM2_Init>
  MX_TIM3_Init();
 80009aa:	f000 f977 	bl	8000c9c <MX_TIM3_Init>
  MX_TIM4_Init();
 80009ae:	f000 f9c3 	bl	8000d38 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80009b2:	4825      	ldr	r0, [pc, #148]	; (8000a48 <main+0xb8>)
 80009b4:	f001 fd06 	bl	80023c4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80009b8:	4824      	ldr	r0, [pc, #144]	; (8000a4c <main+0xbc>)
 80009ba:	f001 fd03 	bl	80023c4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 80009be:	4824      	ldr	r0, [pc, #144]	; (8000a50 <main+0xc0>)
 80009c0:	f001 fd00 	bl	80023c4 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIGCENTER_PORT, TRIGCENTER_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ca:	4822      	ldr	r0, [pc, #136]	; (8000a54 <main+0xc4>)
 80009cc:	f001 f8b3 	bl	8001b36 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009d0:	2100      	movs	r1, #0
 80009d2:	4821      	ldr	r0, [pc, #132]	; (8000a58 <main+0xc8>)
 80009d4:	f001 fd98 	bl	8002508 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80009d8:	2104      	movs	r1, #4
 80009da:	481f      	ldr	r0, [pc, #124]	; (8000a58 <main+0xc8>)
 80009dc:	f001 fd94 	bl	8002508 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 80009e0:	2300      	movs	r3, #0
 80009e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80009e4:	2300      	movs	r3, #0
 80009e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80009e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 fb23 	bl	8003038 <osMutexCreate>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <main+0xcc>)
 80009f6:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */


  /* definition and creation of ReadSensorData */
  osThreadDef(ReadSensorData, ReadSensor, osPriorityNormal, 0, 128);
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <main+0xd0>)
 80009fa:	f107 041c 	add.w	r4, r7, #28
 80009fe:	461d      	mov	r5, r3
 8000a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadSensorDataHandle = osThreadCreate(osThread(ReadSensorData), NULL);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f002 fac4 	bl	8002fa0 <osThreadCreate>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <main+0xd4>)
 8000a1c:	6013      	str	r3, [r2, #0]

  /* definition and creation of choosePath */
  osThreadDef(choosePath, path, osPriorityNormal, 0, 128);
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <main+0xd8>)
 8000a20:	463c      	mov	r4, r7
 8000a22:	461d      	mov	r5, r3
 8000a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  choosePathHandle = osThreadCreate(osThread(choosePath), NULL);
 8000a30:	463b      	mov	r3, r7
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f002 fab3 	bl	8002fa0 <osThreadCreate>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <main+0xdc>)
 8000a3e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a40:	f002 faa7 	bl	8002f92 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <main+0xb4>
 8000a46:	bf00      	nop
 8000a48:	200006d8 	.word	0x200006d8
 8000a4c:	20000768 	.word	0x20000768
 8000a50:	200007b0 	.word	0x200007b0
 8000a54:	40010800 	.word	0x40010800
 8000a58:	20000720 	.word	0x20000720
 8000a5c:	20000800 	.word	0x20000800
 8000a60:	08005ac8 	.word	0x08005ac8
 8000a64:	200007f8 	.word	0x200007f8
 8000a68:	08005af0 	.word	0x08005af0
 8000a6c:	200007fc 	.word	0x200007fc

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b090      	sub	sp, #64	; 0x40
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0318 	add.w	r3, r7, #24
 8000a7a:	2228      	movs	r2, #40	; 0x28
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f004 ffd4 	bl	8005a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab4:	f107 0318 	add.w	r3, r7, #24
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 f855 	bl	8001b68 <HAL_RCC_OscConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ac4:	f000 fc42 	bl	800134c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac8:	230f      	movs	r3, #15
 8000aca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000acc:	2302      	movs	r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 fac2 	bl	800206c <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000aee:	f000 fc2d 	bl	800134c <Error_Handler>
  }
}
 8000af2:	bf00      	nop
 8000af4:	3740      	adds	r7, #64	; 0x40
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b10:	463b      	mov	r3, r7
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b18:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b1a:	4a1f      	ldr	r2, [pc, #124]	; (8000b98 <MX_TIM1_Init+0x9c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b20:	2247      	movs	r2, #71	; 0x47
 8000b22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b44:	4813      	ldr	r0, [pc, #76]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b46:	f001 fbed 	bl	8002324 <HAL_TIM_Base_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b50:	f000 fbfc 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b5a:	f107 0308 	add.w	r3, r7, #8
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b62:	f001 fe35 	bl	80027d0 <HAL_TIM_ConfigClockSource>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b6c:	f000 fbee 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_TIM1_Init+0x98>)
 8000b7e:	f002 f993 	bl	8002ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b88:	f000 fbe0 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200006d8 	.word	0x200006d8
 8000b98:	40012c00 	.word	0x40012c00

08000b9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08e      	sub	sp, #56	; 0x38
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb0:	f107 0320 	add.w	r3, r7, #32
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
 8000bc8:	615a      	str	r2, [r3, #20]
 8000bca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bcc:	4b32      	ldr	r3, [pc, #200]	; (8000c98 <MX_TIM2_Init+0xfc>)
 8000bce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bd4:	4b30      	ldr	r3, [pc, #192]	; (8000c98 <MX_TIM2_Init+0xfc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8000bda:	4b2f      	ldr	r3, [pc, #188]	; (8000c98 <MX_TIM2_Init+0xfc>)
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000;
 8000be0:	4b2d      	ldr	r3, [pc, #180]	; (8000c98 <MX_TIM2_Init+0xfc>)
 8000be2:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000be6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be8:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <MX_TIM2_Init+0xfc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bee:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <MX_TIM2_Init+0xfc>)
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bf4:	4828      	ldr	r0, [pc, #160]	; (8000c98 <MX_TIM2_Init+0xfc>)
 8000bf6:	f001 fb95 	bl	8002324 <HAL_TIM_Base_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c00:	f000 fba4 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4821      	ldr	r0, [pc, #132]	; (8000c98 <MX_TIM2_Init+0xfc>)
 8000c12:	f001 fddd 	bl	80027d0 <HAL_TIM_ConfigClockSource>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c1c:	f000 fb96 	bl	800134c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c20:	481d      	ldr	r0, [pc, #116]	; (8000c98 <MX_TIM2_Init+0xfc>)
 8000c22:	f001 fc19 	bl	8002458 <HAL_TIM_PWM_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c2c:	f000 fb8e 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c38:	f107 0320 	add.w	r3, r7, #32
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4816      	ldr	r0, [pc, #88]	; (8000c98 <MX_TIM2_Init+0xfc>)
 8000c40:	f002 f932 	bl	8002ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c4a:	f000 fb7f 	bl	800134c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c4e:	2360      	movs	r3, #96	; 0x60
 8000c50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	4619      	mov	r1, r3
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <MX_TIM2_Init+0xfc>)
 8000c66:	f001 fcf1 	bl	800264c <HAL_TIM_PWM_ConfigChannel>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c70:	f000 fb6c 	bl	800134c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2204      	movs	r2, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4807      	ldr	r0, [pc, #28]	; (8000c98 <MX_TIM2_Init+0xfc>)
 8000c7c:	f001 fce6 	bl	800264c <HAL_TIM_PWM_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000c86:	f000 fb61 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c8a:	4803      	ldr	r0, [pc, #12]	; (8000c98 <MX_TIM2_Init+0xfc>)
 8000c8c:	f000 fbf4 	bl	8001478 <HAL_TIM_MspPostInit>

}
 8000c90:	bf00      	nop
 8000c92:	3738      	adds	r7, #56	; 0x38
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000720 	.word	0x20000720

08000c9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <MX_TIM3_Init+0x94>)
 8000cba:	4a1e      	ldr	r2, [pc, #120]	; (8000d34 <MX_TIM3_Init+0x98>)
 8000cbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_TIM3_Init+0x94>)
 8000cc0:	2247      	movs	r2, #71	; 0x47
 8000cc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MX_TIM3_Init+0x94>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <MX_TIM3_Init+0x94>)
 8000ccc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <MX_TIM3_Init+0x94>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_TIM3_Init+0x94>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cde:	4814      	ldr	r0, [pc, #80]	; (8000d30 <MX_TIM3_Init+0x94>)
 8000ce0:	f001 fb20 	bl	8002324 <HAL_TIM_Base_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000cea:	f000 fb2f 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <MX_TIM3_Init+0x94>)
 8000cfc:	f001 fd68 	bl	80027d0 <HAL_TIM_ConfigClockSource>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000d06:	f000 fb21 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d12:	463b      	mov	r3, r7
 8000d14:	4619      	mov	r1, r3
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <MX_TIM3_Init+0x94>)
 8000d18:	f002 f8c6 	bl	8002ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000d22:	f000 fb13 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000768 	.word	0x20000768
 8000d34:	40000400 	.word	0x40000400

08000d38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <MX_TIM4_Init+0x94>)
 8000d56:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <MX_TIM4_Init+0x98>)
 8000d58:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <MX_TIM4_Init+0x94>)
 8000d5c:	2247      	movs	r2, #71	; 0x47
 8000d5e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d60:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_TIM4_Init+0x94>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <MX_TIM4_Init+0x94>)
 8000d68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d6c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <MX_TIM4_Init+0x94>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <MX_TIM4_Init+0x94>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d7a:	4814      	ldr	r0, [pc, #80]	; (8000dcc <MX_TIM4_Init+0x94>)
 8000d7c:	f001 fad2 	bl	8002324 <HAL_TIM_Base_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d86:	f000 fae1 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d90:	f107 0308 	add.w	r3, r7, #8
 8000d94:	4619      	mov	r1, r3
 8000d96:	480d      	ldr	r0, [pc, #52]	; (8000dcc <MX_TIM4_Init+0x94>)
 8000d98:	f001 fd1a 	bl	80027d0 <HAL_TIM_ConfigClockSource>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000da2:	f000 fad3 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dae:	463b      	mov	r3, r7
 8000db0:	4619      	mov	r1, r3
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <MX_TIM4_Init+0x94>)
 8000db4:	f002 f878 	bl	8002ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000dbe:	f000 fac5 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200007b0 	.word	0x200007b0
 8000dd0:	40000800 	.word	0x40000800

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de8:	4b35      	ldr	r3, [pc, #212]	; (8000ec0 <MX_GPIO_Init+0xec>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a34      	ldr	r2, [pc, #208]	; (8000ec0 <MX_GPIO_Init+0xec>)
 8000dee:	f043 0320 	orr.w	r3, r3, #32
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b32      	ldr	r3, [pc, #200]	; (8000ec0 <MX_GPIO_Init+0xec>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0320 	and.w	r3, r3, #32
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <MX_GPIO_Init+0xec>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a2e      	ldr	r2, [pc, #184]	; (8000ec0 <MX_GPIO_Init+0xec>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <MX_GPIO_Init+0xec>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e18:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <MX_GPIO_Init+0xec>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a28      	ldr	r2, [pc, #160]	; (8000ec0 <MX_GPIO_Init+0xec>)
 8000e1e:	f043 0308 	orr.w	r3, r3, #8
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <MX_GPIO_Init+0xec>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000e30:	2200      	movs	r2, #0
 8000e32:	f640 21fc 	movw	r1, #2812	; 0xafc
 8000e36:	4823      	ldr	r0, [pc, #140]	; (8000ec4 <MX_GPIO_Init+0xf0>)
 8000e38:	f000 fe7d 	bl	8001b36 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_3, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f248 0108 	movw	r1, #32776	; 0x8008
 8000e42:	4821      	ldr	r0, [pc, #132]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e44:	f000 fe77 	bl	8001b36 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000e48:	f640 23fc 	movw	r3, #2812	; 0xafc
 8000e4c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4818      	ldr	r0, [pc, #96]	; (8000ec4 <MX_GPIO_Init+0xf0>)
 8000e62:	f000 fccd 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4813      	ldr	r0, [pc, #76]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e7c:	f000 fcc0 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3;
 8000e80:	f248 0308 	movw	r3, #32776	; 0x8008
 8000e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e92:	f107 0310 	add.w	r3, r7, #16
 8000e96:	4619      	mov	r1, r3
 8000e98:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e9a:	f000 fcb1 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000e9e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_GPIO_Init+0xf0>)
 8000eb4:	f000 fca4 	bl	8001800 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010800 	.word	0x40010800
 8000ec8:	40010c00 	.word	0x40010c00
 8000ecc:	00000000 	.word	0x00000000

08000ed0 <ReadSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadSensor */
void ReadSensor(void const * argument)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReadSensor */
  /* Infinite loop */
  for(;;)
  {
	 // xSemaphoreTake(myMutex01Handle,0);
	  vTaskSuspend(NULL);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f003 f86b 	bl	8003fb4 <vTaskSuspend>
	  HAL_GPIO_WritePin(TRIGCENTER_PORT, TRIGCENTER_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee4:	48a8      	ldr	r0, [pc, #672]	; (8001188 <ReadSensor+0x2b8>)
 8000ee6:	f000 fe26 	bl	8001b36 <HAL_GPIO_WritePin>
	      __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000eea:	4ba8      	ldr	r3, [pc, #672]	; (800118c <ReadSensor+0x2bc>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24
	      while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000ef2:	bf00      	nop
 8000ef4:	4ba5      	ldr	r3, [pc, #660]	; (800118c <ReadSensor+0x2bc>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	2b09      	cmp	r3, #9
 8000efc:	d9fa      	bls.n	8000ef4 <ReadSensor+0x24>
	      HAL_GPIO_WritePin(TRIGCENTER_PORT, TRIGCENTER_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f04:	48a0      	ldr	r0, [pc, #640]	; (8001188 <ReadSensor+0x2b8>)
 8000f06:	f000 fe16 	bl	8001b36 <HAL_GPIO_WritePin>

	      centerpMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000f0a:	f000 fb8b 	bl	8001624 <HAL_GetTick>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a9f      	ldr	r2, [pc, #636]	; (8001190 <ReadSensor+0x2c0>)
 8000f12:	6013      	str	r3, [r2, #0]
	      // wait for the echo pin to go high
	      while (!(HAL_GPIO_ReadPin (ECHOCENTER_PORT, ECHOCENTER_PIN)) && centerpMillis + 10 >  HAL_GetTick());
 8000f14:	bf00      	nop
 8000f16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1a:	489b      	ldr	r0, [pc, #620]	; (8001188 <ReadSensor+0x2b8>)
 8000f1c:	f000 fdf4 	bl	8001b08 <HAL_GPIO_ReadPin>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d108      	bne.n	8000f38 <ReadSensor+0x68>
 8000f26:	4b9a      	ldr	r3, [pc, #616]	; (8001190 <ReadSensor+0x2c0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f103 040a 	add.w	r4, r3, #10
 8000f2e:	f000 fb79 	bl	8001624 <HAL_GetTick>
 8000f32:	4603      	mov	r3, r0
 8000f34:	429c      	cmp	r4, r3
 8000f36:	d8ee      	bhi.n	8000f16 <ReadSensor+0x46>
	      centerValue1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000f38:	4b94      	ldr	r3, [pc, #592]	; (800118c <ReadSensor+0x2bc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3e:	4a95      	ldr	r2, [pc, #596]	; (8001194 <ReadSensor+0x2c4>)
 8000f40:	6013      	str	r3, [r2, #0]

	      centerpMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000f42:	f000 fb6f 	bl	8001624 <HAL_GetTick>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a91      	ldr	r2, [pc, #580]	; (8001190 <ReadSensor+0x2c0>)
 8000f4a:	6013      	str	r3, [r2, #0]
	      // wait for the echo pin to go low
	      while ((HAL_GPIO_ReadPin (ECHOCENTER_PORT, ECHOCENTER_PIN)) && centerpMillis + 50 > HAL_GetTick());
 8000f4c:	bf00      	nop
 8000f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f52:	488d      	ldr	r0, [pc, #564]	; (8001188 <ReadSensor+0x2b8>)
 8000f54:	f000 fdd8 	bl	8001b08 <HAL_GPIO_ReadPin>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d008      	beq.n	8000f70 <ReadSensor+0xa0>
 8000f5e:	4b8c      	ldr	r3, [pc, #560]	; (8001190 <ReadSensor+0x2c0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000f66:	f000 fb5d 	bl	8001624 <HAL_GetTick>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	429c      	cmp	r4, r3
 8000f6e:	d8ee      	bhi.n	8000f4e <ReadSensor+0x7e>
	      centerValue2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000f70:	4b86      	ldr	r3, [pc, #536]	; (800118c <ReadSensor+0x2bc>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f76:	4a88      	ldr	r2, [pc, #544]	; (8001198 <ReadSensor+0x2c8>)
 8000f78:	6013      	str	r3, [r2, #0]

	      centerDistance = (centerValue2-centerValue1)* 0.034/2;
 8000f7a:	4b87      	ldr	r3, [pc, #540]	; (8001198 <ReadSensor+0x2c8>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4b85      	ldr	r3, [pc, #532]	; (8001194 <ReadSensor+0x2c4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fa25 	bl	80003d4 <__aeabi_ui2d>
 8000f8a:	a37d      	add	r3, pc, #500	; (adr r3, 8001180 <ReadSensor+0x2b0>)
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	f7ff fa9a 	bl	80004c8 <__aeabi_dmul>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f04f 0200 	mov.w	r2, #0
 8000fa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fa4:	f7ff fbba 	bl	800071c <__aeabi_ddiv>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f7ff fc9c 	bl	80008ec <__aeabi_d2uiz>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	4b78      	ldr	r3, [pc, #480]	; (800119c <ReadSensor+0x2cc>)
 8000fba:	801a      	strh	r2, [r3, #0]



	      //left ultrasonic
	      HAL_GPIO_WritePin(TRIGLEFT_PORT, TRIGLEFT_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fc2:	4871      	ldr	r0, [pc, #452]	; (8001188 <ReadSensor+0x2b8>)
 8000fc4:	f000 fdb7 	bl	8001b36 <HAL_GPIO_WritePin>
	      __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000fc8:	4b75      	ldr	r3, [pc, #468]	; (80011a0 <ReadSensor+0x2d0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
	      while (__HAL_TIM_GET_COUNTER (&htim3) < 10);  // wait for 10 us
 8000fd0:	bf00      	nop
 8000fd2:	4b73      	ldr	r3, [pc, #460]	; (80011a0 <ReadSensor+0x2d0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	2b09      	cmp	r3, #9
 8000fda:	d9fa      	bls.n	8000fd2 <ReadSensor+0x102>
	      HAL_GPIO_WritePin(TRIGLEFT_PORT, TRIGLEFT_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fe2:	4869      	ldr	r0, [pc, #420]	; (8001188 <ReadSensor+0x2b8>)
 8000fe4:	f000 fda7 	bl	8001b36 <HAL_GPIO_WritePin>

	      leftpMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000fe8:	f000 fb1c 	bl	8001624 <HAL_GetTick>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a6d      	ldr	r2, [pc, #436]	; (80011a4 <ReadSensor+0x2d4>)
 8000ff0:	6013      	str	r3, [r2, #0]
	      // wait for the echo pin to go high
	      while (!(HAL_GPIO_ReadPin (ECHOLEFT_PORT, ECHOLEFT_PIN)) && leftpMillis + 10 >  HAL_GetTick());
 8000ff2:	bf00      	nop
 8000ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff8:	4863      	ldr	r0, [pc, #396]	; (8001188 <ReadSensor+0x2b8>)
 8000ffa:	f000 fd85 	bl	8001b08 <HAL_GPIO_ReadPin>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d108      	bne.n	8001016 <ReadSensor+0x146>
 8001004:	4b67      	ldr	r3, [pc, #412]	; (80011a4 <ReadSensor+0x2d4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f103 040a 	add.w	r4, r3, #10
 800100c:	f000 fb0a 	bl	8001624 <HAL_GetTick>
 8001010:	4603      	mov	r3, r0
 8001012:	429c      	cmp	r4, r3
 8001014:	d8ee      	bhi.n	8000ff4 <ReadSensor+0x124>
	      leftValue1 = __HAL_TIM_GET_COUNTER (&htim3);
 8001016:	4b62      	ldr	r3, [pc, #392]	; (80011a0 <ReadSensor+0x2d0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101c:	4a62      	ldr	r2, [pc, #392]	; (80011a8 <ReadSensor+0x2d8>)
 800101e:	6013      	str	r3, [r2, #0]

	      leftpMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8001020:	f000 fb00 	bl	8001624 <HAL_GetTick>
 8001024:	4603      	mov	r3, r0
 8001026:	4a5f      	ldr	r2, [pc, #380]	; (80011a4 <ReadSensor+0x2d4>)
 8001028:	6013      	str	r3, [r2, #0]
	      // wait for the echo pin to go low
	      while ((HAL_GPIO_ReadPin (ECHOLEFT_PORT, ECHOLEFT_PIN)) && leftpMillis + 50 > HAL_GetTick());
 800102a:	bf00      	nop
 800102c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001030:	4855      	ldr	r0, [pc, #340]	; (8001188 <ReadSensor+0x2b8>)
 8001032:	f000 fd69 	bl	8001b08 <HAL_GPIO_ReadPin>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d008      	beq.n	800104e <ReadSensor+0x17e>
 800103c:	4b59      	ldr	r3, [pc, #356]	; (80011a4 <ReadSensor+0x2d4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001044:	f000 faee 	bl	8001624 <HAL_GetTick>
 8001048:	4603      	mov	r3, r0
 800104a:	429c      	cmp	r4, r3
 800104c:	d8ee      	bhi.n	800102c <ReadSensor+0x15c>
	      leftValue2 = __HAL_TIM_GET_COUNTER (&htim3);
 800104e:	4b54      	ldr	r3, [pc, #336]	; (80011a0 <ReadSensor+0x2d0>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001054:	4a55      	ldr	r2, [pc, #340]	; (80011ac <ReadSensor+0x2dc>)
 8001056:	6013      	str	r3, [r2, #0]

	      leftDistance = (leftValue2-leftValue1)* 0.034/2;
 8001058:	4b54      	ldr	r3, [pc, #336]	; (80011ac <ReadSensor+0x2dc>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b52      	ldr	r3, [pc, #328]	; (80011a8 <ReadSensor+0x2d8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f9b6 	bl	80003d4 <__aeabi_ui2d>
 8001068:	a345      	add	r3, pc, #276	; (adr r3, 8001180 <ReadSensor+0x2b0>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	f7ff fa2b 	bl	80004c8 <__aeabi_dmul>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001082:	f7ff fb4b 	bl	800071c <__aeabi_ddiv>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	f7ff fc2d 	bl	80008ec <__aeabi_d2uiz>
 8001092:	4603      	mov	r3, r0
 8001094:	b29a      	uxth	r2, r3
 8001096:	4b46      	ldr	r3, [pc, #280]	; (80011b0 <ReadSensor+0x2e0>)
 8001098:	801a      	strh	r2, [r3, #0]


	      //right ultrasonic
	      HAL_GPIO_WritePin(TRIGRIGHT_PORT, TRIGRIGHT_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800109a:	2201      	movs	r2, #1
 800109c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a0:	4844      	ldr	r0, [pc, #272]	; (80011b4 <ReadSensor+0x2e4>)
 80010a2:	f000 fd48 	bl	8001b36 <HAL_GPIO_WritePin>
	      __HAL_TIM_SET_COUNTER(&htim4, 0);
 80010a6:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <ReadSensor+0x2e8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2200      	movs	r2, #0
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
	      while (__HAL_TIM_GET_COUNTER (&htim4) < 10);  // wait for 10 us
 80010ae:	bf00      	nop
 80010b0:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <ReadSensor+0x2e8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	2b09      	cmp	r3, #9
 80010b8:	d9fa      	bls.n	80010b0 <ReadSensor+0x1e0>
	      HAL_GPIO_WritePin(TRIGRIGHT_PORT, TRIGRIGHT_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c0:	483c      	ldr	r0, [pc, #240]	; (80011b4 <ReadSensor+0x2e4>)
 80010c2:	f000 fd38 	bl	8001b36 <HAL_GPIO_WritePin>

	      rightpMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80010c6:	f000 faad 	bl	8001624 <HAL_GetTick>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a3b      	ldr	r2, [pc, #236]	; (80011bc <ReadSensor+0x2ec>)
 80010ce:	6013      	str	r3, [r2, #0]
	      // wait for the echo pin to go high
	      while (!(HAL_GPIO_ReadPin (ECHORIGHT_PORT, ECHORIGHT_PIN)) && rightpMillis + 10 >  HAL_GetTick());
 80010d0:	bf00      	nop
 80010d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d6:	4837      	ldr	r0, [pc, #220]	; (80011b4 <ReadSensor+0x2e4>)
 80010d8:	f000 fd16 	bl	8001b08 <HAL_GPIO_ReadPin>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d108      	bne.n	80010f4 <ReadSensor+0x224>
 80010e2:	4b36      	ldr	r3, [pc, #216]	; (80011bc <ReadSensor+0x2ec>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f103 040a 	add.w	r4, r3, #10
 80010ea:	f000 fa9b 	bl	8001624 <HAL_GetTick>
 80010ee:	4603      	mov	r3, r0
 80010f0:	429c      	cmp	r4, r3
 80010f2:	d8ee      	bhi.n	80010d2 <ReadSensor+0x202>
	      rightValue1 = __HAL_TIM_GET_COUNTER (&htim4);
 80010f4:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <ReadSensor+0x2e8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	4a31      	ldr	r2, [pc, #196]	; (80011c0 <ReadSensor+0x2f0>)
 80010fc:	6013      	str	r3, [r2, #0]

	      rightpMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80010fe:	f000 fa91 	bl	8001624 <HAL_GetTick>
 8001102:	4603      	mov	r3, r0
 8001104:	4a2d      	ldr	r2, [pc, #180]	; (80011bc <ReadSensor+0x2ec>)
 8001106:	6013      	str	r3, [r2, #0]
	      // wait for the echo pin to go low
	      while ((HAL_GPIO_ReadPin (ECHORIGHT_PORT, ECHORIGHT_PIN)) && rightpMillis + 50 > HAL_GetTick());
 8001108:	bf00      	nop
 800110a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800110e:	4829      	ldr	r0, [pc, #164]	; (80011b4 <ReadSensor+0x2e4>)
 8001110:	f000 fcfa 	bl	8001b08 <HAL_GPIO_ReadPin>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d008      	beq.n	800112c <ReadSensor+0x25c>
 800111a:	4b28      	ldr	r3, [pc, #160]	; (80011bc <ReadSensor+0x2ec>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001122:	f000 fa7f 	bl	8001624 <HAL_GetTick>
 8001126:	4603      	mov	r3, r0
 8001128:	429c      	cmp	r4, r3
 800112a:	d8ee      	bhi.n	800110a <ReadSensor+0x23a>
	      rightValue2 = __HAL_TIM_GET_COUNTER (&htim4);
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <ReadSensor+0x2e8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	4a24      	ldr	r2, [pc, #144]	; (80011c4 <ReadSensor+0x2f4>)
 8001134:	6013      	str	r3, [r2, #0]

	      rightDistance = (rightValue2-rightValue1)* 0.034/2;
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <ReadSensor+0x2f4>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <ReadSensor+0x2f0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f947 	bl	80003d4 <__aeabi_ui2d>
 8001146:	a30e      	add	r3, pc, #56	; (adr r3, 8001180 <ReadSensor+0x2b0>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	f7ff f9bc 	bl	80004c8 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001160:	f7ff fadc 	bl	800071c <__aeabi_ddiv>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fbbe 	bl	80008ec <__aeabi_d2uiz>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <ReadSensor+0x2f8>)
 8001176:	801a      	strh	r2, [r3, #0]

	      //xSemaphoreGive(myMutex01Handle);
	      vTaskResume(NULL);
 8001178:	2000      	movs	r0, #0
 800117a:	f002 ffe7 	bl	800414c <vTaskResume>
	  vTaskSuspend(NULL);
 800117e:	e6ab      	b.n	8000ed8 <ReadSensor+0x8>
 8001180:	b020c49c 	.word	0xb020c49c
 8001184:	3fa16872 	.word	0x3fa16872
 8001188:	40010800 	.word	0x40010800
 800118c:	200006d8 	.word	0x200006d8
 8001190:	20000804 	.word	0x20000804
 8001194:	20000808 	.word	0x20000808
 8001198:	2000080c 	.word	0x2000080c
 800119c:	20000810 	.word	0x20000810
 80011a0:	20000768 	.word	0x20000768
 80011a4:	20000814 	.word	0x20000814
 80011a8:	20000818 	.word	0x20000818
 80011ac:	2000081c 	.word	0x2000081c
 80011b0:	20000820 	.word	0x20000820
 80011b4:	40010c00 	.word	0x40010c00
 80011b8:	200007b0 	.word	0x200007b0
 80011bc:	20000824 	.word	0x20000824
 80011c0:	20000828 	.word	0x20000828
 80011c4:	2000082c 	.word	0x2000082c
 80011c8:	20000830 	.word	0x20000830

080011cc <path>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_path */
void path(void const * argument)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN path */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f002 feed 	bl	8003fb4 <vTaskSuspend>
	  //xSemaphoreTake(myMutex01Handle,0);
	    if(leftDistance>200 && rightDistance>200 && centerDistance>200){
 80011da:	4b54      	ldr	r3, [pc, #336]	; (800132c <path+0x160>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	2bc8      	cmp	r3, #200	; 0xc8
 80011e0:	d910      	bls.n	8001204 <path+0x38>
 80011e2:	4b53      	ldr	r3, [pc, #332]	; (8001330 <path+0x164>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	2bc8      	cmp	r3, #200	; 0xc8
 80011e8:	d90c      	bls.n	8001204 <path+0x38>
 80011ea:	4b52      	ldr	r3, [pc, #328]	; (8001334 <path+0x168>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	2bc8      	cmp	r3, #200	; 0xc8
 80011f0:	d908      	bls.n	8001204 <path+0x38>
	    	TIM2->CCR1=0;
 80011f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f6:	2200      	movs	r2, #0
 80011f8:	635a      	str	r2, [r3, #52]	; 0x34
	    	TIM2->CCR2=0;
 80011fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011fe:	2200      	movs	r2, #0
 8001200:	639a      	str	r2, [r3, #56]	; 0x38
 8001202:	e092      	b.n	800132a <path+0x15e>
	    }
	    else if(centerDistance<leftDistance && centerDistance<rightDistance && centerDistance<200 && centerDistance>desiredDistance){
 8001204:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <path+0x168>)
 8001206:	881a      	ldrh	r2, [r3, #0]
 8001208:	4b48      	ldr	r3, [pc, #288]	; (800132c <path+0x160>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	d22a      	bcs.n	8001266 <path+0x9a>
 8001210:	4b48      	ldr	r3, [pc, #288]	; (8001334 <path+0x168>)
 8001212:	881a      	ldrh	r2, [r3, #0]
 8001214:	4b46      	ldr	r3, [pc, #280]	; (8001330 <path+0x164>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d224      	bcs.n	8001266 <path+0x9a>
 800121c:	4b45      	ldr	r3, [pc, #276]	; (8001334 <path+0x168>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	2bc7      	cmp	r3, #199	; 0xc7
 8001222:	d820      	bhi.n	8001266 <path+0x9a>
 8001224:	4b43      	ldr	r3, [pc, #268]	; (8001334 <path+0x168>)
 8001226:	881a      	ldrh	r2, [r3, #0]
 8001228:	4b43      	ldr	r3, [pc, #268]	; (8001338 <path+0x16c>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d91a      	bls.n	8001266 <path+0x9a>
	    	 error=(centerDistance-desiredDistance);
 8001230:	4b40      	ldr	r3, [pc, #256]	; (8001334 <path+0x168>)
 8001232:	881a      	ldrh	r2, [r3, #0]
 8001234:	4b40      	ldr	r3, [pc, #256]	; (8001338 <path+0x16c>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	b29a      	uxth	r2, r3
 800123c:	4b3f      	ldr	r3, [pc, #252]	; (800133c <path+0x170>)
 800123e:	801a      	strh	r2, [r3, #0]
	    	 pwmC=kp*error;
 8001240:	4b3e      	ldr	r3, [pc, #248]	; (800133c <path+0x170>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	23b4      	movs	r3, #180	; 0xb4
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	4a3c      	ldr	r2, [pc, #240]	; (8001340 <path+0x174>)
 800124e:	6013      	str	r3, [r2, #0]
		     	TIM2->CCR1=pwmC;
 8001250:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <path+0x174>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
		     	TIM2->CCR2=pwmC;
 800125a:	4b39      	ldr	r3, [pc, #228]	; (8001340 <path+0x174>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001262:	639a      	str	r2, [r3, #56]	; 0x38
 8001264:	e061      	b.n	800132a <path+0x15e>
	    }

	    else if(leftDistance>rightDistance && centerDistance>rightDistance &&rightDistance<200 && rightDistance>desiredDistance){
 8001266:	4b31      	ldr	r3, [pc, #196]	; (800132c <path+0x160>)
 8001268:	881a      	ldrh	r2, [r3, #0]
 800126a:	4b31      	ldr	r3, [pc, #196]	; (8001330 <path+0x164>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d929      	bls.n	80012c6 <path+0xfa>
 8001272:	4b30      	ldr	r3, [pc, #192]	; (8001334 <path+0x168>)
 8001274:	881a      	ldrh	r2, [r3, #0]
 8001276:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <path+0x164>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d923      	bls.n	80012c6 <path+0xfa>
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <path+0x164>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	2bc7      	cmp	r3, #199	; 0xc7
 8001284:	d81f      	bhi.n	80012c6 <path+0xfa>
 8001286:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <path+0x164>)
 8001288:	881a      	ldrh	r2, [r3, #0]
 800128a:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <path+0x16c>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d919      	bls.n	80012c6 <path+0xfa>
	     	error=(rightDistance-desiredDistance);
 8001292:	4b27      	ldr	r3, [pc, #156]	; (8001330 <path+0x164>)
 8001294:	881a      	ldrh	r2, [r3, #0]
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <path+0x16c>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	b29a      	uxth	r2, r3
 800129e:	4b27      	ldr	r3, [pc, #156]	; (800133c <path+0x170>)
 80012a0:	801a      	strh	r2, [r3, #0]
	     	pwmR=kp*error;
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <path+0x170>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	23b4      	movs	r3, #180	; 0xb4
 80012aa:	fb02 f303 	mul.w	r3, r2, r3
 80012ae:	4a25      	ldr	r2, [pc, #148]	; (8001344 <path+0x178>)
 80012b0:	6013      	str	r3, [r2, #0]
	     	TIM2->CCR1=pwmR;
 80012b2:	4b24      	ldr	r3, [pc, #144]	; (8001344 <path+0x178>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ba:	635a      	str	r2, [r3, #52]	; 0x34
	     	TIM2->CCR2=0;
 80012bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012c0:	2200      	movs	r2, #0
 80012c2:	639a      	str	r2, [r3, #56]	; 0x38
 80012c4:	e031      	b.n	800132a <path+0x15e>


	    }

	    else if(leftDistance<rightDistance && leftDistance<centerDistance && leftDistance<200 && leftDistance>desiredDistance){
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <path+0x160>)
 80012c8:	881a      	ldrh	r2, [r3, #0]
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <path+0x164>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d280      	bcs.n	80011d4 <path+0x8>
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <path+0x160>)
 80012d4:	881a      	ldrh	r2, [r3, #0]
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <path+0x168>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	f4bf af7a 	bcs.w	80011d4 <path+0x8>
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <path+0x160>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	2bc7      	cmp	r3, #199	; 0xc7
 80012e6:	f63f af75 	bhi.w	80011d4 <path+0x8>
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <path+0x160>)
 80012ec:	881a      	ldrh	r2, [r3, #0]
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <path+0x16c>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	f67f af6e 	bls.w	80011d4 <path+0x8>
	    	error=(leftDistance-desiredDistance);
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <path+0x160>)
 80012fa:	881a      	ldrh	r2, [r3, #0]
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <path+0x16c>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	b29a      	uxth	r2, r3
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <path+0x170>)
 8001306:	801a      	strh	r2, [r3, #0]
	    	pwmL=kp*error;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <path+0x170>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	23b4      	movs	r3, #180	; 0xb4
 8001310:	fb02 f303 	mul.w	r3, r2, r3
 8001314:	4a0c      	ldr	r2, [pc, #48]	; (8001348 <path+0x17c>)
 8001316:	6013      	str	r3, [r2, #0]
			TIM2->CCR2=pwmL;
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <path+0x17c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001320:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR1=0;
 8001322:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001326:	2200      	movs	r2, #0
 8001328:	635a      	str	r2, [r3, #52]	; 0x34
	  vTaskSuspend(NULL);
 800132a:	e753      	b.n	80011d4 <path+0x8>
 800132c:	20000820 	.word	0x20000820
 8001330:	20000830 	.word	0x20000830
 8001334:	20000810 	.word	0x20000810
 8001338:	20000000 	.word	0x20000000
 800133c:	20000832 	.word	0x20000832
 8001340:	20000834 	.word	0x20000834
 8001344:	20000838 	.word	0x20000838
 8001348:	2000083c 	.word	0x2000083c

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
}
 8001352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001354:	e7fe      	b.n	8001354 <Error_Handler+0x8>
	...

08001358 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <HAL_MspInit+0x68>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <HAL_MspInit+0x68>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6193      	str	r3, [r2, #24]
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_MspInit+0x68>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_MspInit+0x68>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a11      	ldr	r2, [pc, #68]	; (80013c0 <HAL_MspInit+0x68>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	61d3      	str	r3, [r2, #28]
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_MspInit+0x68>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	210f      	movs	r1, #15
 8001392:	f06f 0001 	mvn.w	r0, #1
 8001396:	f000 fa0a 	bl	80017ae <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_MspInit+0x6c>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <HAL_MspInit+0x6c>)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010000 	.word	0x40010000

080013c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b087      	sub	sp, #28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a24      	ldr	r2, [pc, #144]	; (8001468 <HAL_TIM_Base_MspInit+0xa0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d10c      	bne.n	80013f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <HAL_TIM_Base_MspInit+0xa4>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	4a23      	ldr	r2, [pc, #140]	; (800146c <HAL_TIM_Base_MspInit+0xa4>)
 80013e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013e4:	6193      	str	r3, [r2, #24]
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <HAL_TIM_Base_MspInit+0xa4>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013f2:	e034      	b.n	800145e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013fc:	d10c      	bne.n	8001418 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_TIM_Base_MspInit+0xa4>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a1a      	ldr	r2, [pc, #104]	; (800146c <HAL_TIM_Base_MspInit+0xa4>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	61d3      	str	r3, [r2, #28]
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <HAL_TIM_Base_MspInit+0xa4>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
}
 8001416:	e022      	b.n	800145e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a14      	ldr	r2, [pc, #80]	; (8001470 <HAL_TIM_Base_MspInit+0xa8>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d10c      	bne.n	800143c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_TIM_Base_MspInit+0xa4>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a11      	ldr	r2, [pc, #68]	; (800146c <HAL_TIM_Base_MspInit+0xa4>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_TIM_Base_MspInit+0xa4>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
}
 800143a:	e010      	b.n	800145e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0c      	ldr	r2, [pc, #48]	; (8001474 <HAL_TIM_Base_MspInit+0xac>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d10b      	bne.n	800145e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_TIM_Base_MspInit+0xa4>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a08      	ldr	r2, [pc, #32]	; (800146c <HAL_TIM_Base_MspInit+0xa4>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	61d3      	str	r3, [r2, #28]
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_TIM_Base_MspInit+0xa4>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
}
 800145e:	bf00      	nop
 8001460:	371c      	adds	r7, #28
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	40012c00 	.word	0x40012c00
 800146c:	40021000 	.word	0x40021000
 8001470:	40000400 	.word	0x40000400
 8001474:	40000800 	.word	0x40000800

08001478 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001496:	d117      	bne.n	80014c8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_TIM_MspPostInit+0x58>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <HAL_TIM_MspPostInit+0x58>)
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_TIM_MspPostInit+0x58>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014b0:	2303      	movs	r3, #3
 80014b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	4619      	mov	r1, r3
 80014c2:	4804      	ldr	r0, [pc, #16]	; (80014d4 <HAL_TIM_MspPostInit+0x5c>)
 80014c4:	f000 f99c 	bl	8001800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014c8:	bf00      	nop
 80014ca:	3720      	adds	r7, #32
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010800 	.word	0x40010800

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014dc:	e7fe      	b.n	80014dc <NMI_Handler+0x4>

080014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <MemManage_Handler+0x4>

080014ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr

08001502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001506:	f000 f87b 	bl	8001600 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800150a:	f003 fac3 	bl	8004a94 <xTaskGetSchedulerState>
 800150e:	4603      	mov	r3, r0
 8001510:	2b01      	cmp	r3, #1
 8001512:	d001      	beq.n	8001518 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001514:	f004 f830 	bl	8005578 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001528:	f7ff fff8 	bl	800151c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800152c:	480b      	ldr	r0, [pc, #44]	; (800155c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800152e:	490c      	ldr	r1, [pc, #48]	; (8001560 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001530:	4a0c      	ldr	r2, [pc, #48]	; (8001564 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001544:	4c09      	ldr	r4, [pc, #36]	; (800156c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001552:	f004 fa73 	bl	8005a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001556:	f7ff fa1b 	bl	8000990 <main>
  bx lr
 800155a:	4770      	bx	lr
  ldr r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001560:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001564:	08005b50 	.word	0x08005b50
  ldr r2, =_sbss
 8001568:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800156c:	200016cc 	.word	0x200016cc

08001570 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001570:	e7fe      	b.n	8001570 <ADC1_2_IRQHandler>
	...

08001574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_Init+0x28>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a07      	ldr	r2, [pc, #28]	; (800159c <HAL_Init+0x28>)
 800157e:	f043 0310 	orr.w	r3, r3, #16
 8001582:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001584:	2003      	movs	r0, #3
 8001586:	f000 f907 	bl	8001798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158a:	200f      	movs	r0, #15
 800158c:	f000 f808 	bl	80015a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001590:	f7ff fee2 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40022000 	.word	0x40022000

080015a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_InitTick+0x54>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_InitTick+0x58>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f911 	bl	80017e6 <HAL_SYSTICK_Config>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00e      	b.n	80015ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b0f      	cmp	r3, #15
 80015d2:	d80a      	bhi.n	80015ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d4:	2200      	movs	r2, #0
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	f000 f8e7 	bl	80017ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e0:	4a06      	ldr	r2, [pc, #24]	; (80015fc <HAL_InitTick+0x5c>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e000      	b.n	80015ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000004 	.word	0x20000004
 80015f8:	2000000c 	.word	0x2000000c
 80015fc:	20000008 	.word	0x20000008

08001600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_IncTick+0x1c>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_IncTick+0x20>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4413      	add	r3, r2
 8001610:	4a03      	ldr	r2, [pc, #12]	; (8001620 <HAL_IncTick+0x20>)
 8001612:	6013      	str	r3, [r2, #0]
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	2000000c 	.word	0x2000000c
 8001620:	20000840 	.word	0x20000840

08001624 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b02      	ldr	r3, [pc, #8]	; (8001634 <HAL_GetTick+0x10>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	20000840 	.word	0x20000840

08001638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001654:	4013      	ands	r3, r2
 8001656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166a:	4a04      	ldr	r2, [pc, #16]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	60d3      	str	r3, [r2, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <__NVIC_GetPriorityGrouping+0x18>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	f003 0307 	and.w	r3, r3, #7
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	; (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	; (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	; 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001764:	d301      	bcc.n	800176a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001766:	2301      	movs	r3, #1
 8001768:	e00f      	b.n	800178a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <SysTick_Config+0x40>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001772:	210f      	movs	r1, #15
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f7ff ff90 	bl	800169c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <SysTick_Config+0x40>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <SysTick_Config+0x40>)
 8001784:	2207      	movs	r2, #7
 8001786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	e000e010 	.word	0xe000e010

08001798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ff49 	bl	8001638 <__NVIC_SetPriorityGrouping>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c0:	f7ff ff5e 	bl	8001680 <__NVIC_GetPriorityGrouping>
 80017c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	6978      	ldr	r0, [r7, #20]
 80017cc:	f7ff ff90 	bl	80016f0 <NVIC_EncodePriority>
 80017d0:	4602      	mov	r2, r0
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff5f 	bl	800169c <__NVIC_SetPriority>
}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffb0 	bl	8001754 <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b08b      	sub	sp, #44	; 0x2c
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001812:	e169      	b.n	8001ae8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001814:	2201      	movs	r2, #1
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	429a      	cmp	r2, r3
 800182e:	f040 8158 	bne.w	8001ae2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4a9a      	ldr	r2, [pc, #616]	; (8001aa0 <HAL_GPIO_Init+0x2a0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d05e      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 800183c:	4a98      	ldr	r2, [pc, #608]	; (8001aa0 <HAL_GPIO_Init+0x2a0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d875      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 8001842:	4a98      	ldr	r2, [pc, #608]	; (8001aa4 <HAL_GPIO_Init+0x2a4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d058      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 8001848:	4a96      	ldr	r2, [pc, #600]	; (8001aa4 <HAL_GPIO_Init+0x2a4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d86f      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 800184e:	4a96      	ldr	r2, [pc, #600]	; (8001aa8 <HAL_GPIO_Init+0x2a8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d052      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 8001854:	4a94      	ldr	r2, [pc, #592]	; (8001aa8 <HAL_GPIO_Init+0x2a8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d869      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 800185a:	4a94      	ldr	r2, [pc, #592]	; (8001aac <HAL_GPIO_Init+0x2ac>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d04c      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 8001860:	4a92      	ldr	r2, [pc, #584]	; (8001aac <HAL_GPIO_Init+0x2ac>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d863      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 8001866:	4a92      	ldr	r2, [pc, #584]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d046      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 800186c:	4a90      	ldr	r2, [pc, #576]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d85d      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 8001872:	2b12      	cmp	r3, #18
 8001874:	d82a      	bhi.n	80018cc <HAL_GPIO_Init+0xcc>
 8001876:	2b12      	cmp	r3, #18
 8001878:	d859      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 800187a:	a201      	add	r2, pc, #4	; (adr r2, 8001880 <HAL_GPIO_Init+0x80>)
 800187c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001880:	080018fb 	.word	0x080018fb
 8001884:	080018d5 	.word	0x080018d5
 8001888:	080018e7 	.word	0x080018e7
 800188c:	08001929 	.word	0x08001929
 8001890:	0800192f 	.word	0x0800192f
 8001894:	0800192f 	.word	0x0800192f
 8001898:	0800192f 	.word	0x0800192f
 800189c:	0800192f 	.word	0x0800192f
 80018a0:	0800192f 	.word	0x0800192f
 80018a4:	0800192f 	.word	0x0800192f
 80018a8:	0800192f 	.word	0x0800192f
 80018ac:	0800192f 	.word	0x0800192f
 80018b0:	0800192f 	.word	0x0800192f
 80018b4:	0800192f 	.word	0x0800192f
 80018b8:	0800192f 	.word	0x0800192f
 80018bc:	0800192f 	.word	0x0800192f
 80018c0:	0800192f 	.word	0x0800192f
 80018c4:	080018dd 	.word	0x080018dd
 80018c8:	080018f1 	.word	0x080018f1
 80018cc:	4a79      	ldr	r2, [pc, #484]	; (8001ab4 <HAL_GPIO_Init+0x2b4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018d2:	e02c      	b.n	800192e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	623b      	str	r3, [r7, #32]
          break;
 80018da:	e029      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	3304      	adds	r3, #4
 80018e2:	623b      	str	r3, [r7, #32]
          break;
 80018e4:	e024      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	3308      	adds	r3, #8
 80018ec:	623b      	str	r3, [r7, #32]
          break;
 80018ee:	e01f      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	330c      	adds	r3, #12
 80018f6:	623b      	str	r3, [r7, #32]
          break;
 80018f8:	e01a      	b.n	8001930 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001902:	2304      	movs	r3, #4
 8001904:	623b      	str	r3, [r7, #32]
          break;
 8001906:	e013      	b.n	8001930 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001910:	2308      	movs	r3, #8
 8001912:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	611a      	str	r2, [r3, #16]
          break;
 800191a:	e009      	b.n	8001930 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800191c:	2308      	movs	r3, #8
 800191e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	615a      	str	r2, [r3, #20]
          break;
 8001926:	e003      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	e000      	b.n	8001930 <HAL_GPIO_Init+0x130>
          break;
 800192e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2bff      	cmp	r3, #255	; 0xff
 8001934:	d801      	bhi.n	800193a <HAL_GPIO_Init+0x13a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	e001      	b.n	800193e <HAL_GPIO_Init+0x13e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3304      	adds	r3, #4
 800193e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	2bff      	cmp	r3, #255	; 0xff
 8001944:	d802      	bhi.n	800194c <HAL_GPIO_Init+0x14c>
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	e002      	b.n	8001952 <HAL_GPIO_Init+0x152>
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	3b08      	subs	r3, #8
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	210f      	movs	r1, #15
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	401a      	ands	r2, r3
 8001964:	6a39      	ldr	r1, [r7, #32]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	431a      	orrs	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 80b1 	beq.w	8001ae2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001980:	4b4d      	ldr	r3, [pc, #308]	; (8001ab8 <HAL_GPIO_Init+0x2b8>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a4c      	ldr	r2, [pc, #304]	; (8001ab8 <HAL_GPIO_Init+0x2b8>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <HAL_GPIO_Init+0x2b8>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001998:	4a48      	ldr	r2, [pc, #288]	; (8001abc <HAL_GPIO_Init+0x2bc>)
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	220f      	movs	r2, #15
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4013      	ands	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a40      	ldr	r2, [pc, #256]	; (8001ac0 <HAL_GPIO_Init+0x2c0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d013      	beq.n	80019ec <HAL_GPIO_Init+0x1ec>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a3f      	ldr	r2, [pc, #252]	; (8001ac4 <HAL_GPIO_Init+0x2c4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d00d      	beq.n	80019e8 <HAL_GPIO_Init+0x1e8>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a3e      	ldr	r2, [pc, #248]	; (8001ac8 <HAL_GPIO_Init+0x2c8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d007      	beq.n	80019e4 <HAL_GPIO_Init+0x1e4>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a3d      	ldr	r2, [pc, #244]	; (8001acc <HAL_GPIO_Init+0x2cc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d101      	bne.n	80019e0 <HAL_GPIO_Init+0x1e0>
 80019dc:	2303      	movs	r3, #3
 80019de:	e006      	b.n	80019ee <HAL_GPIO_Init+0x1ee>
 80019e0:	2304      	movs	r3, #4
 80019e2:	e004      	b.n	80019ee <HAL_GPIO_Init+0x1ee>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e002      	b.n	80019ee <HAL_GPIO_Init+0x1ee>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <HAL_GPIO_Init+0x1ee>
 80019ec:	2300      	movs	r3, #0
 80019ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f0:	f002 0203 	and.w	r2, r2, #3
 80019f4:	0092      	lsls	r2, r2, #2
 80019f6:	4093      	lsls	r3, r2
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019fe:	492f      	ldr	r1, [pc, #188]	; (8001abc <HAL_GPIO_Init+0x2bc>)
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	3302      	adds	r3, #2
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d006      	beq.n	8001a26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a18:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	492c      	ldr	r1, [pc, #176]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	608b      	str	r3, [r1, #8]
 8001a24:	e006      	b.n	8001a34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	4928      	ldr	r1, [pc, #160]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d006      	beq.n	8001a4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a40:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	4922      	ldr	r1, [pc, #136]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60cb      	str	r3, [r1, #12]
 8001a4c:	e006      	b.n	8001a5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	491e      	ldr	r1, [pc, #120]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4918      	ldr	r1, [pc, #96]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	4914      	ldr	r1, [pc, #80]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d021      	beq.n	8001ad4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	490e      	ldr	r1, [pc, #56]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	600b      	str	r3, [r1, #0]
 8001a9c:	e021      	b.n	8001ae2 <HAL_GPIO_Init+0x2e2>
 8001a9e:	bf00      	nop
 8001aa0:	10320000 	.word	0x10320000
 8001aa4:	10310000 	.word	0x10310000
 8001aa8:	10220000 	.word	0x10220000
 8001aac:	10210000 	.word	0x10210000
 8001ab0:	10120000 	.word	0x10120000
 8001ab4:	10110000 	.word	0x10110000
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	40010800 	.word	0x40010800
 8001ac4:	40010c00 	.word	0x40010c00
 8001ac8:	40011000 	.word	0x40011000
 8001acc:	40011400 	.word	0x40011400
 8001ad0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_GPIO_Init+0x304>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	4909      	ldr	r1, [pc, #36]	; (8001b04 <HAL_GPIO_Init+0x304>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	fa22 f303 	lsr.w	r3, r2, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f47f ae8e 	bne.w	8001814 <HAL_GPIO_Init+0x14>
  }
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	372c      	adds	r7, #44	; 0x2c
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	40010400 	.word	0x40010400

08001b08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
 8001b24:	e001      	b.n	8001b2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	807b      	strh	r3, [r7, #2]
 8001b42:	4613      	mov	r3, r2
 8001b44:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b46:	787b      	ldrb	r3, [r7, #1]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b4c:	887a      	ldrh	r2, [r7, #2]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b52:	e003      	b.n	8001b5c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	041a      	lsls	r2, r3, #16
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	611a      	str	r2, [r3, #16]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
	...

08001b68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e272      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8087 	beq.w	8001c96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b88:	4b92      	ldr	r3, [pc, #584]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d00c      	beq.n	8001bae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b94:	4b8f      	ldr	r3, [pc, #572]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d112      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x5e>
 8001ba0:	4b8c      	ldr	r3, [pc, #560]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bac:	d10b      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bae:	4b89      	ldr	r3, [pc, #548]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d06c      	beq.n	8001c94 <HAL_RCC_OscConfig+0x12c>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d168      	bne.n	8001c94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e24c      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bce:	d106      	bne.n	8001bde <HAL_RCC_OscConfig+0x76>
 8001bd0:	4b80      	ldr	r3, [pc, #512]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a7f      	ldr	r2, [pc, #508]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	e02e      	b.n	8001c3c <HAL_RCC_OscConfig+0xd4>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x98>
 8001be6:	4b7b      	ldr	r3, [pc, #492]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a7a      	ldr	r2, [pc, #488]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b78      	ldr	r3, [pc, #480]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a77      	ldr	r2, [pc, #476]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e01d      	b.n	8001c3c <HAL_RCC_OscConfig+0xd4>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c08:	d10c      	bne.n	8001c24 <HAL_RCC_OscConfig+0xbc>
 8001c0a:	4b72      	ldr	r3, [pc, #456]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a71      	ldr	r2, [pc, #452]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	4b6f      	ldr	r3, [pc, #444]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a6e      	ldr	r2, [pc, #440]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	e00b      	b.n	8001c3c <HAL_RCC_OscConfig+0xd4>
 8001c24:	4b6b      	ldr	r3, [pc, #428]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a6a      	ldr	r2, [pc, #424]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b68      	ldr	r3, [pc, #416]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a67      	ldr	r2, [pc, #412]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d013      	beq.n	8001c6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff fcee 	bl	8001624 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7ff fcea 	bl	8001624 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	; 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e200      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b5d      	ldr	r3, [pc, #372]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0xe4>
 8001c6a:	e014      	b.n	8001c96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fcda 	bl	8001624 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c74:	f7ff fcd6 	bl	8001624 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b64      	cmp	r3, #100	; 0x64
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e1ec      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c86:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x10c>
 8001c92:	e000      	b.n	8001c96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d063      	beq.n	8001d6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ca2:	4b4c      	ldr	r3, [pc, #304]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00b      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cae:	4b49      	ldr	r3, [pc, #292]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d11c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x18c>
 8001cba:	4b46      	ldr	r3, [pc, #280]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d116      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	4b43      	ldr	r3, [pc, #268]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d005      	beq.n	8001cde <HAL_RCC_OscConfig+0x176>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d001      	beq.n	8001cde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e1c0      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cde:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4939      	ldr	r1, [pc, #228]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf2:	e03a      	b.n	8001d6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d020      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cfc:	4b36      	ldr	r3, [pc, #216]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d02:	f7ff fc8f 	bl	8001624 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fc8b 	bl	8001624 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e1a1      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d28:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4927      	ldr	r1, [pc, #156]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]
 8001d3c:	e015      	b.n	8001d6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3e:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fc6e 	bl	8001624 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4c:	f7ff fc6a 	bl	8001624 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e180      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d03a      	beq.n	8001dec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d019      	beq.n	8001db2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <HAL_RCC_OscConfig+0x274>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d84:	f7ff fc4e 	bl	8001624 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8c:	f7ff fc4a 	bl	8001624 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e160      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001daa:	2001      	movs	r0, #1
 8001dac:	f000 fa9c 	bl	80022e8 <RCC_Delay>
 8001db0:	e01c      	b.n	8001dec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_RCC_OscConfig+0x274>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db8:	f7ff fc34 	bl	8001624 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dbe:	e00f      	b.n	8001de0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fc30 	bl	8001624 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d908      	bls.n	8001de0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e146      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	42420000 	.word	0x42420000
 8001ddc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de0:	4b92      	ldr	r3, [pc, #584]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1e9      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80a6 	beq.w	8001f46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfe:	4b8b      	ldr	r3, [pc, #556]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10d      	bne.n	8001e26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	4b88      	ldr	r3, [pc, #544]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	4a87      	ldr	r2, [pc, #540]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e14:	61d3      	str	r3, [r2, #28]
 8001e16:	4b85      	ldr	r3, [pc, #532]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e22:	2301      	movs	r3, #1
 8001e24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e26:	4b82      	ldr	r3, [pc, #520]	; (8002030 <HAL_RCC_OscConfig+0x4c8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d118      	bne.n	8001e64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e32:	4b7f      	ldr	r3, [pc, #508]	; (8002030 <HAL_RCC_OscConfig+0x4c8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a7e      	ldr	r2, [pc, #504]	; (8002030 <HAL_RCC_OscConfig+0x4c8>)
 8001e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3e:	f7ff fbf1 	bl	8001624 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e46:	f7ff fbed 	bl	8001624 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b64      	cmp	r3, #100	; 0x64
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e103      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e58:	4b75      	ldr	r3, [pc, #468]	; (8002030 <HAL_RCC_OscConfig+0x4c8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d106      	bne.n	8001e7a <HAL_RCC_OscConfig+0x312>
 8001e6c:	4b6f      	ldr	r3, [pc, #444]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4a6e      	ldr	r2, [pc, #440]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6213      	str	r3, [r2, #32]
 8001e78:	e02d      	b.n	8001ed6 <HAL_RCC_OscConfig+0x36e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x334>
 8001e82:	4b6a      	ldr	r3, [pc, #424]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	4a69      	ldr	r2, [pc, #420]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	6213      	str	r3, [r2, #32]
 8001e8e:	4b67      	ldr	r3, [pc, #412]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4a66      	ldr	r2, [pc, #408]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	f023 0304 	bic.w	r3, r3, #4
 8001e98:	6213      	str	r3, [r2, #32]
 8001e9a:	e01c      	b.n	8001ed6 <HAL_RCC_OscConfig+0x36e>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	d10c      	bne.n	8001ebe <HAL_RCC_OscConfig+0x356>
 8001ea4:	4b61      	ldr	r3, [pc, #388]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a60      	ldr	r2, [pc, #384]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	6213      	str	r3, [r2, #32]
 8001eb0:	4b5e      	ldr	r3, [pc, #376]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4a5d      	ldr	r2, [pc, #372]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6213      	str	r3, [r2, #32]
 8001ebc:	e00b      	b.n	8001ed6 <HAL_RCC_OscConfig+0x36e>
 8001ebe:	4b5b      	ldr	r3, [pc, #364]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a5a      	ldr	r2, [pc, #360]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	6213      	str	r3, [r2, #32]
 8001eca:	4b58      	ldr	r3, [pc, #352]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4a57      	ldr	r2, [pc, #348]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d015      	beq.n	8001f0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fba1 	bl	8001624 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee6:	f7ff fb9d 	bl	8001624 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e0b1      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efc:	4b4b      	ldr	r3, [pc, #300]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0ee      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x37e>
 8001f08:	e014      	b.n	8001f34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0a:	f7ff fb8b 	bl	8001624 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f10:	e00a      	b.n	8001f28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f12:	f7ff fb87 	bl	8001624 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e09b      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f28:	4b40      	ldr	r3, [pc, #256]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1ee      	bne.n	8001f12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d105      	bne.n	8001f46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3a:	4b3c      	ldr	r3, [pc, #240]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4a3b      	ldr	r2, [pc, #236]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8087 	beq.w	800205e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f50:	4b36      	ldr	r3, [pc, #216]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d061      	beq.n	8002020 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d146      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f64:	4b33      	ldr	r3, [pc, #204]	; (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7ff fb5b 	bl	8001624 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f72:	f7ff fb57 	bl	8001624 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e06d      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f84:	4b29      	ldr	r3, [pc, #164]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f0      	bne.n	8001f72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f98:	d108      	bne.n	8001fac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f9a:	4b24      	ldr	r3, [pc, #144]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	4921      	ldr	r1, [pc, #132]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fac:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a19      	ldr	r1, [r3, #32]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	491b      	ldr	r1, [pc, #108]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7ff fb2b 	bl	8001624 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd2:	f7ff fb27 	bl	8001624 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e03d      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x46a>
 8001ff0:	e035      	b.n	800205e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fb14 	bl	8001624 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002000:	f7ff fb10 	bl	8001624 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e026      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_RCC_OscConfig+0x4c4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x498>
 800201e:	e01e      	b.n	800205e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d107      	bne.n	8002038 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e019      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
 800202c:	40021000 	.word	0x40021000
 8002030:	40007000 	.word	0x40007000
 8002034:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_OscConfig+0x500>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	429a      	cmp	r2, r3
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	429a      	cmp	r2, r3
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000

0800206c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0d0      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002080:	4b6a      	ldr	r3, [pc, #424]	; (800222c <HAL_RCC_ClockConfig+0x1c0>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d910      	bls.n	80020b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208e:	4b67      	ldr	r3, [pc, #412]	; (800222c <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 0207 	bic.w	r2, r3, #7
 8002096:	4965      	ldr	r1, [pc, #404]	; (800222c <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b63      	ldr	r3, [pc, #396]	; (800222c <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0b8      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d020      	beq.n	80020fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c8:	4b59      	ldr	r3, [pc, #356]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4a58      	ldr	r2, [pc, #352]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e0:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4a52      	ldr	r2, [pc, #328]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ec:	4b50      	ldr	r3, [pc, #320]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	494d      	ldr	r1, [pc, #308]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d040      	beq.n	800218c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	4b47      	ldr	r3, [pc, #284]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d115      	bne.n	800214a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e07f      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212a:	4b41      	ldr	r3, [pc, #260]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e073      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213a:	4b3d      	ldr	r3, [pc, #244]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e06b      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800214a:	4b39      	ldr	r3, [pc, #228]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f023 0203 	bic.w	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4936      	ldr	r1, [pc, #216]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800215c:	f7ff fa62 	bl	8001624 <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	e00a      	b.n	800217a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002164:	f7ff fa5e 	bl	8001624 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e053      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217a:	4b2d      	ldr	r3, [pc, #180]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 020c 	and.w	r2, r3, #12
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	429a      	cmp	r2, r3
 800218a:	d1eb      	bne.n	8002164 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800218c:	4b27      	ldr	r3, [pc, #156]	; (800222c <HAL_RCC_ClockConfig+0x1c0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d210      	bcs.n	80021bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b24      	ldr	r3, [pc, #144]	; (800222c <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 0207 	bic.w	r2, r3, #7
 80021a2:	4922      	ldr	r1, [pc, #136]	; (800222c <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b20      	ldr	r3, [pc, #128]	; (800222c <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e032      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c8:	4b19      	ldr	r3, [pc, #100]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4916      	ldr	r1, [pc, #88]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021e6:	4b12      	ldr	r3, [pc, #72]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	490e      	ldr	r1, [pc, #56]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021fa:	f000 f821 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 80021fe:	4602      	mov	r2, r0
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	490a      	ldr	r1, [pc, #40]	; (8002234 <HAL_RCC_ClockConfig+0x1c8>)
 800220c:	5ccb      	ldrb	r3, [r1, r3]
 800220e:	fa22 f303 	lsr.w	r3, r2, r3
 8002212:	4a09      	ldr	r2, [pc, #36]	; (8002238 <HAL_RCC_ClockConfig+0x1cc>)
 8002214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_RCC_ClockConfig+0x1d0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff f9c0 	bl	80015a0 <HAL_InitTick>

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40022000 	.word	0x40022000
 8002230:	40021000 	.word	0x40021000
 8002234:	08005b24 	.word	0x08005b24
 8002238:	20000004 	.word	0x20000004
 800223c:	20000008 	.word	0x20000008

08002240 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b04      	cmp	r3, #4
 8002268:	d002      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x30>
 800226a:	2b08      	cmp	r3, #8
 800226c:	d003      	beq.n	8002276 <HAL_RCC_GetSysClockFreq+0x36>
 800226e:	e027      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002272:	613b      	str	r3, [r7, #16]
      break;
 8002274:	e027      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	0c9b      	lsrs	r3, r3, #18
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	4a17      	ldr	r2, [pc, #92]	; (80022dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002280:	5cd3      	ldrb	r3, [r2, r3]
 8002282:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d010      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800228e:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	0c5b      	lsrs	r3, r3, #17
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	4a11      	ldr	r2, [pc, #68]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a0d      	ldr	r2, [pc, #52]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80022a2:	fb03 f202 	mul.w	r2, r3, r2
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	e004      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022b4:	fb02 f303 	mul.w	r3, r2, r3
 80022b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	613b      	str	r3, [r7, #16]
      break;
 80022be:	e002      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80022c2:	613b      	str	r3, [r7, #16]
      break;
 80022c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022c6:	693b      	ldr	r3, [r7, #16]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	371c      	adds	r7, #28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	007a1200 	.word	0x007a1200
 80022dc:	08005b34 	.word	0x08005b34
 80022e0:	08005b44 	.word	0x08005b44
 80022e4:	003d0900 	.word	0x003d0900

080022e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <RCC_Delay+0x34>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <RCC_Delay+0x38>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0a5b      	lsrs	r3, r3, #9
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002304:	bf00      	nop
  }
  while (Delay --);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1e5a      	subs	r2, r3, #1
 800230a:	60fa      	str	r2, [r7, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f9      	bne.n	8002304 <RCC_Delay+0x1c>
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	20000004 	.word	0x20000004
 8002320:	10624dd3 	.word	0x10624dd3

08002324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e041      	b.n	80023ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff f83c 	bl	80013c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3304      	adds	r3, #4
 8002360:	4619      	mov	r1, r3
 8002362:	4610      	mov	r0, r2
 8002364:	f000 fafc 	bl	8002960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d001      	beq.n	80023dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e032      	b.n	8002442 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a18      	ldr	r2, [pc, #96]	; (800244c <HAL_TIM_Base_Start+0x88>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00e      	beq.n	800240c <HAL_TIM_Base_Start+0x48>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f6:	d009      	beq.n	800240c <HAL_TIM_Base_Start+0x48>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a14      	ldr	r2, [pc, #80]	; (8002450 <HAL_TIM_Base_Start+0x8c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d004      	beq.n	800240c <HAL_TIM_Base_Start+0x48>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a13      	ldr	r2, [pc, #76]	; (8002454 <HAL_TIM_Base_Start+0x90>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d111      	bne.n	8002430 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b06      	cmp	r3, #6
 800241c:	d010      	beq.n	8002440 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0201 	orr.w	r2, r2, #1
 800242c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800242e:	e007      	b.n	8002440 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	40012c00 	.word	0x40012c00
 8002450:	40000400 	.word	0x40000400
 8002454:	40000800 	.word	0x40000800

08002458 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e041      	b.n	80024ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f839 	bl	80024f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3304      	adds	r3, #4
 8002494:	4619      	mov	r1, r3
 8002496:	4610      	mov	r0, r2
 8002498:	f000 fa62 	bl	8002960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d109      	bne.n	800252c <HAL_TIM_PWM_Start+0x24>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	bf14      	ite	ne
 8002524:	2301      	movne	r3, #1
 8002526:	2300      	moveq	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	e022      	b.n	8002572 <HAL_TIM_PWM_Start+0x6a>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b04      	cmp	r3, #4
 8002530:	d109      	bne.n	8002546 <HAL_TIM_PWM_Start+0x3e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	bf14      	ite	ne
 800253e:	2301      	movne	r3, #1
 8002540:	2300      	moveq	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	e015      	b.n	8002572 <HAL_TIM_PWM_Start+0x6a>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b08      	cmp	r3, #8
 800254a:	d109      	bne.n	8002560 <HAL_TIM_PWM_Start+0x58>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	bf14      	ite	ne
 8002558:	2301      	movne	r3, #1
 800255a:	2300      	moveq	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	e008      	b.n	8002572 <HAL_TIM_PWM_Start+0x6a>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b01      	cmp	r3, #1
 800256a:	bf14      	ite	ne
 800256c:	2301      	movne	r3, #1
 800256e:	2300      	moveq	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e05e      	b.n	8002638 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d104      	bne.n	800258a <HAL_TIM_PWM_Start+0x82>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002588:	e013      	b.n	80025b2 <HAL_TIM_PWM_Start+0xaa>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d104      	bne.n	800259a <HAL_TIM_PWM_Start+0x92>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002598:	e00b      	b.n	80025b2 <HAL_TIM_PWM_Start+0xaa>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d104      	bne.n	80025aa <HAL_TIM_PWM_Start+0xa2>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025a8:	e003      	b.n	80025b2 <HAL_TIM_PWM_Start+0xaa>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2202      	movs	r2, #2
 80025ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2201      	movs	r2, #1
 80025b8:	6839      	ldr	r1, [r7, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fc50 	bl	8002e60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1e      	ldr	r2, [pc, #120]	; (8002640 <HAL_TIM_PWM_Start+0x138>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d107      	bne.n	80025da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a18      	ldr	r2, [pc, #96]	; (8002640 <HAL_TIM_PWM_Start+0x138>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d00e      	beq.n	8002602 <HAL_TIM_PWM_Start+0xfa>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ec:	d009      	beq.n	8002602 <HAL_TIM_PWM_Start+0xfa>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a14      	ldr	r2, [pc, #80]	; (8002644 <HAL_TIM_PWM_Start+0x13c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d004      	beq.n	8002602 <HAL_TIM_PWM_Start+0xfa>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a12      	ldr	r2, [pc, #72]	; (8002648 <HAL_TIM_PWM_Start+0x140>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d111      	bne.n	8002626 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b06      	cmp	r3, #6
 8002612:	d010      	beq.n	8002636 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002624:	e007      	b.n	8002636 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0201 	orr.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40012c00 	.word	0x40012c00
 8002644:	40000400 	.word	0x40000400
 8002648:	40000800 	.word	0x40000800

0800264c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002666:	2302      	movs	r3, #2
 8002668:	e0ae      	b.n	80027c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0c      	cmp	r3, #12
 8002676:	f200 809f 	bhi.w	80027b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800267a:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800267c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002680:	080026b5 	.word	0x080026b5
 8002684:	080027b9 	.word	0x080027b9
 8002688:	080027b9 	.word	0x080027b9
 800268c:	080027b9 	.word	0x080027b9
 8002690:	080026f5 	.word	0x080026f5
 8002694:	080027b9 	.word	0x080027b9
 8002698:	080027b9 	.word	0x080027b9
 800269c:	080027b9 	.word	0x080027b9
 80026a0:	08002737 	.word	0x08002737
 80026a4:	080027b9 	.word	0x080027b9
 80026a8:	080027b9 	.word	0x080027b9
 80026ac:	080027b9 	.word	0x080027b9
 80026b0:	08002777 	.word	0x08002777
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f9b2 	bl	8002a24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0208 	orr.w	r2, r2, #8
 80026ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699a      	ldr	r2, [r3, #24]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0204 	bic.w	r2, r2, #4
 80026de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6999      	ldr	r1, [r3, #24]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	619a      	str	r2, [r3, #24]
      break;
 80026f2:	e064      	b.n	80027be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f9f8 	bl	8002af0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800270e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6999      	ldr	r1, [r3, #24]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	021a      	lsls	r2, r3, #8
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	619a      	str	r2, [r3, #24]
      break;
 8002734:	e043      	b.n	80027be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68b9      	ldr	r1, [r7, #8]
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fa41 	bl	8002bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69da      	ldr	r2, [r3, #28]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0208 	orr.w	r2, r2, #8
 8002750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69da      	ldr	r2, [r3, #28]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0204 	bic.w	r2, r2, #4
 8002760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	69d9      	ldr	r1, [r3, #28]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	61da      	str	r2, [r3, #28]
      break;
 8002774:	e023      	b.n	80027be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fa8b 	bl	8002c98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69da      	ldr	r2, [r3, #28]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69da      	ldr	r2, [r3, #28]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69d9      	ldr	r1, [r3, #28]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	021a      	lsls	r2, r3, #8
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	61da      	str	r2, [r3, #28]
      break;
 80027b6:	e002      	b.n	80027be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	75fb      	strb	r3, [r7, #23]
      break;
 80027bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_TIM_ConfigClockSource+0x1c>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e0b4      	b.n	8002956 <HAL_TIM_ConfigClockSource+0x186>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800280a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002812:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002824:	d03e      	beq.n	80028a4 <HAL_TIM_ConfigClockSource+0xd4>
 8002826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282a:	f200 8087 	bhi.w	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002832:	f000 8086 	beq.w	8002942 <HAL_TIM_ConfigClockSource+0x172>
 8002836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283a:	d87f      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800283c:	2b70      	cmp	r3, #112	; 0x70
 800283e:	d01a      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0xa6>
 8002840:	2b70      	cmp	r3, #112	; 0x70
 8002842:	d87b      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 8002844:	2b60      	cmp	r3, #96	; 0x60
 8002846:	d050      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x11a>
 8002848:	2b60      	cmp	r3, #96	; 0x60
 800284a:	d877      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800284c:	2b50      	cmp	r3, #80	; 0x50
 800284e:	d03c      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xfa>
 8002850:	2b50      	cmp	r3, #80	; 0x50
 8002852:	d873      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 8002854:	2b40      	cmp	r3, #64	; 0x40
 8002856:	d058      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x13a>
 8002858:	2b40      	cmp	r3, #64	; 0x40
 800285a:	d86f      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800285c:	2b30      	cmp	r3, #48	; 0x30
 800285e:	d064      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002860:	2b30      	cmp	r3, #48	; 0x30
 8002862:	d86b      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 8002864:	2b20      	cmp	r3, #32
 8002866:	d060      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002868:	2b20      	cmp	r3, #32
 800286a:	d867      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800286c:	2b00      	cmp	r3, #0
 800286e:	d05c      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002870:	2b10      	cmp	r3, #16
 8002872:	d05a      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002874:	e062      	b.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002886:	f000 facc 	bl	8002e22 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002898:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	609a      	str	r2, [r3, #8]
      break;
 80028a2:	e04f      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028b4:	f000 fab5 	bl	8002e22 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c6:	609a      	str	r2, [r3, #8]
      break;
 80028c8:	e03c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d6:	461a      	mov	r2, r3
 80028d8:	f000 fa2c 	bl	8002d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2150      	movs	r1, #80	; 0x50
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fa83 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 80028e8:	e02c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028f6:	461a      	mov	r2, r3
 80028f8:	f000 fa4a 	bl	8002d90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2160      	movs	r1, #96	; 0x60
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fa73 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 8002908:	e01c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002916:	461a      	mov	r2, r3
 8002918:	f000 fa0c 	bl	8002d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2140      	movs	r1, #64	; 0x40
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fa63 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 8002928:	e00c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f000 fa5a 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 800293a:	e003      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
      break;
 8002940:	e000      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a29      	ldr	r2, [pc, #164]	; (8002a18 <TIM_Base_SetConfig+0xb8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d00b      	beq.n	8002990 <TIM_Base_SetConfig+0x30>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297e:	d007      	beq.n	8002990 <TIM_Base_SetConfig+0x30>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a26      	ldr	r2, [pc, #152]	; (8002a1c <TIM_Base_SetConfig+0xbc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d003      	beq.n	8002990 <TIM_Base_SetConfig+0x30>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a25      	ldr	r2, [pc, #148]	; (8002a20 <TIM_Base_SetConfig+0xc0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d108      	bne.n	80029a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <TIM_Base_SetConfig+0xb8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00b      	beq.n	80029c2 <TIM_Base_SetConfig+0x62>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b0:	d007      	beq.n	80029c2 <TIM_Base_SetConfig+0x62>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <TIM_Base_SetConfig+0xbc>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d003      	beq.n	80029c2 <TIM_Base_SetConfig+0x62>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <TIM_Base_SetConfig+0xc0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d108      	bne.n	80029d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a07      	ldr	r2, [pc, #28]	; (8002a18 <TIM_Base_SetConfig+0xb8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d103      	bne.n	8002a08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	615a      	str	r2, [r3, #20]
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800

08002a24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f023 0201 	bic.w	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f023 0303 	bic.w	r3, r3, #3
 8002a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f023 0302 	bic.w	r3, r3, #2
 8002a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <TIM_OC1_SetConfig+0xc8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d10c      	bne.n	8002a9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f023 0308 	bic.w	r3, r3, #8
 8002a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f023 0304 	bic.w	r3, r3, #4
 8002a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a13      	ldr	r2, [pc, #76]	; (8002aec <TIM_OC1_SetConfig+0xc8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d111      	bne.n	8002ac6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	621a      	str	r2, [r3, #32]
}
 8002ae0:	bf00      	nop
 8002ae2:	371c      	adds	r7, #28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40012c00 	.word	0x40012c00

08002af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	f023 0210 	bic.w	r2, r3, #16
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f023 0320 	bic.w	r3, r3, #32
 8002b3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a1d      	ldr	r2, [pc, #116]	; (8002bc0 <TIM_OC2_SetConfig+0xd0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d10d      	bne.n	8002b6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a14      	ldr	r2, [pc, #80]	; (8002bc0 <TIM_OC2_SetConfig+0xd0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d113      	bne.n	8002b9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	621a      	str	r2, [r3, #32]
}
 8002bb6:	bf00      	nop
 8002bb8:	371c      	adds	r7, #28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	40012c00 	.word	0x40012c00

08002bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0303 	bic.w	r3, r3, #3
 8002bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a1d      	ldr	r2, [pc, #116]	; (8002c94 <TIM_OC3_SetConfig+0xd0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10d      	bne.n	8002c3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <TIM_OC3_SetConfig+0xd0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d113      	bne.n	8002c6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	621a      	str	r2, [r3, #32]
}
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40012c00 	.word	0x40012c00

08002c98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	031b      	lsls	r3, r3, #12
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <TIM_OC4_SetConfig+0x98>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d109      	bne.n	8002d0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	019b      	lsls	r3, r3, #6
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	621a      	str	r2, [r3, #32]
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	40012c00 	.word	0x40012c00

08002d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	f023 0201 	bic.w	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f023 030a 	bic.w	r3, r3, #10
 8002d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	621a      	str	r2, [r3, #32]
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f023 0210 	bic.w	r2, r3, #16
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	031b      	lsls	r3, r3, #12
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	621a      	str	r2, [r3, #32]
}
 8002de4:	bf00      	nop
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b085      	sub	sp, #20
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f043 0307 	orr.w	r3, r3, #7
 8002e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	609a      	str	r2, [r3, #8]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b087      	sub	sp, #28
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	021a      	lsls	r2, r3, #8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	431a      	orrs	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	609a      	str	r2, [r3, #8]
}
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	2201      	movs	r2, #1
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a1a      	ldr	r2, [r3, #32]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	401a      	ands	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a1a      	ldr	r2, [r3, #32]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	fa01 f303 	lsl.w	r3, r1, r3
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	621a      	str	r2, [r3, #32]
}
 8002e9e:	bf00      	nop
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e046      	b.n	8002f4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a16      	ldr	r2, [pc, #88]	; (8002f58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00e      	beq.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0c:	d009      	beq.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d004      	beq.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a10      	ldr	r2, [pc, #64]	; (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d10c      	bne.n	8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	40012c00 	.word	0x40012c00
 8002f5c:	40000400 	.word	0x40000400
 8002f60:	40000800 	.word	0x40000800

08002f64 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f76:	2b84      	cmp	r3, #132	; 0x84
 8002f78:	d005      	beq.n	8002f86 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002f7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4413      	add	r3, r2
 8002f82:	3303      	adds	r3, #3
 8002f84:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002f86:	68fb      	ldr	r3, [r7, #12]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002f96:	f001 f937 	bl	8004208 <vTaskStartScheduler>
  
  return osOK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa2:	b089      	sub	sp, #36	; 0x24
 8002fa4:	af04      	add	r7, sp, #16
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d020      	beq.n	8002ff4 <osThreadCreate+0x54>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d01c      	beq.n	8002ff4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685c      	ldr	r4, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691e      	ldr	r6, [r3, #16]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ffc9 	bl	8002f64 <makeFreeRtosPriority>
 8002fd2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fdc:	9202      	str	r2, [sp, #8]
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	9100      	str	r1, [sp, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	4632      	mov	r2, r6
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f000 fe59 	bl	8003ca0 <xTaskCreateStatic>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	e01c      	b.n	800302e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685c      	ldr	r4, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003000:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ffab 	bl	8002f64 <makeFreeRtosPriority>
 800300e:	4602      	mov	r2, r0
 8003010:	f107 030c 	add.w	r3, r7, #12
 8003014:	9301      	str	r3, [sp, #4]
 8003016:	9200      	str	r2, [sp, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4632      	mov	r2, r6
 800301c:	4629      	mov	r1, r5
 800301e:	4620      	mov	r0, r4
 8003020:	f000 fe9a 	bl	8003d58 <xTaskCreate>
 8003024:	4603      	mov	r3, r0
 8003026:	2b01      	cmp	r3, #1
 8003028:	d001      	beq.n	800302e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800302a:	2300      	movs	r3, #0
 800302c:	e000      	b.n	8003030 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800302e:	68fb      	ldr	r3, [r7, #12]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003038 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d007      	beq.n	8003058 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4619      	mov	r1, r3
 800304e:	2001      	movs	r0, #1
 8003050:	f000 fa28 	bl	80034a4 <xQueueCreateMutexStatic>
 8003054:	4603      	mov	r3, r0
 8003056:	e003      	b.n	8003060 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003058:	2001      	movs	r0, #1
 800305a:	f000 fa0b 	bl	8003474 <xQueueCreateMutex>
 800305e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f103 0208 	add.w	r2, r3, #8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f04f 32ff 	mov.w	r2, #4294967295
 8003080:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f103 0208 	add.w	r2, r3, #8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f103 0208 	add.w	r2, r3, #8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030be:	b480      	push	{r7}
 80030c0:	b085      	sub	sp, #20
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	601a      	str	r2, [r3, #0]
}
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d103      	bne.n	8003124 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	e00c      	b.n	800313e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3308      	adds	r3, #8
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	e002      	b.n	8003132 <vListInsert+0x2e>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	429a      	cmp	r2, r3
 800313c:	d2f6      	bcs.n	800312c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	601a      	str	r2, [r3, #0]
}
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6892      	ldr	r2, [r2, #8]
 800318a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6852      	ldr	r2, [r2, #4]
 8003194:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	429a      	cmp	r2, r3
 800319e:	d103      	bne.n	80031a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	1e5a      	subs	r2, r3, #1
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
	...

080031c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10a      	bne.n	80031f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80031ee:	bf00      	nop
 80031f0:	e7fe      	b.n	80031f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80031f2:	f002 f943 	bl	800547c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fe:	68f9      	ldr	r1, [r7, #12]
 8003200:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003202:	fb01 f303 	mul.w	r3, r1, r3
 8003206:	441a      	add	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003222:	3b01      	subs	r3, #1
 8003224:	68f9      	ldr	r1, [r7, #12]
 8003226:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	441a      	add	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	22ff      	movs	r2, #255	; 0xff
 8003236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	22ff      	movs	r2, #255	; 0xff
 800323e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d114      	bne.n	8003272 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01a      	beq.n	8003286 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	3310      	adds	r3, #16
 8003254:	4618      	mov	r0, r3
 8003256:	f001 fa5d 	bl	8004714 <xTaskRemoveFromEventList>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d012      	beq.n	8003286 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <xQueueGenericReset+0xcc>)
 8003262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	e009      	b.n	8003286 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3310      	adds	r3, #16
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fef6 	bl	8003068 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3324      	adds	r3, #36	; 0x24
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fef1 	bl	8003068 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003286:	f002 f929 	bl	80054dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800328a:	2301      	movs	r3, #1
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	e000ed04 	.word	0xe000ed04

08003298 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08e      	sub	sp, #56	; 0x38
 800329c:	af02      	add	r7, sp, #8
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10a      	bne.n	80032c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80032ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b0:	f383 8811 	msr	BASEPRI, r3
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80032be:	bf00      	nop
 80032c0:	e7fe      	b.n	80032c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10a      	bne.n	80032de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80032c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032da:	bf00      	nop
 80032dc:	e7fe      	b.n	80032dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <xQueueGenericCreateStatic+0x52>
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <xQueueGenericCreateStatic+0x56>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <xQueueGenericCreateStatic+0x58>
 80032ee:	2300      	movs	r3, #0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80032f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f8:	f383 8811 	msr	BASEPRI, r3
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	623b      	str	r3, [r7, #32]
}
 8003306:	bf00      	nop
 8003308:	e7fe      	b.n	8003308 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d102      	bne.n	8003316 <xQueueGenericCreateStatic+0x7e>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <xQueueGenericCreateStatic+0x82>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <xQueueGenericCreateStatic+0x84>
 800331a:	2300      	movs	r3, #0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10a      	bne.n	8003336 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	61fb      	str	r3, [r7, #28]
}
 8003332:	bf00      	nop
 8003334:	e7fe      	b.n	8003334 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003336:	2348      	movs	r3, #72	; 0x48
 8003338:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b48      	cmp	r3, #72	; 0x48
 800333e:	d00a      	beq.n	8003356 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	61bb      	str	r3, [r7, #24]
}
 8003352:	bf00      	nop
 8003354:	e7fe      	b.n	8003354 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00d      	beq.n	800337c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003368:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f843 	bl	8003402 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800337e:	4618      	mov	r0, r3
 8003380:	3730      	adds	r7, #48	; 0x30
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003386:	b580      	push	{r7, lr}
 8003388:	b08a      	sub	sp, #40	; 0x28
 800338a:	af02      	add	r7, sp, #8
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	4613      	mov	r3, r2
 8003392:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <xQueueGenericCreate+0x2a>
	__asm volatile
 800339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339e:	f383 8811 	msr	BASEPRI, r3
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	613b      	str	r3, [r7, #16]
}
 80033ac:	bf00      	nop
 80033ae:	e7fe      	b.n	80033ae <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
 80033ba:	e004      	b.n	80033c6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	fb02 f303 	mul.w	r3, r2, r3
 80033c4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3348      	adds	r3, #72	; 0x48
 80033ca:	4618      	mov	r0, r3
 80033cc:	f002 f956 	bl	800567c <pvPortMalloc>
 80033d0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00f      	beq.n	80033f8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	3348      	adds	r3, #72	; 0x48
 80033dc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033e6:	79fa      	ldrb	r2, [r7, #7]
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	4613      	mov	r3, r2
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f805 	bl	8003402 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80033f8:	69bb      	ldr	r3, [r7, #24]
	}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3720      	adds	r7, #32
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d103      	bne.n	800341e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	e002      	b.n	8003424 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003430:	2101      	movs	r1, #1
 8003432:	69b8      	ldr	r0, [r7, #24]
 8003434:	f7ff fec8 	bl	80031c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00e      	beq.n	800346c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003460:	2300      	movs	r3, #0
 8003462:	2200      	movs	r2, #0
 8003464:	2100      	movs	r1, #0
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f838 	bl	80034dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800346c:	bf00      	nop
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800347e:	2301      	movs	r3, #1
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	461a      	mov	r2, r3
 800348a:	6939      	ldr	r1, [r7, #16]
 800348c:	6978      	ldr	r0, [r7, #20]
 800348e:	f7ff ff7a 	bl	8003386 <xQueueGenericCreate>
 8003492:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7ff ffd3 	bl	8003440 <prvInitialiseMutex>

		return pxNewQueue;
 800349a:	68fb      	ldr	r3, [r7, #12]
	}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	4603      	mov	r3, r0
 80034ac:	6039      	str	r1, [r7, #0]
 80034ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80034b0:	2301      	movs	r3, #1
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	2300      	movs	r3, #0
 80034b6:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2200      	movs	r2, #0
 80034c0:	6939      	ldr	r1, [r7, #16]
 80034c2:	6978      	ldr	r0, [r7, #20]
 80034c4:	f7ff fee8 	bl	8003298 <xQueueGenericCreateStatic>
 80034c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f7ff ffb8 	bl	8003440 <prvInitialiseMutex>

		return pxNewQueue;
 80034d0:	68fb      	ldr	r3, [r7, #12]
	}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08e      	sub	sp, #56	; 0x38
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80034ea:	2300      	movs	r3, #0
 80034ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <xQueueGenericSend+0x32>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800350a:	bf00      	nop
 800350c:	e7fe      	b.n	800350c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d103      	bne.n	800351c <xQueueGenericSend+0x40>
 8003514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <xQueueGenericSend+0x44>
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <xQueueGenericSend+0x46>
 8003520:	2300      	movs	r3, #0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10a      	bne.n	800353c <xQueueGenericSend+0x60>
	__asm volatile
 8003526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003538:	bf00      	nop
 800353a:	e7fe      	b.n	800353a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d103      	bne.n	800354a <xQueueGenericSend+0x6e>
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <xQueueGenericSend+0x72>
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <xQueueGenericSend+0x74>
 800354e:	2300      	movs	r3, #0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10a      	bne.n	800356a <xQueueGenericSend+0x8e>
	__asm volatile
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	623b      	str	r3, [r7, #32]
}
 8003566:	bf00      	nop
 8003568:	e7fe      	b.n	8003568 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800356a:	f001 fa93 	bl	8004a94 <xTaskGetSchedulerState>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <xQueueGenericSend+0x9e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <xQueueGenericSend+0xa2>
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <xQueueGenericSend+0xa4>
 800357e:	2300      	movs	r3, #0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <xQueueGenericSend+0xbe>
	__asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	61fb      	str	r3, [r7, #28]
}
 8003596:	bf00      	nop
 8003598:	e7fe      	b.n	8003598 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800359a:	f001 ff6f 	bl	800547c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d302      	bcc.n	80035b0 <xQueueGenericSend+0xd4>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d129      	bne.n	8003604 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035b6:	f000 fa07 	bl	80039c8 <prvCopyDataToQueue>
 80035ba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d010      	beq.n	80035e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	3324      	adds	r3, #36	; 0x24
 80035c8:	4618      	mov	r0, r3
 80035ca:	f001 f8a3 	bl	8004714 <xTaskRemoveFromEventList>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d013      	beq.n	80035fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80035d4:	4b3f      	ldr	r3, [pc, #252]	; (80036d4 <xQueueGenericSend+0x1f8>)
 80035d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	e00a      	b.n	80035fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80035ec:	4b39      	ldr	r3, [pc, #228]	; (80036d4 <xQueueGenericSend+0x1f8>)
 80035ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80035fc:	f001 ff6e 	bl	80054dc <vPortExitCritical>
				return pdPASS;
 8003600:	2301      	movs	r3, #1
 8003602:	e063      	b.n	80036cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d103      	bne.n	8003612 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800360a:	f001 ff67 	bl	80054dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800360e:	2300      	movs	r3, #0
 8003610:	e05c      	b.n	80036cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	4618      	mov	r0, r3
 800361e:	f001 f8db 	bl	80047d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003622:	2301      	movs	r3, #1
 8003624:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003626:	f001 ff59 	bl	80054dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800362a:	f000 fe53 	bl	80042d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800362e:	f001 ff25 	bl	800547c <vPortEnterCritical>
 8003632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003634:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003638:	b25b      	sxtb	r3, r3
 800363a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363e:	d103      	bne.n	8003648 <xQueueGenericSend+0x16c>
 8003640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800364e:	b25b      	sxtb	r3, r3
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d103      	bne.n	800365e <xQueueGenericSend+0x182>
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800365e:	f001 ff3d 	bl	80054dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003662:	1d3a      	adds	r2, r7, #4
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f001 f8ca 	bl	8004804 <xTaskCheckForTimeOut>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d124      	bne.n	80036c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003676:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003678:	f000 fa9e 	bl	8003bb8 <prvIsQueueFull>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d018      	beq.n	80036b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003684:	3310      	adds	r3, #16
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	4611      	mov	r1, r2
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fff2 	bl	8004674 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003692:	f000 fa29 	bl	8003ae8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003696:	f000 fe2b 	bl	80042f0 <xTaskResumeAll>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	f47f af7c 	bne.w	800359a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <xQueueGenericSend+0x1f8>)
 80036a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	e772      	b.n	800359a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80036b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036b6:	f000 fa17 	bl	8003ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036ba:	f000 fe19 	bl	80042f0 <xTaskResumeAll>
 80036be:	e76c      	b.n	800359a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80036c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036c2:	f000 fa11 	bl	8003ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036c6:	f000 fe13 	bl	80042f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80036ca:	2300      	movs	r3, #0
		}
	}
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3738      	adds	r7, #56	; 0x38
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	e000ed04 	.word	0xe000ed04

080036d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08e      	sub	sp, #56	; 0x38
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10a      	bne.n	8003706 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003702:	bf00      	nop
 8003704:	e7fe      	b.n	8003704 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d103      	bne.n	8003714 <xQueueGenericSendFromISR+0x3c>
 800370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <xQueueGenericSendFromISR+0x40>
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <xQueueGenericSendFromISR+0x42>
 8003718:	2300      	movs	r3, #0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10a      	bne.n	8003734 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800371e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	623b      	str	r3, [r7, #32]
}
 8003730:	bf00      	nop
 8003732:	e7fe      	b.n	8003732 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d103      	bne.n	8003742 <xQueueGenericSendFromISR+0x6a>
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <xQueueGenericSendFromISR+0x6e>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <xQueueGenericSendFromISR+0x70>
 8003746:	2300      	movs	r3, #0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	61fb      	str	r3, [r7, #28]
}
 800375e:	bf00      	nop
 8003760:	e7fe      	b.n	8003760 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003762:	f001 ff4d 	bl	8005600 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003766:	f3ef 8211 	mrs	r2, BASEPRI
 800376a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	61ba      	str	r2, [r7, #24]
 800377c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800377e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003780:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <xQueueGenericSendFromISR+0xbc>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d12c      	bne.n	80037ee <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800379a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037a4:	f000 f910 	bl	80039c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80037a8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80037ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b0:	d112      	bne.n	80037d8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d016      	beq.n	80037e8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	3324      	adds	r3, #36	; 0x24
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 ffa8 	bl	8004714 <xTaskRemoveFromEventList>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00e      	beq.n	80037e8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00b      	beq.n	80037e8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	e007      	b.n	80037e8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80037d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037dc:	3301      	adds	r3, #1
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	b25a      	sxtb	r2, r3
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80037e8:	2301      	movs	r3, #1
 80037ea:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80037ec:	e001      	b.n	80037f2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
 80037f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80037fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003800:	4618      	mov	r0, r3
 8003802:	3738      	adds	r7, #56	; 0x38
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08c      	sub	sp, #48	; 0x30
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003814:	2300      	movs	r3, #0
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10a      	bne.n	8003838 <xQueueReceive+0x30>
	__asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	623b      	str	r3, [r7, #32]
}
 8003834:	bf00      	nop
 8003836:	e7fe      	b.n	8003836 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d103      	bne.n	8003846 <xQueueReceive+0x3e>
 800383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <xQueueReceive+0x42>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <xQueueReceive+0x44>
 800384a:	2300      	movs	r3, #0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <xQueueReceive+0x5e>
	__asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	61fb      	str	r3, [r7, #28]
}
 8003862:	bf00      	nop
 8003864:	e7fe      	b.n	8003864 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003866:	f001 f915 	bl	8004a94 <xTaskGetSchedulerState>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d102      	bne.n	8003876 <xQueueReceive+0x6e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <xQueueReceive+0x72>
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <xQueueReceive+0x74>
 800387a:	2300      	movs	r3, #0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10a      	bne.n	8003896 <xQueueReceive+0x8e>
	__asm volatile
 8003880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	61bb      	str	r3, [r7, #24]
}
 8003892:	bf00      	nop
 8003894:	e7fe      	b.n	8003894 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003896:	f001 fdf1 	bl	800547c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800389a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01f      	beq.n	80038e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038aa:	f000 f8f7 	bl	8003a9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	1e5a      	subs	r2, r3, #1
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00f      	beq.n	80038de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	3310      	adds	r3, #16
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 ff26 	bl	8004714 <xTaskRemoveFromEventList>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d007      	beq.n	80038de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80038ce:	4b3d      	ldr	r3, [pc, #244]	; (80039c4 <xQueueReceive+0x1bc>)
 80038d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80038de:	f001 fdfd 	bl	80054dc <vPortExitCritical>
				return pdPASS;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e069      	b.n	80039ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d103      	bne.n	80038f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038ec:	f001 fdf6 	bl	80054dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80038f0:	2300      	movs	r3, #0
 80038f2:	e062      	b.n	80039ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038fa:	f107 0310 	add.w	r3, r7, #16
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 ff6a 	bl	80047d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003904:	2301      	movs	r3, #1
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003908:	f001 fde8 	bl	80054dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800390c:	f000 fce2 	bl	80042d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003910:	f001 fdb4 	bl	800547c <vPortEnterCritical>
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800391a:	b25b      	sxtb	r3, r3
 800391c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003920:	d103      	bne.n	800392a <xQueueReceive+0x122>
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003930:	b25b      	sxtb	r3, r3
 8003932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003936:	d103      	bne.n	8003940 <xQueueReceive+0x138>
 8003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003940:	f001 fdcc 	bl	80054dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003944:	1d3a      	adds	r2, r7, #4
 8003946:	f107 0310 	add.w	r3, r7, #16
 800394a:	4611      	mov	r1, r2
 800394c:	4618      	mov	r0, r3
 800394e:	f000 ff59 	bl	8004804 <xTaskCheckForTimeOut>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d123      	bne.n	80039a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800395a:	f000 f917 	bl	8003b8c <prvIsQueueEmpty>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d017      	beq.n	8003994 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	3324      	adds	r3, #36	; 0x24
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	4611      	mov	r1, r2
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fe81 	bl	8004674 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003974:	f000 f8b8 	bl	8003ae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003978:	f000 fcba 	bl	80042f0 <xTaskResumeAll>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d189      	bne.n	8003896 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003982:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <xQueueReceive+0x1bc>)
 8003984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	e780      	b.n	8003896 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003996:	f000 f8a7 	bl	8003ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800399a:	f000 fca9 	bl	80042f0 <xTaskResumeAll>
 800399e:	e77a      	b.n	8003896 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80039a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039a2:	f000 f8a1 	bl	8003ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039a6:	f000 fca3 	bl	80042f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039ac:	f000 f8ee 	bl	8003b8c <prvIsQueueEmpty>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f43f af6f 	beq.w	8003896 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80039b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3730      	adds	r7, #48	; 0x30
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	e000ed04 	.word	0xe000ed04

080039c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10d      	bne.n	8003a02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d14d      	bne.n	8003a8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f001 f86c 	bl	8004ad0 <xTaskPriorityDisinherit>
 80039f8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	605a      	str	r2, [r3, #4]
 8003a00:	e043      	b.n	8003a8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d119      	bne.n	8003a3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6898      	ldr	r0, [r3, #8]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	461a      	mov	r2, r3
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	f002 f836 	bl	8005a84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	441a      	add	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d32b      	bcc.n	8003a8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	609a      	str	r2, [r3, #8]
 8003a3a:	e026      	b.n	8003a8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	68d8      	ldr	r0, [r3, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	461a      	mov	r2, r3
 8003a46:	68b9      	ldr	r1, [r7, #8]
 8003a48:	f002 f81c 	bl	8005a84 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	425b      	negs	r3, r3
 8003a56:	441a      	add	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d207      	bcs.n	8003a78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	425b      	negs	r3, r3
 8003a72:	441a      	add	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d105      	bne.n	8003a8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003a92:	697b      	ldr	r3, [r7, #20]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d018      	beq.n	8003ae0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	441a      	add	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d303      	bcc.n	8003ad0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68d9      	ldr	r1, [r3, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6838      	ldr	r0, [r7, #0]
 8003adc:	f001 ffd2 	bl	8005a84 <memcpy>
	}
}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003af0:	f001 fcc4 	bl	800547c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003afa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003afc:	e011      	b.n	8003b22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d012      	beq.n	8003b2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3324      	adds	r3, #36	; 0x24
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fe02 	bl	8004714 <xTaskRemoveFromEventList>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003b16:	f000 fed7 	bl	80048c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	dce9      	bgt.n	8003afe <prvUnlockQueue+0x16>
 8003b2a:	e000      	b.n	8003b2e <prvUnlockQueue+0x46>
					break;
 8003b2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	22ff      	movs	r2, #255	; 0xff
 8003b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003b36:	f001 fcd1 	bl	80054dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003b3a:	f001 fc9f 	bl	800547c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b46:	e011      	b.n	8003b6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d012      	beq.n	8003b76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3310      	adds	r3, #16
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fddd 	bl	8004714 <xTaskRemoveFromEventList>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003b60:	f000 feb2 	bl	80048c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b64:	7bbb      	ldrb	r3, [r7, #14]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	dce9      	bgt.n	8003b48 <prvUnlockQueue+0x60>
 8003b74:	e000      	b.n	8003b78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	22ff      	movs	r2, #255	; 0xff
 8003b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003b80:	f001 fcac 	bl	80054dc <vPortExitCritical>
}
 8003b84:	bf00      	nop
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b94:	f001 fc72 	bl	800547c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	e001      	b.n	8003baa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003baa:	f001 fc97 	bl	80054dc <vPortExitCritical>

	return xReturn;
 8003bae:	68fb      	ldr	r3, [r7, #12]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003bc0:	f001 fc5c 	bl	800547c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d102      	bne.n	8003bd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	e001      	b.n	8003bda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003bda:	f001 fc7f 	bl	80054dc <vPortExitCritical>

	return xReturn;
 8003bde:	68fb      	ldr	r3, [r7, #12]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	e014      	b.n	8003c22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003bf8:	4a0e      	ldr	r2, [pc, #56]	; (8003c34 <vQueueAddToRegistry+0x4c>)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10b      	bne.n	8003c1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003c04:	490b      	ldr	r1, [pc, #44]	; (8003c34 <vQueueAddToRegistry+0x4c>)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003c0e:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <vQueueAddToRegistry+0x4c>)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4413      	add	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003c1a:	e006      	b.n	8003c2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b07      	cmp	r3, #7
 8003c26:	d9e7      	bls.n	8003bf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003c28:	bf00      	nop
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	20000844 	.word	0x20000844

08003c38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003c48:	f001 fc18 	bl	800547c <vPortEnterCritical>
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c52:	b25b      	sxtb	r3, r3
 8003c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c58:	d103      	bne.n	8003c62 <vQueueWaitForMessageRestricted+0x2a>
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c68:	b25b      	sxtb	r3, r3
 8003c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6e:	d103      	bne.n	8003c78 <vQueueWaitForMessageRestricted+0x40>
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c78:	f001 fc30 	bl	80054dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d106      	bne.n	8003c92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	3324      	adds	r3, #36	; 0x24
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fd15 	bl	80046bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c92:	6978      	ldr	r0, [r7, #20]
 8003c94:	f7ff ff28 	bl	8003ae8 <prvUnlockQueue>
	}
 8003c98:	bf00      	nop
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08e      	sub	sp, #56	; 0x38
 8003ca4:	af04      	add	r7, sp, #16
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10a      	bne.n	8003cca <xTaskCreateStatic+0x2a>
	__asm volatile
 8003cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	623b      	str	r3, [r7, #32]
}
 8003cc6:	bf00      	nop
 8003cc8:	e7fe      	b.n	8003cc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10a      	bne.n	8003ce6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	61fb      	str	r3, [r7, #28]
}
 8003ce2:	bf00      	nop
 8003ce4:	e7fe      	b.n	8003ce4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ce6:	2354      	movs	r3, #84	; 0x54
 8003ce8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b54      	cmp	r3, #84	; 0x54
 8003cee:	d00a      	beq.n	8003d06 <xTaskCreateStatic+0x66>
	__asm volatile
 8003cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	61bb      	str	r3, [r7, #24]
}
 8003d02:	bf00      	nop
 8003d04:	e7fe      	b.n	8003d04 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01e      	beq.n	8003d4a <xTaskCreateStatic+0xaa>
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d01b      	beq.n	8003d4a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d24:	2300      	movs	r3, #0
 8003d26:	9303      	str	r3, [sp, #12]
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	9302      	str	r3, [sp, #8]
 8003d2c:	f107 0314 	add.w	r3, r7, #20
 8003d30:	9301      	str	r3, [sp, #4]
 8003d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 f850 	bl	8003de2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d44:	f000 f8cc 	bl	8003ee0 <prvAddNewTaskToReadyList>
 8003d48:	e001      	b.n	8003d4e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d4e:	697b      	ldr	r3, [r7, #20]
	}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3728      	adds	r7, #40	; 0x28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08c      	sub	sp, #48	; 0x30
 8003d5c:	af04      	add	r7, sp, #16
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d68:	88fb      	ldrh	r3, [r7, #6]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f001 fc85 	bl	800567c <pvPortMalloc>
 8003d72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00e      	beq.n	8003d98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003d7a:	2054      	movs	r0, #84	; 0x54
 8003d7c:	f001 fc7e 	bl	800567c <pvPortMalloc>
 8003d80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d8e:	e005      	b.n	8003d9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d90:	6978      	ldr	r0, [r7, #20]
 8003d92:	f001 fd37 	bl	8005804 <vPortFree>
 8003d96:	e001      	b.n	8003d9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d017      	beq.n	8003dd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003daa:	88fa      	ldrh	r2, [r7, #6]
 8003dac:	2300      	movs	r3, #0
 8003dae:	9303      	str	r3, [sp, #12]
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	9302      	str	r3, [sp, #8]
 8003db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db6:	9301      	str	r3, [sp, #4]
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f80e 	bl	8003de2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dc6:	69f8      	ldr	r0, [r7, #28]
 8003dc8:	f000 f88a 	bl	8003ee0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	e002      	b.n	8003dd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003dd8:	69bb      	ldr	r3, [r7, #24]
	}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3720      	adds	r7, #32
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b088      	sub	sp, #32
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	f023 0307 	bic.w	r3, r3, #7
 8003e08:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <prvInitialiseNewTask+0x48>
	__asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	617b      	str	r3, [r7, #20]
}
 8003e26:	bf00      	nop
 8003e28:	e7fe      	b.n	8003e28 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e012      	b.n	8003e56 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	4413      	add	r3, r2
 8003e36:	7819      	ldrb	r1, [r3, #0]
 8003e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3334      	adds	r3, #52	; 0x34
 8003e40:	460a      	mov	r2, r1
 8003e42:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	4413      	add	r3, r2
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d006      	beq.n	8003e5e <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	3301      	adds	r3, #1
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	2b0f      	cmp	r3, #15
 8003e5a:	d9e9      	bls.n	8003e30 <prvInitialiseNewTask+0x4e>
 8003e5c:	e000      	b.n	8003e60 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003e5e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	2b06      	cmp	r3, #6
 8003e6c:	d901      	bls.n	8003e72 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e6e:	2306      	movs	r3, #6
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e76:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e7c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e80:	2200      	movs	r2, #0
 8003e82:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	3304      	adds	r3, #4
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff f90c 	bl	80030a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	3318      	adds	r3, #24
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff f907 	bl	80030a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	f1c3 0207 	rsb	r2, r3, #7
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	68f9      	ldr	r1, [r7, #12]
 8003ec0:	69b8      	ldr	r0, [r7, #24]
 8003ec2:	f001 f9e9 	bl	8005298 <pxPortInitialiseStack>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ed8:	bf00      	nop
 8003eda:	3720      	adds	r7, #32
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ee8:	f001 fac8 	bl	800547c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003eec:	4b2a      	ldr	r3, [pc, #168]	; (8003f98 <prvAddNewTaskToReadyList+0xb8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	4a29      	ldr	r2, [pc, #164]	; (8003f98 <prvAddNewTaskToReadyList+0xb8>)
 8003ef4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ef6:	4b29      	ldr	r3, [pc, #164]	; (8003f9c <prvAddNewTaskToReadyList+0xbc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d109      	bne.n	8003f12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003efe:	4a27      	ldr	r2, [pc, #156]	; (8003f9c <prvAddNewTaskToReadyList+0xbc>)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f04:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <prvAddNewTaskToReadyList+0xb8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d110      	bne.n	8003f2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f0c:	f000 fd00 	bl	8004910 <prvInitialiseTaskLists>
 8003f10:	e00d      	b.n	8003f2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f12:	4b23      	ldr	r3, [pc, #140]	; (8003fa0 <prvAddNewTaskToReadyList+0xc0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f1a:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <prvAddNewTaskToReadyList+0xbc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d802      	bhi.n	8003f2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f28:	4a1c      	ldr	r2, [pc, #112]	; (8003f9c <prvAddNewTaskToReadyList+0xbc>)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f2e:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <prvAddNewTaskToReadyList+0xc4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3301      	adds	r3, #1
 8003f34:	4a1b      	ldr	r2, [pc, #108]	; (8003fa4 <prvAddNewTaskToReadyList+0xc4>)
 8003f36:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <prvAddNewTaskToReadyList+0xc8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <prvAddNewTaskToReadyList+0xc8>)
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4a15      	ldr	r2, [pc, #84]	; (8003fac <prvAddNewTaskToReadyList+0xcc>)
 8003f58:	441a      	add	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4610      	mov	r0, r2
 8003f62:	f7ff f8ac 	bl	80030be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f66:	f001 fab9 	bl	80054dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <prvAddNewTaskToReadyList+0xc0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00e      	beq.n	8003f90 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f72:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <prvAddNewTaskToReadyList+0xbc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d207      	bcs.n	8003f90 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <prvAddNewTaskToReadyList+0xd0>)
 8003f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20000984 	.word	0x20000984
 8003f9c:	20000884 	.word	0x20000884
 8003fa0:	20000990 	.word	0x20000990
 8003fa4:	200009a0 	.word	0x200009a0
 8003fa8:	2000098c 	.word	0x2000098c
 8003fac:	20000888 	.word	0x20000888
 8003fb0:	e000ed04 	.word	0xe000ed04

08003fb4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003fbc:	f001 fa5e 	bl	800547c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d102      	bne.n	8003fcc <vTaskSuspend+0x18>
 8003fc6:	4b3c      	ldr	r3, [pc, #240]	; (80040b8 <vTaskSuspend+0x104>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	e000      	b.n	8003fce <vTaskSuspend+0x1a>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff f8cd 	bl	8003174 <uxListRemove>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d115      	bne.n	800400c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe4:	4935      	ldr	r1, [pc, #212]	; (80040bc <vTaskSuspend+0x108>)
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10a      	bne.n	800400c <vTaskSuspend+0x58>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43da      	mvns	r2, r3
 8004002:	4b2f      	ldr	r3, [pc, #188]	; (80040c0 <vTaskSuspend+0x10c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4013      	ands	r3, r2
 8004008:	4a2d      	ldr	r2, [pc, #180]	; (80040c0 <vTaskSuspend+0x10c>)
 800400a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	2b00      	cmp	r3, #0
 8004012:	d004      	beq.n	800401e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3318      	adds	r3, #24
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff f8ab 	bl	8003174 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3304      	adds	r3, #4
 8004022:	4619      	mov	r1, r3
 8004024:	4827      	ldr	r0, [pc, #156]	; (80040c4 <vTaskSuspend+0x110>)
 8004026:	f7ff f84a 	bl	80030be <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b01      	cmp	r3, #1
 8004034:	d103      	bne.n	800403e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800403e:	f001 fa4d 	bl	80054dc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004042:	4b21      	ldr	r3, [pc, #132]	; (80040c8 <vTaskSuspend+0x114>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800404a:	f001 fa17 	bl	800547c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800404e:	f000 fcfd 	bl	8004a4c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004052:	f001 fa43 	bl	80054dc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004056:	4b18      	ldr	r3, [pc, #96]	; (80040b8 <vTaskSuspend+0x104>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	429a      	cmp	r2, r3
 800405e:	d127      	bne.n	80040b0 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8004060:	4b19      	ldr	r3, [pc, #100]	; (80040c8 <vTaskSuspend+0x114>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d017      	beq.n	8004098 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004068:	4b18      	ldr	r3, [pc, #96]	; (80040cc <vTaskSuspend+0x118>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <vTaskSuspend+0xd2>
	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	60bb      	str	r3, [r7, #8]
}
 8004082:	bf00      	nop
 8004084:	e7fe      	b.n	8004084 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8004086:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <vTaskSuspend+0x11c>)
 8004088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004096:	e00b      	b.n	80040b0 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8004098:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <vTaskSuspend+0x110>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <vTaskSuspend+0x120>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d103      	bne.n	80040ac <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 80040a4:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <vTaskSuspend+0x104>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
	}
 80040aa:	e001      	b.n	80040b0 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 80040ac:	f000 fa88 	bl	80045c0 <vTaskSwitchContext>
	}
 80040b0:	bf00      	nop
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20000884 	.word	0x20000884
 80040bc:	20000888 	.word	0x20000888
 80040c0:	2000098c 	.word	0x2000098c
 80040c4:	20000970 	.word	0x20000970
 80040c8:	20000990 	.word	0x20000990
 80040cc:	200009ac 	.word	0x200009ac
 80040d0:	e000ed04 	.word	0xe000ed04
 80040d4:	20000984 	.word	0x20000984

080040d8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	60fb      	str	r3, [r7, #12]
}
 8004100:	bf00      	nop
 8004102:	e7fe      	b.n	8004102 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	4a0e      	ldr	r2, [pc, #56]	; (8004144 <prvTaskIsTaskSuspended+0x6c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <prvTaskIsTaskSuspended+0x3a>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <prvTaskIsTaskSuspended+0x3c>
 8004112:	2300      	movs	r3, #0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00f      	beq.n	8004138 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	4a0a      	ldr	r2, [pc, #40]	; (8004148 <prvTaskIsTaskSuspended+0x70>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00a      	beq.n	8004138 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <prvTaskIsTaskSuspended+0x56>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <prvTaskIsTaskSuspended+0x58>
 800412e:	2300      	movs	r3, #0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8004134:	2301      	movs	r3, #1
 8004136:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004138:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800413a:	4618      	mov	r0, r3
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr
 8004144:	20000970 	.word	0x20000970
 8004148:	20000944 	.word	0x20000944

0800414c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10a      	bne.n	8004174 <vTaskResume+0x28>
	__asm volatile
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	60bb      	str	r3, [r7, #8]
}
 8004170:	bf00      	nop
 8004172:	e7fe      	b.n	8004172 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d039      	beq.n	80041ee <vTaskResume+0xa2>
 800417a:	4b1f      	ldr	r3, [pc, #124]	; (80041f8 <vTaskResume+0xac>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	429a      	cmp	r2, r3
 8004182:	d034      	beq.n	80041ee <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8004184:	f001 f97a 	bl	800547c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f7ff ffa5 	bl	80040d8 <prvTaskIsTaskSuspended>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d02a      	beq.n	80041ea <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3304      	adds	r3, #4
 8004198:	4618      	mov	r0, r3
 800419a:	f7fe ffeb 	bl	8003174 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	2201      	movs	r2, #1
 80041a4:	409a      	lsls	r2, r3
 80041a6:	4b15      	ldr	r3, [pc, #84]	; (80041fc <vTaskResume+0xb0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	4a13      	ldr	r2, [pc, #76]	; (80041fc <vTaskResume+0xb0>)
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4a10      	ldr	r2, [pc, #64]	; (8004200 <vTaskResume+0xb4>)
 80041be:	441a      	add	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3304      	adds	r3, #4
 80041c4:	4619      	mov	r1, r3
 80041c6:	4610      	mov	r0, r2
 80041c8:	f7fe ff79 	bl	80030be <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <vTaskResume+0xac>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d307      	bcc.n	80041ea <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80041da:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <vTaskResume+0xb8>)
 80041dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80041ea:	f001 f977 	bl	80054dc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041ee:	bf00      	nop
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000884 	.word	0x20000884
 80041fc:	2000098c 	.word	0x2000098c
 8004200:	20000888 	.word	0x20000888
 8004204:	e000ed04 	.word	0xe000ed04

08004208 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	; 0x28
 800420c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004216:	463a      	mov	r2, r7
 8004218:	1d39      	adds	r1, r7, #4
 800421a:	f107 0308 	add.w	r3, r7, #8
 800421e:	4618      	mov	r0, r3
 8004220:	f7fc fb84 	bl	800092c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	9202      	str	r2, [sp, #8]
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	2300      	movs	r3, #0
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	2300      	movs	r3, #0
 8004234:	460a      	mov	r2, r1
 8004236:	4921      	ldr	r1, [pc, #132]	; (80042bc <vTaskStartScheduler+0xb4>)
 8004238:	4821      	ldr	r0, [pc, #132]	; (80042c0 <vTaskStartScheduler+0xb8>)
 800423a:	f7ff fd31 	bl	8003ca0 <xTaskCreateStatic>
 800423e:	4603      	mov	r3, r0
 8004240:	4a20      	ldr	r2, [pc, #128]	; (80042c4 <vTaskStartScheduler+0xbc>)
 8004242:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004244:	4b1f      	ldr	r3, [pc, #124]	; (80042c4 <vTaskStartScheduler+0xbc>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800424c:	2301      	movs	r3, #1
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	e001      	b.n	8004256 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d102      	bne.n	8004262 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800425c:	f000 fd24 	bl	8004ca8 <xTimerCreateTimerTask>
 8004260:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d116      	bne.n	8004296 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	613b      	str	r3, [r7, #16]
}
 800427a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800427c:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <vTaskStartScheduler+0xc0>)
 800427e:	f04f 32ff 	mov.w	r2, #4294967295
 8004282:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004284:	4b11      	ldr	r3, [pc, #68]	; (80042cc <vTaskStartScheduler+0xc4>)
 8004286:	2201      	movs	r2, #1
 8004288:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800428a:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <vTaskStartScheduler+0xc8>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004290:	f001 f882 	bl	8005398 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004294:	e00e      	b.n	80042b4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d10a      	bne.n	80042b4 <vTaskStartScheduler+0xac>
	__asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	60fb      	str	r3, [r7, #12]
}
 80042b0:	bf00      	nop
 80042b2:	e7fe      	b.n	80042b2 <vTaskStartScheduler+0xaa>
}
 80042b4:	bf00      	nop
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	08005b0c 	.word	0x08005b0c
 80042c0:	080048e1 	.word	0x080048e1
 80042c4:	200009a8 	.word	0x200009a8
 80042c8:	200009a4 	.word	0x200009a4
 80042cc:	20000990 	.word	0x20000990
 80042d0:	20000988 	.word	0x20000988

080042d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80042d8:	4b04      	ldr	r3, [pc, #16]	; (80042ec <vTaskSuspendAll+0x18>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3301      	adds	r3, #1
 80042de:	4a03      	ldr	r2, [pc, #12]	; (80042ec <vTaskSuspendAll+0x18>)
 80042e0:	6013      	str	r3, [r2, #0]
}
 80042e2:	bf00      	nop
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	200009ac 	.word	0x200009ac

080042f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042fe:	4b41      	ldr	r3, [pc, #260]	; (8004404 <xTaskResumeAll+0x114>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <xTaskResumeAll+0x2c>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	603b      	str	r3, [r7, #0]
}
 8004318:	bf00      	nop
 800431a:	e7fe      	b.n	800431a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800431c:	f001 f8ae 	bl	800547c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004320:	4b38      	ldr	r3, [pc, #224]	; (8004404 <xTaskResumeAll+0x114>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3b01      	subs	r3, #1
 8004326:	4a37      	ldr	r2, [pc, #220]	; (8004404 <xTaskResumeAll+0x114>)
 8004328:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800432a:	4b36      	ldr	r3, [pc, #216]	; (8004404 <xTaskResumeAll+0x114>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d161      	bne.n	80043f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004332:	4b35      	ldr	r3, [pc, #212]	; (8004408 <xTaskResumeAll+0x118>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d05d      	beq.n	80043f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800433a:	e02e      	b.n	800439a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800433c:	4b33      	ldr	r3, [pc, #204]	; (800440c <xTaskResumeAll+0x11c>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	3318      	adds	r3, #24
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe ff13 	bl	8003174 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3304      	adds	r3, #4
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe ff0e 	bl	8003174 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	2201      	movs	r2, #1
 800435e:	409a      	lsls	r2, r3
 8004360:	4b2b      	ldr	r3, [pc, #172]	; (8004410 <xTaskResumeAll+0x120>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4313      	orrs	r3, r2
 8004366:	4a2a      	ldr	r2, [pc, #168]	; (8004410 <xTaskResumeAll+0x120>)
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4a27      	ldr	r2, [pc, #156]	; (8004414 <xTaskResumeAll+0x124>)
 8004378:	441a      	add	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3304      	adds	r3, #4
 800437e:	4619      	mov	r1, r3
 8004380:	4610      	mov	r0, r2
 8004382:	f7fe fe9c 	bl	80030be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438a:	4b23      	ldr	r3, [pc, #140]	; (8004418 <xTaskResumeAll+0x128>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	429a      	cmp	r2, r3
 8004392:	d302      	bcc.n	800439a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004394:	4b21      	ldr	r3, [pc, #132]	; (800441c <xTaskResumeAll+0x12c>)
 8004396:	2201      	movs	r2, #1
 8004398:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800439a:	4b1c      	ldr	r3, [pc, #112]	; (800440c <xTaskResumeAll+0x11c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1cc      	bne.n	800433c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043a8:	f000 fb50 	bl	8004a4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80043ac:	4b1c      	ldr	r3, [pc, #112]	; (8004420 <xTaskResumeAll+0x130>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d010      	beq.n	80043da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043b8:	f000 f844 	bl	8004444 <xTaskIncrementTick>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80043c2:	4b16      	ldr	r3, [pc, #88]	; (800441c <xTaskResumeAll+0x12c>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f1      	bne.n	80043b8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80043d4:	4b12      	ldr	r3, [pc, #72]	; (8004420 <xTaskResumeAll+0x130>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043da:	4b10      	ldr	r3, [pc, #64]	; (800441c <xTaskResumeAll+0x12c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043e2:	2301      	movs	r3, #1
 80043e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043e6:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <xTaskResumeAll+0x134>)
 80043e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043f6:	f001 f871 	bl	80054dc <vPortExitCritical>

	return xAlreadyYielded;
 80043fa:	68bb      	ldr	r3, [r7, #8]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	200009ac 	.word	0x200009ac
 8004408:	20000984 	.word	0x20000984
 800440c:	20000944 	.word	0x20000944
 8004410:	2000098c 	.word	0x2000098c
 8004414:	20000888 	.word	0x20000888
 8004418:	20000884 	.word	0x20000884
 800441c:	20000998 	.word	0x20000998
 8004420:	20000994 	.word	0x20000994
 8004424:	e000ed04 	.word	0xe000ed04

08004428 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800442e:	4b04      	ldr	r3, [pc, #16]	; (8004440 <xTaskGetTickCount+0x18>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004434:	687b      	ldr	r3, [r7, #4]
}
 8004436:	4618      	mov	r0, r3
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr
 8004440:	20000988 	.word	0x20000988

08004444 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800444e:	4b51      	ldr	r3, [pc, #324]	; (8004594 <xTaskIncrementTick+0x150>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f040 808d 	bne.w	8004572 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004458:	4b4f      	ldr	r3, [pc, #316]	; (8004598 <xTaskIncrementTick+0x154>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3301      	adds	r3, #1
 800445e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004460:	4a4d      	ldr	r2, [pc, #308]	; (8004598 <xTaskIncrementTick+0x154>)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d120      	bne.n	80044ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800446c:	4b4b      	ldr	r3, [pc, #300]	; (800459c <xTaskIncrementTick+0x158>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <xTaskIncrementTick+0x48>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	603b      	str	r3, [r7, #0]
}
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <xTaskIncrementTick+0x46>
 800448c:	4b43      	ldr	r3, [pc, #268]	; (800459c <xTaskIncrementTick+0x158>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	4b43      	ldr	r3, [pc, #268]	; (80045a0 <xTaskIncrementTick+0x15c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a41      	ldr	r2, [pc, #260]	; (800459c <xTaskIncrementTick+0x158>)
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	4a41      	ldr	r2, [pc, #260]	; (80045a0 <xTaskIncrementTick+0x15c>)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	4b40      	ldr	r3, [pc, #256]	; (80045a4 <xTaskIncrementTick+0x160>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3301      	adds	r3, #1
 80044a6:	4a3f      	ldr	r2, [pc, #252]	; (80045a4 <xTaskIncrementTick+0x160>)
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	f000 facf 	bl	8004a4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044ae:	4b3e      	ldr	r3, [pc, #248]	; (80045a8 <xTaskIncrementTick+0x164>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d34d      	bcc.n	8004554 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044b8:	4b38      	ldr	r3, [pc, #224]	; (800459c <xTaskIncrementTick+0x158>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <xTaskIncrementTick+0x82>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <xTaskIncrementTick+0x84>
 80044c6:	2300      	movs	r3, #0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044cc:	4b36      	ldr	r3, [pc, #216]	; (80045a8 <xTaskIncrementTick+0x164>)
 80044ce:	f04f 32ff 	mov.w	r2, #4294967295
 80044d2:	601a      	str	r2, [r3, #0]
					break;
 80044d4:	e03e      	b.n	8004554 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80044d6:	4b31      	ldr	r3, [pc, #196]	; (800459c <xTaskIncrementTick+0x158>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d203      	bcs.n	80044f6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044ee:	4a2e      	ldr	r2, [pc, #184]	; (80045a8 <xTaskIncrementTick+0x164>)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6013      	str	r3, [r2, #0]
						break;
 80044f4:	e02e      	b.n	8004554 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	3304      	adds	r3, #4
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fe fe3a 	bl	8003174 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	2b00      	cmp	r3, #0
 8004506:	d004      	beq.n	8004512 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	3318      	adds	r3, #24
 800450c:	4618      	mov	r0, r3
 800450e:	f7fe fe31 	bl	8003174 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	2201      	movs	r2, #1
 8004518:	409a      	lsls	r2, r3
 800451a:	4b24      	ldr	r3, [pc, #144]	; (80045ac <xTaskIncrementTick+0x168>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4313      	orrs	r3, r2
 8004520:	4a22      	ldr	r2, [pc, #136]	; (80045ac <xTaskIncrementTick+0x168>)
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4a1f      	ldr	r2, [pc, #124]	; (80045b0 <xTaskIncrementTick+0x16c>)
 8004532:	441a      	add	r2, r3
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	3304      	adds	r3, #4
 8004538:	4619      	mov	r1, r3
 800453a:	4610      	mov	r0, r2
 800453c:	f7fe fdbf 	bl	80030be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004544:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <xTaskIncrementTick+0x170>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	429a      	cmp	r2, r3
 800454c:	d3b4      	bcc.n	80044b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800454e:	2301      	movs	r3, #1
 8004550:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004552:	e7b1      	b.n	80044b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004554:	4b17      	ldr	r3, [pc, #92]	; (80045b4 <xTaskIncrementTick+0x170>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455a:	4915      	ldr	r1, [pc, #84]	; (80045b0 <xTaskIncrementTick+0x16c>)
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d907      	bls.n	800457c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800456c:	2301      	movs	r3, #1
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	e004      	b.n	800457c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004572:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <xTaskIncrementTick+0x174>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3301      	adds	r3, #1
 8004578:	4a0f      	ldr	r2, [pc, #60]	; (80045b8 <xTaskIncrementTick+0x174>)
 800457a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800457c:	4b0f      	ldr	r3, [pc, #60]	; (80045bc <xTaskIncrementTick+0x178>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004584:	2301      	movs	r3, #1
 8004586:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004588:	697b      	ldr	r3, [r7, #20]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	200009ac 	.word	0x200009ac
 8004598:	20000988 	.word	0x20000988
 800459c:	2000093c 	.word	0x2000093c
 80045a0:	20000940 	.word	0x20000940
 80045a4:	2000099c 	.word	0x2000099c
 80045a8:	200009a4 	.word	0x200009a4
 80045ac:	2000098c 	.word	0x2000098c
 80045b0:	20000888 	.word	0x20000888
 80045b4:	20000884 	.word	0x20000884
 80045b8:	20000994 	.word	0x20000994
 80045bc:	20000998 	.word	0x20000998

080045c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045c6:	4b26      	ldr	r3, [pc, #152]	; (8004660 <vTaskSwitchContext+0xa0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045ce:	4b25      	ldr	r3, [pc, #148]	; (8004664 <vTaskSwitchContext+0xa4>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045d4:	e03f      	b.n	8004656 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80045d6:	4b23      	ldr	r3, [pc, #140]	; (8004664 <vTaskSwitchContext+0xa4>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80045dc:	4b22      	ldr	r3, [pc, #136]	; (8004668 <vTaskSwitchContext+0xa8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	fab3 f383 	clz	r3, r3
 80045e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80045ea:	7afb      	ldrb	r3, [r7, #11]
 80045ec:	f1c3 031f 	rsb	r3, r3, #31
 80045f0:	617b      	str	r3, [r7, #20]
 80045f2:	491e      	ldr	r1, [pc, #120]	; (800466c <vTaskSwitchContext+0xac>)
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10a      	bne.n	800461c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	607b      	str	r3, [r7, #4]
}
 8004618:	bf00      	nop
 800461a:	e7fe      	b.n	800461a <vTaskSwitchContext+0x5a>
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4a11      	ldr	r2, [pc, #68]	; (800466c <vTaskSwitchContext+0xac>)
 8004628:	4413      	add	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	3308      	adds	r3, #8
 800463e:	429a      	cmp	r2, r3
 8004640:	d104      	bne.n	800464c <vTaskSwitchContext+0x8c>
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	605a      	str	r2, [r3, #4]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	4a07      	ldr	r2, [pc, #28]	; (8004670 <vTaskSwitchContext+0xb0>)
 8004654:	6013      	str	r3, [r2, #0]
}
 8004656:	bf00      	nop
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr
 8004660:	200009ac 	.word	0x200009ac
 8004664:	20000998 	.word	0x20000998
 8004668:	2000098c 	.word	0x2000098c
 800466c:	20000888 	.word	0x20000888
 8004670:	20000884 	.word	0x20000884

08004674 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	60fb      	str	r3, [r7, #12]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800469a:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <vTaskPlaceOnEventList+0x44>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3318      	adds	r3, #24
 80046a0:	4619      	mov	r1, r3
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fe fd2e 	bl	8003104 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046a8:	2101      	movs	r1, #1
 80046aa:	6838      	ldr	r0, [r7, #0]
 80046ac:	f000 fa96 	bl	8004bdc <prvAddCurrentTaskToDelayedList>
}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	20000884 	.word	0x20000884

080046bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	617b      	str	r3, [r7, #20]
}
 80046e0:	bf00      	nop
 80046e2:	e7fe      	b.n	80046e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046e4:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <vTaskPlaceOnEventListRestricted+0x54>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3318      	adds	r3, #24
 80046ea:	4619      	mov	r1, r3
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f7fe fce6 	bl	80030be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80046f8:	f04f 33ff 	mov.w	r3, #4294967295
 80046fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	68b8      	ldr	r0, [r7, #8]
 8004702:	f000 fa6b 	bl	8004bdc <prvAddCurrentTaskToDelayedList>
	}
 8004706:	bf00      	nop
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20000884 	.word	0x20000884

08004714 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10a      	bne.n	8004740 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	60fb      	str	r3, [r7, #12]
}
 800473c:	bf00      	nop
 800473e:	e7fe      	b.n	800473e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	3318      	adds	r3, #24
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe fd15 	bl	8003174 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800474a:	4b1d      	ldr	r3, [pc, #116]	; (80047c0 <xTaskRemoveFromEventList+0xac>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d11c      	bne.n	800478c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	3304      	adds	r3, #4
 8004756:	4618      	mov	r0, r3
 8004758:	f7fe fd0c 	bl	8003174 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	2201      	movs	r2, #1
 8004762:	409a      	lsls	r2, r3
 8004764:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <xTaskRemoveFromEventList+0xb0>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4313      	orrs	r3, r2
 800476a:	4a16      	ldr	r2, [pc, #88]	; (80047c4 <xTaskRemoveFromEventList+0xb0>)
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4a13      	ldr	r2, [pc, #76]	; (80047c8 <xTaskRemoveFromEventList+0xb4>)
 800477c:	441a      	add	r2, r3
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	3304      	adds	r3, #4
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f7fe fc9a 	bl	80030be <vListInsertEnd>
 800478a:	e005      	b.n	8004798 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	3318      	adds	r3, #24
 8004790:	4619      	mov	r1, r3
 8004792:	480e      	ldr	r0, [pc, #56]	; (80047cc <xTaskRemoveFromEventList+0xb8>)
 8004794:	f7fe fc93 	bl	80030be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479c:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <xTaskRemoveFromEventList+0xbc>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d905      	bls.n	80047b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047a6:	2301      	movs	r3, #1
 80047a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047aa:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <xTaskRemoveFromEventList+0xc0>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	e001      	b.n	80047b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80047b6:	697b      	ldr	r3, [r7, #20]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	200009ac 	.word	0x200009ac
 80047c4:	2000098c 	.word	0x2000098c
 80047c8:	20000888 	.word	0x20000888
 80047cc:	20000944 	.word	0x20000944
 80047d0:	20000884 	.word	0x20000884
 80047d4:	20000998 	.word	0x20000998

080047d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047e0:	4b06      	ldr	r3, [pc, #24]	; (80047fc <vTaskInternalSetTimeOutState+0x24>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047e8:	4b05      	ldr	r3, [pc, #20]	; (8004800 <vTaskInternalSetTimeOutState+0x28>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	605a      	str	r2, [r3, #4]
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	2000099c 	.word	0x2000099c
 8004800:	20000988 	.word	0x20000988

08004804 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	613b      	str	r3, [r7, #16]
}
 8004826:	bf00      	nop
 8004828:	e7fe      	b.n	8004828 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10a      	bne.n	8004846 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	60fb      	str	r3, [r7, #12]
}
 8004842:	bf00      	nop
 8004844:	e7fe      	b.n	8004844 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004846:	f000 fe19 	bl	800547c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800484a:	4b1d      	ldr	r3, [pc, #116]	; (80048c0 <xTaskCheckForTimeOut+0xbc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004862:	d102      	bne.n	800486a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004864:	2300      	movs	r3, #0
 8004866:	61fb      	str	r3, [r7, #28]
 8004868:	e023      	b.n	80048b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4b15      	ldr	r3, [pc, #84]	; (80048c4 <xTaskCheckForTimeOut+0xc0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d007      	beq.n	8004886 <xTaskCheckForTimeOut+0x82>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	429a      	cmp	r2, r3
 800487e:	d302      	bcc.n	8004886 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004880:	2301      	movs	r3, #1
 8004882:	61fb      	str	r3, [r7, #28]
 8004884:	e015      	b.n	80048b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	429a      	cmp	r2, r3
 800488e:	d20b      	bcs.n	80048a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	1ad2      	subs	r2, r2, r3
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff ff9b 	bl	80047d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048a2:	2300      	movs	r3, #0
 80048a4:	61fb      	str	r3, [r7, #28]
 80048a6:	e004      	b.n	80048b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048ae:	2301      	movs	r3, #1
 80048b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048b2:	f000 fe13 	bl	80054dc <vPortExitCritical>

	return xReturn;
 80048b6:	69fb      	ldr	r3, [r7, #28]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3720      	adds	r7, #32
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20000988 	.word	0x20000988
 80048c4:	2000099c 	.word	0x2000099c

080048c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048cc:	4b03      	ldr	r3, [pc, #12]	; (80048dc <vTaskMissedYield+0x14>)
 80048ce:	2201      	movs	r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
}
 80048d2:	bf00      	nop
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20000998 	.word	0x20000998

080048e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048e8:	f000 f852 	bl	8004990 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048ec:	4b06      	ldr	r3, [pc, #24]	; (8004908 <prvIdleTask+0x28>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d9f9      	bls.n	80048e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80048f4:	4b05      	ldr	r3, [pc, #20]	; (800490c <prvIdleTask+0x2c>)
 80048f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004904:	e7f0      	b.n	80048e8 <prvIdleTask+0x8>
 8004906:	bf00      	nop
 8004908:	20000888 	.word	0x20000888
 800490c:	e000ed04 	.word	0xe000ed04

08004910 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004916:	2300      	movs	r3, #0
 8004918:	607b      	str	r3, [r7, #4]
 800491a:	e00c      	b.n	8004936 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4a12      	ldr	r2, [pc, #72]	; (8004970 <prvInitialiseTaskLists+0x60>)
 8004928:	4413      	add	r3, r2
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe fb9c 	bl	8003068 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3301      	adds	r3, #1
 8004934:	607b      	str	r3, [r7, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b06      	cmp	r3, #6
 800493a:	d9ef      	bls.n	800491c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800493c:	480d      	ldr	r0, [pc, #52]	; (8004974 <prvInitialiseTaskLists+0x64>)
 800493e:	f7fe fb93 	bl	8003068 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004942:	480d      	ldr	r0, [pc, #52]	; (8004978 <prvInitialiseTaskLists+0x68>)
 8004944:	f7fe fb90 	bl	8003068 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004948:	480c      	ldr	r0, [pc, #48]	; (800497c <prvInitialiseTaskLists+0x6c>)
 800494a:	f7fe fb8d 	bl	8003068 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800494e:	480c      	ldr	r0, [pc, #48]	; (8004980 <prvInitialiseTaskLists+0x70>)
 8004950:	f7fe fb8a 	bl	8003068 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004954:	480b      	ldr	r0, [pc, #44]	; (8004984 <prvInitialiseTaskLists+0x74>)
 8004956:	f7fe fb87 	bl	8003068 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800495a:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <prvInitialiseTaskLists+0x78>)
 800495c:	4a05      	ldr	r2, [pc, #20]	; (8004974 <prvInitialiseTaskLists+0x64>)
 800495e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004960:	4b0a      	ldr	r3, [pc, #40]	; (800498c <prvInitialiseTaskLists+0x7c>)
 8004962:	4a05      	ldr	r2, [pc, #20]	; (8004978 <prvInitialiseTaskLists+0x68>)
 8004964:	601a      	str	r2, [r3, #0]
}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000888 	.word	0x20000888
 8004974:	20000914 	.word	0x20000914
 8004978:	20000928 	.word	0x20000928
 800497c:	20000944 	.word	0x20000944
 8004980:	20000958 	.word	0x20000958
 8004984:	20000970 	.word	0x20000970
 8004988:	2000093c 	.word	0x2000093c
 800498c:	20000940 	.word	0x20000940

08004990 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004996:	e019      	b.n	80049cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004998:	f000 fd70 	bl	800547c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800499c:	4b10      	ldr	r3, [pc, #64]	; (80049e0 <prvCheckTasksWaitingTermination+0x50>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3304      	adds	r3, #4
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fe fbe3 	bl	8003174 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049ae:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <prvCheckTasksWaitingTermination+0x54>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	4a0b      	ldr	r2, [pc, #44]	; (80049e4 <prvCheckTasksWaitingTermination+0x54>)
 80049b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049b8:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <prvCheckTasksWaitingTermination+0x58>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3b01      	subs	r3, #1
 80049be:	4a0a      	ldr	r2, [pc, #40]	; (80049e8 <prvCheckTasksWaitingTermination+0x58>)
 80049c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049c2:	f000 fd8b 	bl	80054dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f810 	bl	80049ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049cc:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <prvCheckTasksWaitingTermination+0x58>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e1      	bne.n	8004998 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20000958 	.word	0x20000958
 80049e4:	20000984 	.word	0x20000984
 80049e8:	2000096c 	.word	0x2000096c

080049ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d108      	bne.n	8004a10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fefe 	bl	8005804 <vPortFree>
				vPortFree( pxTCB );
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fefb 	bl	8005804 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a0e:	e018      	b.n	8004a42 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d103      	bne.n	8004a22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fef2 	bl	8005804 <vPortFree>
	}
 8004a20:	e00f      	b.n	8004a42 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d00a      	beq.n	8004a42 <prvDeleteTCB+0x56>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	60fb      	str	r3, [r7, #12]
}
 8004a3e:	bf00      	nop
 8004a40:	e7fe      	b.n	8004a40 <prvDeleteTCB+0x54>
	}
 8004a42:	bf00      	nop
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a52:	4b0e      	ldr	r3, [pc, #56]	; (8004a8c <prvResetNextTaskUnblockTime+0x40>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <prvResetNextTaskUnblockTime+0x14>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <prvResetNextTaskUnblockTime+0x16>
 8004a60:	2300      	movs	r3, #0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a66:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <prvResetNextTaskUnblockTime+0x44>)
 8004a68:	f04f 32ff 	mov.w	r2, #4294967295
 8004a6c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a6e:	e008      	b.n	8004a82 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a70:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <prvResetNextTaskUnblockTime+0x40>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	4a04      	ldr	r2, [pc, #16]	; (8004a90 <prvResetNextTaskUnblockTime+0x44>)
 8004a80:	6013      	str	r3, [r2, #0]
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr
 8004a8c:	2000093c 	.word	0x2000093c
 8004a90:	200009a4 	.word	0x200009a4

08004a94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <xTaskGetSchedulerState+0x34>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d102      	bne.n	8004aa8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	607b      	str	r3, [r7, #4]
 8004aa6:	e008      	b.n	8004aba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aa8:	4b08      	ldr	r3, [pc, #32]	; (8004acc <xTaskGetSchedulerState+0x38>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d102      	bne.n	8004ab6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	607b      	str	r3, [r7, #4]
 8004ab4:	e001      	b.n	8004aba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004aba:	687b      	ldr	r3, [r7, #4]
	}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc80      	pop	{r7}
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000990 	.word	0x20000990
 8004acc:	200009ac 	.word	0x200009ac

08004ad0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d06e      	beq.n	8004bc4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ae6:	4b3a      	ldr	r3, [pc, #232]	; (8004bd0 <xTaskPriorityDisinherit+0x100>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d00a      	beq.n	8004b06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	60fb      	str	r3, [r7, #12]
}
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10a      	bne.n	8004b24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	60bb      	str	r3, [r7, #8]
}
 8004b20:	bf00      	nop
 8004b22:	e7fe      	b.n	8004b22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b28:	1e5a      	subs	r2, r3, #1
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d044      	beq.n	8004bc4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d140      	bne.n	8004bc4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	3304      	adds	r3, #4
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe fb14 	bl	8003174 <uxListRemove>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d115      	bne.n	8004b7e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b56:	491f      	ldr	r1, [pc, #124]	; (8004bd4 <xTaskPriorityDisinherit+0x104>)
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10a      	bne.n	8004b7e <xTaskPriorityDisinherit+0xae>
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	43da      	mvns	r2, r3
 8004b74:	4b18      	ldr	r3, [pc, #96]	; (8004bd8 <xTaskPriorityDisinherit+0x108>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <xTaskPriorityDisinherit+0x108>)
 8004b7c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	f1c3 0207 	rsb	r2, r3, #7
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	2201      	movs	r2, #1
 8004b98:	409a      	lsls	r2, r3
 8004b9a:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <xTaskPriorityDisinherit+0x108>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	4a0d      	ldr	r2, [pc, #52]	; (8004bd8 <xTaskPriorityDisinherit+0x108>)
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4a08      	ldr	r2, [pc, #32]	; (8004bd4 <xTaskPriorityDisinherit+0x104>)
 8004bb2:	441a      	add	r2, r3
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	f7fe fa7f 	bl	80030be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bc4:	697b      	ldr	r3, [r7, #20]
	}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20000884 	.word	0x20000884
 8004bd4:	20000888 	.word	0x20000888
 8004bd8:	2000098c 	.word	0x2000098c

08004bdc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004be6:	4b29      	ldr	r3, [pc, #164]	; (8004c8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bec:	4b28      	ldr	r3, [pc, #160]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe fabe 	bl	8003174 <uxListRemove>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10b      	bne.n	8004c16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004bfe:	4b24      	ldr	r3, [pc, #144]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	2201      	movs	r2, #1
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	43da      	mvns	r2, r3
 8004c0c:	4b21      	ldr	r3, [pc, #132]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4013      	ands	r3, r2
 8004c12:	4a20      	ldr	r2, [pc, #128]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d10a      	bne.n	8004c34 <prvAddCurrentTaskToDelayedList+0x58>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d007      	beq.n	8004c34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c24:	4b1a      	ldr	r3, [pc, #104]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	481a      	ldr	r0, [pc, #104]	; (8004c98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c2e:	f7fe fa46 	bl	80030be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c32:	e026      	b.n	8004c82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4413      	add	r3, r2
 8004c3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c3c:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d209      	bcs.n	8004c60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c4c:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b0f      	ldr	r3, [pc, #60]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3304      	adds	r3, #4
 8004c56:	4619      	mov	r1, r3
 8004c58:	4610      	mov	r0, r2
 8004c5a:	f7fe fa53 	bl	8003104 <vListInsert>
}
 8004c5e:	e010      	b.n	8004c82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c60:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f7fe fa49 	bl	8003104 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c72:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d202      	bcs.n	8004c82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c7c:	4a09      	ldr	r2, [pc, #36]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	6013      	str	r3, [r2, #0]
}
 8004c82:	bf00      	nop
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000988 	.word	0x20000988
 8004c90:	20000884 	.word	0x20000884
 8004c94:	2000098c 	.word	0x2000098c
 8004c98:	20000970 	.word	0x20000970
 8004c9c:	20000940 	.word	0x20000940
 8004ca0:	2000093c 	.word	0x2000093c
 8004ca4:	200009a4 	.word	0x200009a4

08004ca8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	; 0x28
 8004cac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004cb2:	f000 fab1 	bl	8005218 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004cb6:	4b1c      	ldr	r3, [pc, #112]	; (8004d28 <xTimerCreateTimerTask+0x80>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d021      	beq.n	8004d02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004cc6:	1d3a      	adds	r2, r7, #4
 8004cc8:	f107 0108 	add.w	r1, r7, #8
 8004ccc:	f107 030c 	add.w	r3, r7, #12
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fb fe43 	bl	800095c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	9202      	str	r2, [sp, #8]
 8004cde:	9301      	str	r3, [sp, #4]
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	460a      	mov	r2, r1
 8004ce8:	4910      	ldr	r1, [pc, #64]	; (8004d2c <xTimerCreateTimerTask+0x84>)
 8004cea:	4811      	ldr	r0, [pc, #68]	; (8004d30 <xTimerCreateTimerTask+0x88>)
 8004cec:	f7fe ffd8 	bl	8003ca0 <xTaskCreateStatic>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	4a10      	ldr	r2, [pc, #64]	; (8004d34 <xTimerCreateTimerTask+0x8c>)
 8004cf4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004cf6:	4b0f      	ldr	r3, [pc, #60]	; (8004d34 <xTimerCreateTimerTask+0x8c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	613b      	str	r3, [r7, #16]
}
 8004d1a:	bf00      	nop
 8004d1c:	e7fe      	b.n	8004d1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d1e:	697b      	ldr	r3, [r7, #20]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	200009e0 	.word	0x200009e0
 8004d2c:	08005b14 	.word	0x08005b14
 8004d30:	08004e55 	.word	0x08004e55
 8004d34:	200009e4 	.word	0x200009e4

08004d38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08a      	sub	sp, #40	; 0x28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	623b      	str	r3, [r7, #32]
}
 8004d62:	bf00      	nop
 8004d64:	e7fe      	b.n	8004d64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004d66:	4b1a      	ldr	r3, [pc, #104]	; (8004dd0 <xTimerGenericCommand+0x98>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d02a      	beq.n	8004dc4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b05      	cmp	r3, #5
 8004d7e:	dc18      	bgt.n	8004db2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d80:	f7ff fe88 	bl	8004a94 <xTaskGetSchedulerState>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d109      	bne.n	8004d9e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d8a:	4b11      	ldr	r3, [pc, #68]	; (8004dd0 <xTimerGenericCommand+0x98>)
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	f107 0114 	add.w	r1, r7, #20
 8004d92:	2300      	movs	r3, #0
 8004d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d96:	f7fe fba1 	bl	80034dc <xQueueGenericSend>
 8004d9a:	6278      	str	r0, [r7, #36]	; 0x24
 8004d9c:	e012      	b.n	8004dc4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <xTimerGenericCommand+0x98>)
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	f107 0114 	add.w	r1, r7, #20
 8004da6:	2300      	movs	r3, #0
 8004da8:	2200      	movs	r2, #0
 8004daa:	f7fe fb97 	bl	80034dc <xQueueGenericSend>
 8004dae:	6278      	str	r0, [r7, #36]	; 0x24
 8004db0:	e008      	b.n	8004dc4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004db2:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <xTimerGenericCommand+0x98>)
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	f107 0114 	add.w	r1, r7, #20
 8004dba:	2300      	movs	r3, #0
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	f7fe fc8b 	bl	80036d8 <xQueueGenericSendFromISR>
 8004dc2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3728      	adds	r7, #40	; 0x28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	200009e0 	.word	0x200009e0

08004dd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dde:	4b1c      	ldr	r3, [pc, #112]	; (8004e50 <prvProcessExpiredTimer+0x7c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fe f9c1 	bl	8003174 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d122      	bne.n	8004e40 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	18d1      	adds	r1, r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	6978      	ldr	r0, [r7, #20]
 8004e08:	f000 f8c8 	bl	8004f9c <prvInsertTimerInActiveList>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d016      	beq.n	8004e40 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e12:	2300      	movs	r3, #0
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	2300      	movs	r3, #0
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	6978      	ldr	r0, [r7, #20]
 8004e1e:	f7ff ff8b 	bl	8004d38 <xTimerGenericCommand>
 8004e22:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	60fb      	str	r3, [r7, #12]
}
 8004e3c:	bf00      	nop
 8004e3e:	e7fe      	b.n	8004e3e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	6978      	ldr	r0, [r7, #20]
 8004e46:	4798      	blx	r3
}
 8004e48:	bf00      	nop
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	200009d8 	.word	0x200009d8

08004e54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e5c:	f107 0308 	add.w	r3, r7, #8
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 f857 	bl	8004f14 <prvGetNextExpireTime>
 8004e66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 f803 	bl	8004e78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e72:	f000 f8d5 	bl	8005020 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e76:	e7f1      	b.n	8004e5c <prvTimerTask+0x8>

08004e78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e82:	f7ff fa27 	bl	80042d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e86:	f107 0308 	add.w	r3, r7, #8
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 f866 	bl	8004f5c <prvSampleTimeNow>
 8004e90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d130      	bne.n	8004efa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <prvProcessTimerOrBlockTask+0x3c>
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d806      	bhi.n	8004eb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ea6:	f7ff fa23 	bl	80042f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004eaa:	68f9      	ldr	r1, [r7, #12]
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff ff91 	bl	8004dd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004eb2:	e024      	b.n	8004efe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d008      	beq.n	8004ecc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004eba:	4b13      	ldr	r3, [pc, #76]	; (8004f08 <prvProcessTimerOrBlockTask+0x90>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2301      	moveq	r3, #1
 8004ec6:	2300      	movne	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ecc:	4b0f      	ldr	r3, [pc, #60]	; (8004f0c <prvProcessTimerOrBlockTask+0x94>)
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	f7fe fead 	bl	8003c38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004ede:	f7ff fa07 	bl	80042f0 <xTaskResumeAll>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10a      	bne.n	8004efe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ee8:	4b09      	ldr	r3, [pc, #36]	; (8004f10 <prvProcessTimerOrBlockTask+0x98>)
 8004eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	f3bf 8f6f 	isb	sy
}
 8004ef8:	e001      	b.n	8004efe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004efa:	f7ff f9f9 	bl	80042f0 <xTaskResumeAll>
}
 8004efe:	bf00      	nop
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	200009dc 	.word	0x200009dc
 8004f0c:	200009e0 	.word	0x200009e0
 8004f10:	e000ed04 	.word	0xe000ed04

08004f14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f1c:	4b0e      	ldr	r3, [pc, #56]	; (8004f58 <prvGetNextExpireTime+0x44>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	bf0c      	ite	eq
 8004f26:	2301      	moveq	r3, #1
 8004f28:	2300      	movne	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d105      	bne.n	8004f46 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f3a:	4b07      	ldr	r3, [pc, #28]	; (8004f58 <prvGetNextExpireTime+0x44>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e001      	b.n	8004f4a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bc80      	pop	{r7}
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	200009d8 	.word	0x200009d8

08004f5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004f64:	f7ff fa60 	bl	8004428 <xTaskGetTickCount>
 8004f68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f6a:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <prvSampleTimeNow+0x3c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d205      	bcs.n	8004f80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f74:	f000 f8ee 	bl	8005154 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	e002      	b.n	8004f86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004f86:	4a04      	ldr	r2, [pc, #16]	; (8004f98 <prvSampleTimeNow+0x3c>)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	200009e8 	.word	0x200009e8

08004f9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d812      	bhi.n	8004fe8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	1ad2      	subs	r2, r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d302      	bcc.n	8004fd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	e01b      	b.n	800500e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004fd6:	4b10      	ldr	r3, [pc, #64]	; (8005018 <prvInsertTimerInActiveList+0x7c>)
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f7fe f88f 	bl	8003104 <vListInsert>
 8004fe6:	e012      	b.n	800500e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d206      	bcs.n	8004ffe <prvInsertTimerInActiveList+0x62>
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d302      	bcc.n	8004ffe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	e007      	b.n	800500e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ffe:	4b07      	ldr	r3, [pc, #28]	; (800501c <prvInsertTimerInActiveList+0x80>)
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	3304      	adds	r3, #4
 8005006:	4619      	mov	r1, r3
 8005008:	4610      	mov	r0, r2
 800500a:	f7fe f87b 	bl	8003104 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800500e:	697b      	ldr	r3, [r7, #20]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	200009dc 	.word	0x200009dc
 800501c:	200009d8 	.word	0x200009d8

08005020 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b08c      	sub	sp, #48	; 0x30
 8005024:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005026:	e081      	b.n	800512c <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	db7e      	blt.n	800512c <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d004      	beq.n	8005044 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	3304      	adds	r3, #4
 800503e:	4618      	mov	r0, r3
 8005040:	f7fe f898 	bl	8003174 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005044:	1d3b      	adds	r3, r7, #4
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff ff88 	bl	8004f5c <prvSampleTimeNow>
 800504c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b09      	cmp	r3, #9
 8005052:	d86a      	bhi.n	800512a <prvProcessReceivedCommands+0x10a>
 8005054:	a201      	add	r2, pc, #4	; (adr r2, 800505c <prvProcessReceivedCommands+0x3c>)
 8005056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505a:	bf00      	nop
 800505c:	08005085 	.word	0x08005085
 8005060:	08005085 	.word	0x08005085
 8005064:	08005085 	.word	0x08005085
 8005068:	0800512d 	.word	0x0800512d
 800506c:	080050e1 	.word	0x080050e1
 8005070:	08005119 	.word	0x08005119
 8005074:	08005085 	.word	0x08005085
 8005078:	08005085 	.word	0x08005085
 800507c:	0800512d 	.word	0x0800512d
 8005080:	080050e1 	.word	0x080050e1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	18d1      	adds	r1, r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a3a      	ldr	r2, [r7, #32]
 8005090:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005092:	f7ff ff83 	bl	8004f9c <prvInsertTimerInActiveList>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d047      	beq.n	800512c <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050a2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d13f      	bne.n	800512c <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	441a      	add	r2, r3
 80050b4:	2300      	movs	r3, #0
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	2300      	movs	r3, #0
 80050ba:	2100      	movs	r1, #0
 80050bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050be:	f7ff fe3b 	bl	8004d38 <xTimerGenericCommand>
 80050c2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d130      	bne.n	800512c <prvProcessReceivedCommands+0x10c>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	61bb      	str	r3, [r7, #24]
}
 80050dc:	bf00      	nop
 80050de:	e7fe      	b.n	80050de <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10a      	bne.n	8005104 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	617b      	str	r3, [r7, #20]
}
 8005100:	bf00      	nop
 8005102:	e7fe      	b.n	8005102 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	699a      	ldr	r2, [r3, #24]
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	18d1      	adds	r1, r2, r3
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	6a3a      	ldr	r2, [r7, #32]
 8005110:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005112:	f7ff ff43 	bl	8004f9c <prvInsertTimerInActiveList>
					break;
 8005116:	e009      	b.n	800512c <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 8005122:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005124:	f000 fb6e 	bl	8005804 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005128:	e000      	b.n	800512c <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
 800512a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800512c:	4b08      	ldr	r3, [pc, #32]	; (8005150 <prvProcessReceivedCommands+0x130>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f107 0108 	add.w	r1, r7, #8
 8005134:	2200      	movs	r2, #0
 8005136:	4618      	mov	r0, r3
 8005138:	f7fe fb66 	bl	8003808 <xQueueReceive>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	f47f af72 	bne.w	8005028 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	3728      	adds	r7, #40	; 0x28
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	200009e0 	.word	0x200009e0

08005154 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800515a:	e045      	b.n	80051e8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800515c:	4b2c      	ldr	r3, [pc, #176]	; (8005210 <prvSwitchTimerLists+0xbc>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005166:	4b2a      	ldr	r3, [pc, #168]	; (8005210 <prvSwitchTimerLists+0xbc>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3304      	adds	r3, #4
 8005174:	4618      	mov	r0, r3
 8005176:	f7fd fffd 	bl	8003174 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d12e      	bne.n	80051e8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4413      	add	r3, r2
 8005192:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	429a      	cmp	r2, r3
 800519a:	d90e      	bls.n	80051ba <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051a8:	4b19      	ldr	r3, [pc, #100]	; (8005210 <prvSwitchTimerLists+0xbc>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3304      	adds	r3, #4
 80051b0:	4619      	mov	r1, r3
 80051b2:	4610      	mov	r0, r2
 80051b4:	f7fd ffa6 	bl	8003104 <vListInsert>
 80051b8:	e016      	b.n	80051e8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051ba:	2300      	movs	r3, #0
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	2300      	movs	r3, #0
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	2100      	movs	r1, #0
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f7ff fdb7 	bl	8004d38 <xTimerGenericCommand>
 80051ca:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	603b      	str	r3, [r7, #0]
}
 80051e4:	bf00      	nop
 80051e6:	e7fe      	b.n	80051e6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051e8:	4b09      	ldr	r3, [pc, #36]	; (8005210 <prvSwitchTimerLists+0xbc>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1b4      	bne.n	800515c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051f2:	4b07      	ldr	r3, [pc, #28]	; (8005210 <prvSwitchTimerLists+0xbc>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80051f8:	4b06      	ldr	r3, [pc, #24]	; (8005214 <prvSwitchTimerLists+0xc0>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a04      	ldr	r2, [pc, #16]	; (8005210 <prvSwitchTimerLists+0xbc>)
 80051fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005200:	4a04      	ldr	r2, [pc, #16]	; (8005214 <prvSwitchTimerLists+0xc0>)
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	6013      	str	r3, [r2, #0]
}
 8005206:	bf00      	nop
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	200009d8 	.word	0x200009d8
 8005214:	200009dc 	.word	0x200009dc

08005218 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800521e:	f000 f92d 	bl	800547c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005222:	4b15      	ldr	r3, [pc, #84]	; (8005278 <prvCheckForValidListAndQueue+0x60>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d120      	bne.n	800526c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800522a:	4814      	ldr	r0, [pc, #80]	; (800527c <prvCheckForValidListAndQueue+0x64>)
 800522c:	f7fd ff1c 	bl	8003068 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005230:	4813      	ldr	r0, [pc, #76]	; (8005280 <prvCheckForValidListAndQueue+0x68>)
 8005232:	f7fd ff19 	bl	8003068 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005236:	4b13      	ldr	r3, [pc, #76]	; (8005284 <prvCheckForValidListAndQueue+0x6c>)
 8005238:	4a10      	ldr	r2, [pc, #64]	; (800527c <prvCheckForValidListAndQueue+0x64>)
 800523a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800523c:	4b12      	ldr	r3, [pc, #72]	; (8005288 <prvCheckForValidListAndQueue+0x70>)
 800523e:	4a10      	ldr	r2, [pc, #64]	; (8005280 <prvCheckForValidListAndQueue+0x68>)
 8005240:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005242:	2300      	movs	r3, #0
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	4b11      	ldr	r3, [pc, #68]	; (800528c <prvCheckForValidListAndQueue+0x74>)
 8005248:	4a11      	ldr	r2, [pc, #68]	; (8005290 <prvCheckForValidListAndQueue+0x78>)
 800524a:	210c      	movs	r1, #12
 800524c:	200a      	movs	r0, #10
 800524e:	f7fe f823 	bl	8003298 <xQueueGenericCreateStatic>
 8005252:	4603      	mov	r3, r0
 8005254:	4a08      	ldr	r2, [pc, #32]	; (8005278 <prvCheckForValidListAndQueue+0x60>)
 8005256:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005258:	4b07      	ldr	r3, [pc, #28]	; (8005278 <prvCheckForValidListAndQueue+0x60>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005260:	4b05      	ldr	r3, [pc, #20]	; (8005278 <prvCheckForValidListAndQueue+0x60>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	490b      	ldr	r1, [pc, #44]	; (8005294 <prvCheckForValidListAndQueue+0x7c>)
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe fcbe 	bl	8003be8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800526c:	f000 f936 	bl	80054dc <vPortExitCritical>
}
 8005270:	bf00      	nop
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	200009e0 	.word	0x200009e0
 800527c:	200009b0 	.word	0x200009b0
 8005280:	200009c4 	.word	0x200009c4
 8005284:	200009d8 	.word	0x200009d8
 8005288:	200009dc 	.word	0x200009dc
 800528c:	20000a64 	.word	0x20000a64
 8005290:	200009ec 	.word	0x200009ec
 8005294:	08005b1c 	.word	0x08005b1c

08005298 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3b04      	subs	r3, #4
 80052a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3b04      	subs	r3, #4
 80052b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f023 0201 	bic.w	r2, r3, #1
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3b04      	subs	r3, #4
 80052c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052c8:	4a08      	ldr	r2, [pc, #32]	; (80052ec <pxPortInitialiseStack+0x54>)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	3b14      	subs	r3, #20
 80052d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3b20      	subs	r3, #32
 80052de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052e0:	68fb      	ldr	r3, [r7, #12]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	080052f1 	.word	0x080052f1

080052f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052fa:	4b12      	ldr	r3, [pc, #72]	; (8005344 <prvTaskExitError+0x54>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005302:	d00a      	beq.n	800531a <prvTaskExitError+0x2a>
	__asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	60fb      	str	r3, [r7, #12]
}
 8005316:	bf00      	nop
 8005318:	e7fe      	b.n	8005318 <prvTaskExitError+0x28>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	60bb      	str	r3, [r7, #8]
}
 800532c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800532e:	bf00      	nop
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0fc      	beq.n	8005330 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005336:	bf00      	nop
 8005338:	bf00      	nop
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20000010 	.word	0x20000010
	...

08005350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005350:	4b07      	ldr	r3, [pc, #28]	; (8005370 <pxCurrentTCBConst2>)
 8005352:	6819      	ldr	r1, [r3, #0]
 8005354:	6808      	ldr	r0, [r1, #0]
 8005356:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800535a:	f380 8809 	msr	PSP, r0
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f04f 0000 	mov.w	r0, #0
 8005366:	f380 8811 	msr	BASEPRI, r0
 800536a:	f04e 0e0d 	orr.w	lr, lr, #13
 800536e:	4770      	bx	lr

08005370 <pxCurrentTCBConst2>:
 8005370:	20000884 	.word	0x20000884
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop

08005378 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005378:	4806      	ldr	r0, [pc, #24]	; (8005394 <prvPortStartFirstTask+0x1c>)
 800537a:	6800      	ldr	r0, [r0, #0]
 800537c:	6800      	ldr	r0, [r0, #0]
 800537e:	f380 8808 	msr	MSP, r0
 8005382:	b662      	cpsie	i
 8005384:	b661      	cpsie	f
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	df00      	svc	0
 8005390:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005392:	bf00      	nop
 8005394:	e000ed08 	.word	0xe000ed08

08005398 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800539e:	4b32      	ldr	r3, [pc, #200]	; (8005468 <xPortStartScheduler+0xd0>)
 80053a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	22ff      	movs	r2, #255	; 0xff
 80053ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	4b2a      	ldr	r3, [pc, #168]	; (800546c <xPortStartScheduler+0xd4>)
 80053c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053c6:	4b2a      	ldr	r3, [pc, #168]	; (8005470 <xPortStartScheduler+0xd8>)
 80053c8:	2207      	movs	r2, #7
 80053ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053cc:	e009      	b.n	80053e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80053ce:	4b28      	ldr	r3, [pc, #160]	; (8005470 <xPortStartScheduler+0xd8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	4a26      	ldr	r2, [pc, #152]	; (8005470 <xPortStartScheduler+0xd8>)
 80053d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053d8:	78fb      	ldrb	r3, [r7, #3]
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053e2:	78fb      	ldrb	r3, [r7, #3]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ea:	2b80      	cmp	r3, #128	; 0x80
 80053ec:	d0ef      	beq.n	80053ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053ee:	4b20      	ldr	r3, [pc, #128]	; (8005470 <xPortStartScheduler+0xd8>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f1c3 0307 	rsb	r3, r3, #7
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d00a      	beq.n	8005410 <xPortStartScheduler+0x78>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	60bb      	str	r3, [r7, #8]
}
 800540c:	bf00      	nop
 800540e:	e7fe      	b.n	800540e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005410:	4b17      	ldr	r3, [pc, #92]	; (8005470 <xPortStartScheduler+0xd8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	4a16      	ldr	r2, [pc, #88]	; (8005470 <xPortStartScheduler+0xd8>)
 8005418:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800541a:	4b15      	ldr	r3, [pc, #84]	; (8005470 <xPortStartScheduler+0xd8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005422:	4a13      	ldr	r2, [pc, #76]	; (8005470 <xPortStartScheduler+0xd8>)
 8005424:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	b2da      	uxtb	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800542e:	4b11      	ldr	r3, [pc, #68]	; (8005474 <xPortStartScheduler+0xdc>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a10      	ldr	r2, [pc, #64]	; (8005474 <xPortStartScheduler+0xdc>)
 8005434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005438:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800543a:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <xPortStartScheduler+0xdc>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a0d      	ldr	r2, [pc, #52]	; (8005474 <xPortStartScheduler+0xdc>)
 8005440:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005444:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005446:	f000 f8b9 	bl	80055bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800544a:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <xPortStartScheduler+0xe0>)
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005450:	f7ff ff92 	bl	8005378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005454:	f7ff f8b4 	bl	80045c0 <vTaskSwitchContext>
	prvTaskExitError();
 8005458:	f7ff ff4a 	bl	80052f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	e000e400 	.word	0xe000e400
 800546c:	20000aac 	.word	0x20000aac
 8005470:	20000ab0 	.word	0x20000ab0
 8005474:	e000ed20 	.word	0xe000ed20
 8005478:	20000010 	.word	0x20000010

0800547c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
	__asm volatile
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	607b      	str	r3, [r7, #4]
}
 8005494:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005496:	4b0f      	ldr	r3, [pc, #60]	; (80054d4 <vPortEnterCritical+0x58>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3301      	adds	r3, #1
 800549c:	4a0d      	ldr	r2, [pc, #52]	; (80054d4 <vPortEnterCritical+0x58>)
 800549e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054a0:	4b0c      	ldr	r3, [pc, #48]	; (80054d4 <vPortEnterCritical+0x58>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d10f      	bne.n	80054c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054a8:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <vPortEnterCritical+0x5c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	603b      	str	r3, [r7, #0]
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <vPortEnterCritical+0x4a>
	}
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc80      	pop	{r7}
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	20000010 	.word	0x20000010
 80054d8:	e000ed04 	.word	0xe000ed04

080054dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054e2:	4b11      	ldr	r3, [pc, #68]	; (8005528 <vPortExitCritical+0x4c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10a      	bne.n	8005500 <vPortExitCritical+0x24>
	__asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	607b      	str	r3, [r7, #4]
}
 80054fc:	bf00      	nop
 80054fe:	e7fe      	b.n	80054fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005500:	4b09      	ldr	r3, [pc, #36]	; (8005528 <vPortExitCritical+0x4c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3b01      	subs	r3, #1
 8005506:	4a08      	ldr	r2, [pc, #32]	; (8005528 <vPortExitCritical+0x4c>)
 8005508:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800550a:	4b07      	ldr	r3, [pc, #28]	; (8005528 <vPortExitCritical+0x4c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d105      	bne.n	800551e <vPortExitCritical+0x42>
 8005512:	2300      	movs	r3, #0
 8005514:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	f383 8811 	msr	BASEPRI, r3
}
 800551c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	bc80      	pop	{r7}
 8005526:	4770      	bx	lr
 8005528:	20000010 	.word	0x20000010
 800552c:	00000000 	.word	0x00000000

08005530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005530:	f3ef 8009 	mrs	r0, PSP
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	4b0d      	ldr	r3, [pc, #52]	; (8005570 <pxCurrentTCBConst>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005540:	6010      	str	r0, [r2, #0]
 8005542:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005546:	f04f 0050 	mov.w	r0, #80	; 0x50
 800554a:	f380 8811 	msr	BASEPRI, r0
 800554e:	f7ff f837 	bl	80045c0 <vTaskSwitchContext>
 8005552:	f04f 0000 	mov.w	r0, #0
 8005556:	f380 8811 	msr	BASEPRI, r0
 800555a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800555e:	6819      	ldr	r1, [r3, #0]
 8005560:	6808      	ldr	r0, [r1, #0]
 8005562:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005566:	f380 8809 	msr	PSP, r0
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	4770      	bx	lr

08005570 <pxCurrentTCBConst>:
 8005570:	20000884 	.word	0x20000884
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop

08005578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	607b      	str	r3, [r7, #4]
}
 8005590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005592:	f7fe ff57 	bl	8004444 <xTaskIncrementTick>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800559c:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <xPortSysTickHandler+0x40>)
 800559e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	2300      	movs	r3, #0
 80055a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f383 8811 	msr	BASEPRI, r3
}
 80055ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	e000ed04 	.word	0xe000ed04

080055bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055c0:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <vPortSetupTimerInterrupt+0x30>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <vPortSetupTimerInterrupt+0x34>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055cc:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <vPortSetupTimerInterrupt+0x38>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a09      	ldr	r2, [pc, #36]	; (80055f8 <vPortSetupTimerInterrupt+0x3c>)
 80055d2:	fba2 2303 	umull	r2, r3, r2, r3
 80055d6:	099b      	lsrs	r3, r3, #6
 80055d8:	4a08      	ldr	r2, [pc, #32]	; (80055fc <vPortSetupTimerInterrupt+0x40>)
 80055da:	3b01      	subs	r3, #1
 80055dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055de:	4b03      	ldr	r3, [pc, #12]	; (80055ec <vPortSetupTimerInterrupt+0x30>)
 80055e0:	2207      	movs	r2, #7
 80055e2:	601a      	str	r2, [r3, #0]
}
 80055e4:	bf00      	nop
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr
 80055ec:	e000e010 	.word	0xe000e010
 80055f0:	e000e018 	.word	0xe000e018
 80055f4:	20000004 	.word	0x20000004
 80055f8:	10624dd3 	.word	0x10624dd3
 80055fc:	e000e014 	.word	0xe000e014

08005600 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005606:	f3ef 8305 	mrs	r3, IPSR
 800560a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b0f      	cmp	r3, #15
 8005610:	d914      	bls.n	800563c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005612:	4a16      	ldr	r2, [pc, #88]	; (800566c <vPortValidateInterruptPriority+0x6c>)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4413      	add	r3, r2
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800561c:	4b14      	ldr	r3, [pc, #80]	; (8005670 <vPortValidateInterruptPriority+0x70>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	7afa      	ldrb	r2, [r7, #11]
 8005622:	429a      	cmp	r2, r3
 8005624:	d20a      	bcs.n	800563c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	607b      	str	r3, [r7, #4]
}
 8005638:	bf00      	nop
 800563a:	e7fe      	b.n	800563a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800563c:	4b0d      	ldr	r3, [pc, #52]	; (8005674 <vPortValidateInterruptPriority+0x74>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005644:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <vPortValidateInterruptPriority+0x78>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d90a      	bls.n	8005662 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	603b      	str	r3, [r7, #0]
}
 800565e:	bf00      	nop
 8005660:	e7fe      	b.n	8005660 <vPortValidateInterruptPriority+0x60>
	}
 8005662:	bf00      	nop
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	bc80      	pop	{r7}
 800566a:	4770      	bx	lr
 800566c:	e000e3f0 	.word	0xe000e3f0
 8005670:	20000aac 	.word	0x20000aac
 8005674:	e000ed0c 	.word	0xe000ed0c
 8005678:	20000ab0 	.word	0x20000ab0

0800567c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	; 0x28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005684:	2300      	movs	r3, #0
 8005686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005688:	f7fe fe24 	bl	80042d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800568c:	4b58      	ldr	r3, [pc, #352]	; (80057f0 <pvPortMalloc+0x174>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005694:	f000 f910 	bl	80058b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005698:	4b56      	ldr	r3, [pc, #344]	; (80057f4 <pvPortMalloc+0x178>)
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4013      	ands	r3, r2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f040 808e 	bne.w	80057c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01d      	beq.n	80056e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80056ac:	2208      	movs	r2, #8
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4413      	add	r3, r2
 80056b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d014      	beq.n	80056e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f023 0307 	bic.w	r3, r3, #7
 80056c4:	3308      	adds	r3, #8
 80056c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <pvPortMalloc+0x6c>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	617b      	str	r3, [r7, #20]
}
 80056e4:	bf00      	nop
 80056e6:	e7fe      	b.n	80056e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d069      	beq.n	80057c2 <pvPortMalloc+0x146>
 80056ee:	4b42      	ldr	r3, [pc, #264]	; (80057f8 <pvPortMalloc+0x17c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d864      	bhi.n	80057c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056f8:	4b40      	ldr	r3, [pc, #256]	; (80057fc <pvPortMalloc+0x180>)
 80056fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056fc:	4b3f      	ldr	r3, [pc, #252]	; (80057fc <pvPortMalloc+0x180>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005702:	e004      	b.n	800570e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	429a      	cmp	r2, r3
 8005716:	d903      	bls.n	8005720 <pvPortMalloc+0xa4>
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1f1      	bne.n	8005704 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005720:	4b33      	ldr	r3, [pc, #204]	; (80057f0 <pvPortMalloc+0x174>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005726:	429a      	cmp	r2, r3
 8005728:	d04b      	beq.n	80057c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2208      	movs	r2, #8
 8005730:	4413      	add	r3, r2
 8005732:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	1ad2      	subs	r2, r2, r3
 8005744:	2308      	movs	r3, #8
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	429a      	cmp	r2, r3
 800574a:	d91f      	bls.n	800578c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800574c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4413      	add	r3, r2
 8005752:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <pvPortMalloc+0xf8>
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	613b      	str	r3, [r7, #16]
}
 8005770:	bf00      	nop
 8005772:	e7fe      	b.n	8005772 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	1ad2      	subs	r2, r2, r3
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005786:	69b8      	ldr	r0, [r7, #24]
 8005788:	f000 f8f8 	bl	800597c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800578c:	4b1a      	ldr	r3, [pc, #104]	; (80057f8 <pvPortMalloc+0x17c>)
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	4a18      	ldr	r2, [pc, #96]	; (80057f8 <pvPortMalloc+0x17c>)
 8005798:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800579a:	4b17      	ldr	r3, [pc, #92]	; (80057f8 <pvPortMalloc+0x17c>)
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	4b18      	ldr	r3, [pc, #96]	; (8005800 <pvPortMalloc+0x184>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d203      	bcs.n	80057ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057a6:	4b14      	ldr	r3, [pc, #80]	; (80057f8 <pvPortMalloc+0x17c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a15      	ldr	r2, [pc, #84]	; (8005800 <pvPortMalloc+0x184>)
 80057ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	4b10      	ldr	r3, [pc, #64]	; (80057f4 <pvPortMalloc+0x178>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	431a      	orrs	r2, r3
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057c2:	f7fe fd95 	bl	80042f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <pvPortMalloc+0x16a>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	60fb      	str	r3, [r7, #12]
}
 80057e2:	bf00      	nop
 80057e4:	e7fe      	b.n	80057e4 <pvPortMalloc+0x168>
	return pvReturn;
 80057e6:	69fb      	ldr	r3, [r7, #28]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3728      	adds	r7, #40	; 0x28
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	200016bc 	.word	0x200016bc
 80057f4:	200016c8 	.word	0x200016c8
 80057f8:	200016c0 	.word	0x200016c0
 80057fc:	200016b4 	.word	0x200016b4
 8005800:	200016c4 	.word	0x200016c4

08005804 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d048      	beq.n	80058a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005816:	2308      	movs	r3, #8
 8005818:	425b      	negs	r3, r3
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4413      	add	r3, r2
 800581e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	4b21      	ldr	r3, [pc, #132]	; (80058b0 <vPortFree+0xac>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4013      	ands	r3, r2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10a      	bne.n	8005848 <vPortFree+0x44>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	60fb      	str	r3, [r7, #12]
}
 8005844:	bf00      	nop
 8005846:	e7fe      	b.n	8005846 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <vPortFree+0x62>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	60bb      	str	r3, [r7, #8]
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	4b11      	ldr	r3, [pc, #68]	; (80058b0 <vPortFree+0xac>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4013      	ands	r3, r2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d019      	beq.n	80058a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d115      	bne.n	80058a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <vPortFree+0xac>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	43db      	mvns	r3, r3
 8005886:	401a      	ands	r2, r3
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800588c:	f7fe fd22 	bl	80042d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <vPortFree+0xb0>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4413      	add	r3, r2
 800589a:	4a06      	ldr	r2, [pc, #24]	; (80058b4 <vPortFree+0xb0>)
 800589c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800589e:	6938      	ldr	r0, [r7, #16]
 80058a0:	f000 f86c 	bl	800597c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80058a4:	f7fe fd24 	bl	80042f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058a8:	bf00      	nop
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	200016c8 	.word	0x200016c8
 80058b4:	200016c0 	.word	0x200016c0

080058b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80058c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058c4:	4b27      	ldr	r3, [pc, #156]	; (8005964 <prvHeapInit+0xac>)
 80058c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00c      	beq.n	80058ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3307      	adds	r3, #7
 80058d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 0307 	bic.w	r3, r3, #7
 80058de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	4a1f      	ldr	r2, [pc, #124]	; (8005964 <prvHeapInit+0xac>)
 80058e8:	4413      	add	r3, r2
 80058ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058f0:	4a1d      	ldr	r2, [pc, #116]	; (8005968 <prvHeapInit+0xb0>)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058f6:	4b1c      	ldr	r3, [pc, #112]	; (8005968 <prvHeapInit+0xb0>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	4413      	add	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005904:	2208      	movs	r2, #8
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	1a9b      	subs	r3, r3, r2
 800590a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 0307 	bic.w	r3, r3, #7
 8005912:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4a15      	ldr	r2, [pc, #84]	; (800596c <prvHeapInit+0xb4>)
 8005918:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800591a:	4b14      	ldr	r3, [pc, #80]	; (800596c <prvHeapInit+0xb4>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2200      	movs	r2, #0
 8005920:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005922:	4b12      	ldr	r3, [pc, #72]	; (800596c <prvHeapInit+0xb4>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	1ad2      	subs	r2, r2, r3
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005938:	4b0c      	ldr	r3, [pc, #48]	; (800596c <prvHeapInit+0xb4>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	4a0a      	ldr	r2, [pc, #40]	; (8005970 <prvHeapInit+0xb8>)
 8005946:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	4a09      	ldr	r2, [pc, #36]	; (8005974 <prvHeapInit+0xbc>)
 800594e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005950:	4b09      	ldr	r3, [pc, #36]	; (8005978 <prvHeapInit+0xc0>)
 8005952:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005956:	601a      	str	r2, [r3, #0]
}
 8005958:	bf00      	nop
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	20000ab4 	.word	0x20000ab4
 8005968:	200016b4 	.word	0x200016b4
 800596c:	200016bc 	.word	0x200016bc
 8005970:	200016c4 	.word	0x200016c4
 8005974:	200016c0 	.word	0x200016c0
 8005978:	200016c8 	.word	0x200016c8

0800597c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005984:	4b27      	ldr	r3, [pc, #156]	; (8005a24 <prvInsertBlockIntoFreeList+0xa8>)
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	e002      	b.n	8005990 <prvInsertBlockIntoFreeList+0x14>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	429a      	cmp	r2, r3
 8005998:	d8f7      	bhi.n	800598a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	4413      	add	r3, r2
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d108      	bne.n	80059be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	441a      	add	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	441a      	add	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d118      	bne.n	8005a04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	4b14      	ldr	r3, [pc, #80]	; (8005a28 <prvInsertBlockIntoFreeList+0xac>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d00d      	beq.n	80059fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	441a      	add	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	e008      	b.n	8005a0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059fa:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <prvInsertBlockIntoFreeList+0xac>)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	e003      	b.n	8005a0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d002      	beq.n	8005a1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr
 8005a24:	200016b4 	.word	0x200016b4
 8005a28:	200016bc 	.word	0x200016bc

08005a2c <memset>:
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	4402      	add	r2, r0
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d100      	bne.n	8005a36 <memset+0xa>
 8005a34:	4770      	bx	lr
 8005a36:	f803 1b01 	strb.w	r1, [r3], #1
 8005a3a:	e7f9      	b.n	8005a30 <memset+0x4>

08005a3c <__libc_init_array>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	2600      	movs	r6, #0
 8005a40:	4d0c      	ldr	r5, [pc, #48]	; (8005a74 <__libc_init_array+0x38>)
 8005a42:	4c0d      	ldr	r4, [pc, #52]	; (8005a78 <__libc_init_array+0x3c>)
 8005a44:	1b64      	subs	r4, r4, r5
 8005a46:	10a4      	asrs	r4, r4, #2
 8005a48:	42a6      	cmp	r6, r4
 8005a4a:	d109      	bne.n	8005a60 <__libc_init_array+0x24>
 8005a4c:	f000 f828 	bl	8005aa0 <_init>
 8005a50:	2600      	movs	r6, #0
 8005a52:	4d0a      	ldr	r5, [pc, #40]	; (8005a7c <__libc_init_array+0x40>)
 8005a54:	4c0a      	ldr	r4, [pc, #40]	; (8005a80 <__libc_init_array+0x44>)
 8005a56:	1b64      	subs	r4, r4, r5
 8005a58:	10a4      	asrs	r4, r4, #2
 8005a5a:	42a6      	cmp	r6, r4
 8005a5c:	d105      	bne.n	8005a6a <__libc_init_array+0x2e>
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a64:	4798      	blx	r3
 8005a66:	3601      	adds	r6, #1
 8005a68:	e7ee      	b.n	8005a48 <__libc_init_array+0xc>
 8005a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6e:	4798      	blx	r3
 8005a70:	3601      	adds	r6, #1
 8005a72:	e7f2      	b.n	8005a5a <__libc_init_array+0x1e>
 8005a74:	08005b48 	.word	0x08005b48
 8005a78:	08005b48 	.word	0x08005b48
 8005a7c:	08005b48 	.word	0x08005b48
 8005a80:	08005b4c 	.word	0x08005b4c

08005a84 <memcpy>:
 8005a84:	440a      	add	r2, r1
 8005a86:	4291      	cmp	r1, r2
 8005a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a8c:	d100      	bne.n	8005a90 <memcpy+0xc>
 8005a8e:	4770      	bx	lr
 8005a90:	b510      	push	{r4, lr}
 8005a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a96:	4291      	cmp	r1, r2
 8005a98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a9c:	d1f9      	bne.n	8005a92 <memcpy+0xe>
 8005a9e:	bd10      	pop	{r4, pc}

08005aa0 <_init>:
 8005aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa2:	bf00      	nop
 8005aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa6:	bc08      	pop	{r3}
 8005aa8:	469e      	mov	lr, r3
 8005aaa:	4770      	bx	lr

08005aac <_fini>:
 8005aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aae:	bf00      	nop
 8005ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab2:	bc08      	pop	{r3}
 8005ab4:	469e      	mov	lr, r3
 8005ab6:	4770      	bx	lr
